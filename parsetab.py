
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n              | VARIABLE EQUALS math_expression SEMICOLON\n              | VARIABLE EQUALS array_structure SEMICOLON\n              | VARIABLE EQUALS condition SEMICOLON\n\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,7,8,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,56,58,59,60,62,65,68,77,79,83,90,102,104,],[7,7,56,61,62,63,65,-50,-51,-52,-53,-54,-55,-56,-57,68,-58,-59,-60,-61,-62,56,83,90,92,56,56,83,65,68,83,90,56,83,]),'NOT':([0,7,8,28,29,30,31,32,33,34,35,36,56,59,62,65,77,90,102,],[8,8,8,8,-50,-51,-52,-53,-54,-55,-56,-57,8,8,8,8,8,8,8,]),'NUMBER':([0,2,5,7,8,11,12,13,14,15,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,56,58,59,62,63,65,68,77,79,83,90,91,102,104,105,106,107,108,118,126,130,131,132,135,136,138,141,142,],[9,27,-4,9,27,-6,-7,-8,-9,-10,-5,27,-50,-51,-52,-53,-54,-55,-56,-57,69,-58,-59,-60,-61,-62,27,27,27,27,27,27,27,-15,27,69,89,27,27,27,69,27,69,69,9,27,27,69,-11,-12,-13,-14,27,27,-42,27,-43,27,-16,27,-17,-18,]),'VARIABLE':([0,2,5,7,8,11,12,13,14,15,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,56,58,59,62,63,65,68,77,79,83,90,91,92,102,104,105,106,107,108,118,126,129,130,131,132,135,136,138,141,142,],[10,26,-4,54,57,-6,-7,-8,-9,-10,-5,57,-50,-51,-52,-53,-54,-55,-56,-57,67,-58,-59,-60,-61,-62,57,57,57,57,57,57,57,-15,57,81,84,57,57,57,81,57,67,81,54,57,115,57,81,-11,-12,-13,-14,57,57,115,-42,26,-43,57,-16,26,-17,-18,]),'STRING':([0,2,5,7,8,11,12,13,14,15,24,28,29,30,31,32,33,34,35,36,43,44,45,46,47,48,49,50,56,59,62,63,65,77,90,91,102,105,106,107,108,118,126,130,131,132,135,136,138,141,142,],[16,16,-4,16,16,-6,-7,-8,-9,-10,-5,16,-50,-51,-52,-53,-54,-55,-56,-57,16,16,16,16,16,16,16,-15,16,16,16,16,16,16,16,16,16,-11,-12,-13,-14,16,16,-42,16,-43,16,-16,16,-17,-18,]),'BOOLEAN':([0,2,5,7,8,11,12,13,14,15,24,28,29,30,31,32,33,34,35,36,43,44,45,46,47,48,49,50,56,59,62,63,65,77,90,91,102,105,106,107,108,118,126,130,131,132,135,136,138,141,142,],[17,17,-4,17,17,-6,-7,-8,-9,-10,-5,17,-50,-51,-52,-53,-54,-55,-56,-57,17,17,17,17,17,17,17,-15,17,17,17,17,17,17,17,17,17,-11,-12,-13,-14,17,17,-42,17,-43,17,-16,17,-17,-18,]),'NULL':([0,2,5,7,8,11,12,13,14,15,24,28,29,30,31,32,33,34,35,36,43,44,45,46,47,48,49,50,56,59,62,63,65,77,90,91,102,105,106,107,108,118,126,130,131,132,135,136,138,141,142,],[18,18,-4,18,18,-6,-7,-8,-9,-10,-5,18,-50,-51,-52,-53,-54,-55,-56,-57,18,18,18,18,18,18,18,-15,18,18,18,18,18,18,18,18,18,-11,-12,-13,-14,18,18,-42,18,-43,18,-16,18,-17,-18,]),'FUNCTION':([0,2,5,11,12,13,14,15,24,50,105,106,107,108,130,131,132,136,138,141,142,],[20,20,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-42,20,-43,-16,20,-17,-18,]),'IF':([0,2,5,11,12,13,14,15,24,50,105,106,107,108,130,131,132,136,138,141,142,],[22,22,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-42,22,-43,-16,22,-17,-18,]),'ECHO':([0,2,5,11,12,13,14,15,24,50,105,106,107,108,130,131,132,136,138,141,142,],[23,23,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-42,23,-43,-16,23,-17,-18,]),'IDENTIFIER':([0,2,5,7,8,11,12,13,14,15,20,24,28,29,30,31,32,33,34,35,36,43,44,45,46,47,48,49,50,56,59,62,63,65,77,90,91,102,105,106,107,108,118,126,130,131,132,135,136,138,141,142,],[21,21,-4,21,21,-6,-7,-8,-9,-10,60,-5,21,-50,-51,-52,-53,-54,-55,-56,-57,21,21,21,21,21,21,21,-15,21,21,21,21,21,21,21,21,21,-11,-12,-13,-14,21,21,-42,21,-43,21,-16,21,-17,-18,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,24,27,50,53,55,57,64,66,67,69,70,71,72,73,74,75,76,82,93,105,106,107,108,119,120,121,122,123,124,130,132,136,141,142,],[0,-1,-2,-3,-4,-44,-29,-28,-6,-7,-8,-9,-10,-30,-31,-32,-33,-5,-29,-15,-44,-49,-28,-45,-64,-65,-63,-34,-35,-36,-37,-38,-39,-40,-66,-41,-11,-12,-13,-14,-48,-69,-46,-47,-67,-68,-42,-43,-16,-17,-18,]),'DOUBLE_EQUALS':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[29,-44,-29,-28,-30,-31,-32,-33,-29,29,-44,-28,29,-28,29,-34,-35,-36,-37,-38,-39,-40,29,-28,-44,29,-29,-41,29,29,29,29,-46,29,]),'NOT_EQUALS':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[30,-44,-29,-28,-30,-31,-32,-33,-29,30,-44,-28,30,-28,30,-34,-35,-36,-37,-38,-39,-40,30,-28,-44,30,-29,-41,30,30,30,30,-46,30,]),'GREATER_THAN':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,127,],[31,-44,-29,-28,-30,-31,-32,-33,-29,31,-44,-28,31,-28,31,-34,-35,-36,-37,-38,-39,-40,31,-28,-44,31,-29,-41,31,31,31,31,-46,31,135,]),'LESS_THAN':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[32,-44,-29,-28,-30,-31,-32,-33,-29,32,-44,-28,32,-28,32,-34,-35,-36,-37,-38,-39,-40,32,-28,-44,32,-29,-41,32,32,32,32,-46,32,]),'GREATER_THAN_OR_EQUALS':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[33,-44,-29,-28,-30,-31,-32,-33,-29,33,-44,-28,33,-28,33,-34,-35,-36,-37,-38,-39,-40,33,-28,-44,33,-29,-41,33,33,33,33,-46,33,]),'LESS_THAN_OR_EQUALS':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[34,-44,-29,-28,-30,-31,-32,-33,-29,34,-44,-28,34,-28,34,-34,-35,-36,-37,-38,-39,-40,34,-28,-44,34,-29,-41,34,34,34,34,-46,34,]),'AND':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[35,-44,-29,-28,-30,-31,-32,-33,-29,35,-44,-28,35,-28,35,-34,-35,-36,-37,-38,-39,-40,35,-28,-44,35,-29,-41,35,35,35,35,-46,35,]),'OR':([3,6,9,10,16,17,18,19,27,51,53,54,55,57,64,70,71,72,73,74,75,76,78,84,85,88,89,93,94,99,101,119,121,122,],[36,-44,-29,-28,-30,-31,-32,-33,-29,36,-44,-28,36,-28,36,-34,-35,-36,-37,-38,-39,-40,36,-28,-44,36,-29,-41,36,36,36,36,-46,36,]),'PLUS':([4,6,9,10,16,17,18,19,25,26,27,52,53,54,57,66,67,69,70,71,72,73,74,75,76,80,81,82,84,85,86,89,93,98,100,103,110,120,123,124,140,],[38,43,-29,38,-30,-31,-32,-33,43,-28,-29,38,43,38,-28,38,38,-63,-34,-35,-36,-37,-38,43,43,38,38,38,38,43,38,-29,-41,43,38,38,43,38,-67,38,43,]),'DIVIDE':([4,6,9,10,16,17,18,19,25,26,27,52,53,54,57,66,67,69,70,71,72,73,74,75,76,80,81,82,84,85,86,89,93,98,100,103,110,120,123,124,140,],[39,46,-29,39,-30,-31,-32,-33,46,-28,-29,39,46,39,-28,39,39,-63,46,46,-36,-37,-38,46,46,39,39,39,39,46,39,-29,-41,46,39,39,46,39,-67,39,46,]),'MINUS':([4,6,9,10,16,17,18,19,25,26,27,52,53,54,57,66,67,69,70,71,72,73,74,75,76,80,81,82,84,85,86,89,93,98,100,103,110,120,123,124,140,],[40,44,-29,40,-30,-31,-32,-33,44,-28,-29,40,44,40,-28,40,40,-63,-34,-35,-36,-37,-38,44,44,40,40,40,40,44,40,-29,-41,44,40,40,44,40,-67,40,44,]),'MULTIPLY':([4,6,9,10,16,17,18,19,25,26,27,52,53,54,57,66,67,69,70,71,72,73,74,75,76,80,81,82,84,85,86,89,93,98,100,103,110,120,123,124,140,],[41,45,-29,41,-30,-31,-32,-33,45,-28,-29,41,45,41,-28,41,41,-63,45,45,-36,-37,-38,45,45,41,41,41,41,45,41,-29,-41,45,41,41,45,41,-67,41,45,]),'MODULO':([4,6,9,10,16,17,18,19,25,26,27,52,53,54,57,66,67,69,70,71,72,73,74,75,76,80,81,82,84,85,86,89,93,98,100,103,110,120,123,124,140,],[42,47,-29,42,-30,-31,-32,-33,47,-28,-29,42,47,42,-28,42,42,-63,47,47,-36,-37,-38,47,47,42,42,42,42,47,42,-29,-41,47,42,42,47,42,-67,42,47,]),'CLOSE_CURLY_BRACKET':([5,11,12,13,14,15,24,50,105,106,107,108,130,131,132,136,138,139,141,142,],[-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-42,-27,-43,-16,141,142,-17,-18,]),'CONCATENATION':([6,9,10,16,17,18,19,25,26,27,53,54,57,70,71,72,73,74,75,76,84,85,89,93,98,110,140,],[48,-29,-28,-30,-31,-32,-33,48,-28,-29,48,-28,-28,-34,-35,-36,-37,-38,-39,-40,-28,48,-29,-41,48,48,48,]),'CONCATENATION_ASSIGNMENT':([6,9,10,16,17,18,19,25,26,27,53,54,57,70,71,72,73,74,75,76,84,85,89,93,98,110,140,],[49,-29,-28,-30,-31,-32,-33,49,-28,-29,49,-28,-28,-34,-35,-36,-37,-38,-39,-40,-28,49,-29,-41,49,49,49,]),'SEMICOLON':([6,9,10,16,17,18,19,25,26,27,53,55,57,64,66,67,69,70,71,72,73,74,75,76,82,84,85,86,87,88,89,93,117,119,120,121,122,123,124,125,],[50,-29,-28,-30,-31,-32,-33,50,-28,-29,-44,-49,-28,-45,-64,-65,-63,-34,-35,-36,-37,-38,-39,-40,-66,-28,105,106,107,108,-29,-41,132,-48,-69,-46,-47,-67,-68,-70,]),'CLOSE_PARENTHESIS':([9,16,17,18,19,27,51,52,53,54,55,57,61,63,64,66,67,69,70,71,72,73,74,75,76,82,92,93,94,95,96,97,98,99,100,101,103,112,113,114,115,119,120,121,122,123,124,133,137,],[-29,-30,-31,-32,-33,-29,78,80,-44,-28,-49,-28,93,-27,-45,-64,-65,-63,-34,-35,-36,-37,-38,-39,-40,-66,-27,-41,116,117,-23,-25,-26,119,120,121,123,128,-19,-21,-22,-48,-69,-46,-47,-67,-68,-24,-20,]),'EQUALS':([10,16,17,18,19,26,27,57,70,71,72,73,74,75,76,93,110,],[59,-30,-31,-32,-33,59,-29,-28,-34,-35,-36,-37,-38,-39,-40,-41,127,]),'COMMA':([16,17,18,19,27,57,63,70,71,72,73,74,75,76,91,92,93,95,96,97,98,109,111,112,113,114,115,126,133,134,137,140,],[-30,-31,-32,-33,-29,-28,-27,-34,-35,-36,-37,-38,-39,-40,-27,-27,-41,118,-23,-25,-26,126,-73,129,-19,-21,-22,-27,-24,126,-20,-71,]),'CLOSE_SQUARE_BRACKET':([16,17,18,19,27,57,70,71,72,73,74,75,76,91,93,109,111,126,134,140,],[-30,-31,-32,-33,-29,-28,-34,-35,-36,-37,-38,-39,-40,-27,-41,125,-73,-27,-72,-71,]),'OPEN_SQUARE_BRACKET':([59,],[91,]),'OPEN_CURLY_BRACKET':([116,128,],[131,131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,131,],[2,138,]),'condition':([0,7,8,28,56,59,62,65,77,90,102,],[3,51,55,64,51,88,94,99,101,51,122,]),'math_expression':([0,7,37,58,59,68,79,83,90,104,],[4,52,66,82,86,100,103,52,52,124,]),'statement':([0,2,131,138,],[5,24,5,24,]),'expression':([0,2,7,8,28,43,44,45,46,47,48,49,56,59,62,63,65,77,90,91,102,118,126,131,135,138,],[6,25,53,53,53,70,71,72,73,74,75,76,53,85,53,98,53,53,53,110,53,98,110,25,140,25,]),'expression_statement':([0,2,131,138,],[11,11,11,11,]),'function_declaration':([0,2,131,138,],[12,12,12,12,]),'assignment':([0,2,131,138,],[13,13,13,13,]),'if_statement':([0,2,131,138,],[14,14,14,14,]),'impresion':([0,2,131,138,],[15,15,15,15,]),'function_call':([0,2,7,8,28,43,44,45,46,47,48,49,56,59,62,63,65,77,90,91,102,118,126,131,135,138,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'comparison':([3,51,55,64,78,88,94,99,101,119,122,],[28,77,28,28,102,28,28,77,28,102,28,]),'math_operator':([4,10,52,54,66,67,80,81,82,84,86,100,103,120,124,],[37,58,79,58,37,58,104,58,37,58,37,79,37,104,37,]),'array_structure':([59,],[87,]),'value_parameter_list':([63,],[95,]),'value_parameter':([63,118,],[96,133,]),'empty':([63,91,92,126,131,],[97,111,114,111,139,]),'key_declaration':([91,126,],[109,134,]),'parameter_list':([92,],[112,]),'parameter':([92,129,],[113,137,]),'body_statement_list':([116,128,],[130,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',35),
  ('program -> condition','program',1,'p_program','main.py',36),
  ('program -> math_expression','program',1,'p_program','main.py',37),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',42),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',43),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',48),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',49),
  ('statement -> assignment','statement',1,'p_statement','main.py',50),
  ('statement -> if_statement','statement',1,'p_statement','main.py',51),
  ('statement -> impresion','statement',1,'p_statement','main.py',52),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',57),
  ('assignment -> VARIABLE EQUALS math_expression SEMICOLON','assignment',4,'p_assignment','main.py',58),
  ('assignment -> VARIABLE EQUALS array_structure SEMICOLON','assignment',4,'p_assignment','main.py',59),
  ('assignment -> VARIABLE EQUALS condition SEMICOLON','assignment',4,'p_assignment','main.py',60),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',66),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',71),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',76),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',77),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',82),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',83),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',84),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',89),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',94),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',95),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',96),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',101),
  ('empty -> <empty>','empty',0,'p_empty','main.py',106),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',112),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',113),
  ('expression -> STRING','expression',1,'p_expression','main.py',114),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',115),
  ('expression -> NULL','expression',1,'p_expression','main.py',116),
  ('expression -> function_call','expression',1,'p_expression','main.py',117),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',118),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',119),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',120),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',121),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',122),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',123),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',124),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',129),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',134),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',139),
  ('condition -> expression','condition',1,'p_condition','main.py',144),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',145),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',146),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',147),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',148),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',149),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',154),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',155),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',156),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',157),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',158),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',159),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',160),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',161),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',166),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',167),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',168),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',169),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',170),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',175),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',176),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',177),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',178),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',179),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',180),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',181),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',186),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',191),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',192),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',193),
]
