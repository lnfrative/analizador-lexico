
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | impresion\n              | condition\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n               | NUMBER\n               | STRING\n               | BOOLEAN\n               | NULL\n               | function_call\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression CONCATENATION expression\n               | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | expression comparison expression\n              | NOT condition\n              | condition AND condition\n              | condition OR condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n    '
    
_lr_action_items = {'FUNCTION':([0,2,3,4,5,6,7,8,9,10,13,17,18,19,20,21,22,25,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,77,78,80,82,84,85,],[11,11,-2,-4,-5,-6,-7,-8,-9,-40,-24,-25,-26,-27,-28,-29,-3,-11,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,11,-39,-12,11,-13,-14,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,70,73,75,76,77,78,80,82,84,85,],[13,13,-2,-4,-5,-6,-7,-8,-9,-40,-24,47,-25,-26,-27,-28,-29,-3,47,47,-11,47,47,47,47,47,47,47,47,-45,-46,-47,-48,-49,-50,47,47,47,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,69,-37,-10,47,69,-38,13,-39,-12,13,-13,-14,]),'IF':([0,2,3,4,5,6,7,8,9,10,13,17,18,19,20,21,22,25,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,77,78,80,82,84,85,],[14,14,-2,-4,-5,-6,-7,-8,-9,-40,-24,-25,-26,-27,-28,-29,-3,-11,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,14,-39,-12,14,-13,-14,]),'ECHO':([0,2,3,4,5,6,7,8,9,10,13,17,18,19,20,21,22,25,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,77,78,80,82,84,85,],[15,15,-2,-4,-5,-6,-7,-8,-9,-40,-24,-25,-26,-27,-28,-29,-3,-11,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,15,-39,-12,15,-13,-14,]),'NOT':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,43,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,77,78,80,82,84,85,],[16,16,-2,-4,-5,-6,-7,-8,-9,-40,-24,16,-25,-26,-27,-28,-29,-3,16,16,-11,16,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,16,-39,-12,16,-13,-14,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,73,76,77,78,80,82,84,85,],[17,17,-2,-4,-5,-6,-7,-8,-9,-40,-24,17,-25,-26,-27,-28,-29,-3,17,17,-11,17,17,17,17,17,17,17,17,-45,-46,-47,-48,-49,-50,17,17,17,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,17,-38,17,-39,-12,17,-13,-14,]),'STRING':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,73,76,77,78,80,82,84,85,],[18,18,-2,-4,-5,-6,-7,-8,-9,-40,-24,18,-25,-26,-27,-28,-29,-3,18,18,-11,18,18,18,18,18,18,18,18,-45,-46,-47,-48,-49,-50,18,18,18,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,18,-38,18,-39,-12,18,-13,-14,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,73,76,77,78,80,82,84,85,],[19,19,-2,-4,-5,-6,-7,-8,-9,-40,-24,19,-25,-26,-27,-28,-29,-3,19,19,-11,19,19,19,19,19,19,19,19,-45,-46,-47,-48,-49,-50,19,19,19,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,19,-38,19,-39,-12,19,-13,-14,]),'NULL':([0,2,3,4,5,6,7,8,9,10,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,73,76,77,78,80,82,84,85,],[20,20,-2,-4,-5,-6,-7,-8,-9,-40,-24,20,-25,-26,-27,-28,-29,-3,20,20,-11,20,20,20,20,20,20,20,20,-45,-46,-47,-48,-49,-50,20,20,20,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,20,-38,20,-39,-12,20,-13,-14,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,73,76,77,78,80,82,84,85,],[12,12,-2,-4,-5,-6,-7,-8,-9,-40,40,-24,12,-25,-26,-27,-28,-29,-3,12,12,-11,12,12,12,12,12,12,12,12,-45,-46,-47,-48,-49,-50,12,12,12,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,12,-38,12,-39,-12,12,-13,-14,]),'$end':([1,2,3,4,5,6,7,8,9,10,13,17,18,19,20,21,22,25,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,78,80,84,85,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-40,-24,-25,-26,-27,-28,-29,-3,-11,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,-39,-12,-13,-14,]),'CLOSE_CURLY_BRACKET':([3,4,5,6,7,8,9,10,13,17,18,19,20,21,22,25,45,46,47,48,49,50,51,52,53,54,55,56,57,59,70,76,77,78,80,82,83,84,85,],[-2,-4,-5,-6,-7,-8,-9,-40,-24,-25,-26,-27,-28,-29,-3,-11,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-38,-23,-39,-12,84,85,-13,-14,]),'AND':([9,10,13,17,18,19,20,21,45,46,47,48,49,50,51,52,53,54,55,56,57,59,61,],[23,-40,-24,-25,-26,-27,-28,-29,23,-40,-24,23,23,-41,-30,-31,-32,-33,-34,-35,-36,-37,23,]),'OR':([9,10,13,17,18,19,20,21,45,46,47,48,49,50,51,52,53,54,55,56,57,59,61,],[24,-40,-24,-25,-26,-27,-28,-29,24,-40,-24,24,24,-41,-30,-31,-32,-33,-34,-35,-36,-37,24,]),'SEMICOLON':([10,13,17,18,19,20,21,47,51,52,53,54,55,56,57,59,60,72,],[25,-24,-25,-26,-27,-28,-29,-24,-30,-31,-32,-33,-34,-35,-36,-37,70,78,]),'PLUS':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[27,-24,-25,-26,-27,-28,-29,27,-24,27,-30,-31,-32,-33,-34,27,27,-37,27,27,]),'MINUS':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[28,-24,-25,-26,-27,-28,-29,28,-24,28,-30,-31,-32,-33,-34,28,28,-37,28,28,]),'MULTIPLY':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[29,-24,-25,-26,-27,-28,-29,29,-24,29,29,29,-32,-33,-34,29,29,-37,29,29,]),'DIVIDE':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[30,-24,-25,-26,-27,-28,-29,30,-24,30,30,30,-32,-33,-34,30,30,-37,30,30,]),'MODULO':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[31,-24,-25,-26,-27,-28,-29,31,-24,31,31,31,-32,-33,-34,31,31,-37,31,31,]),'CONCATENATION':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[32,-24,-25,-26,-27,-28,-29,32,-24,32,-30,-31,-32,-33,-34,-35,-36,-37,32,32,]),'CONCATENATION_ASSIGNMENT':([10,13,17,18,19,20,21,46,47,50,51,52,53,54,55,56,57,59,60,65,],[33,-24,-25,-26,-27,-28,-29,33,-24,33,-30,-31,-32,-33,-34,-35,-36,-37,33,33,]),'DOUBLE_EQUALS':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[34,-24,-25,-26,-27,-28,-29,34,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'NOT_EQUALS':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[35,-24,-25,-26,-27,-28,-29,35,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'GREATER_THAN':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[36,-24,-25,-26,-27,-28,-29,36,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'LESS_THAN':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[37,-24,-25,-26,-27,-28,-29,37,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'GREATER_THAN_OR_EQUALS':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[38,-24,-25,-26,-27,-28,-29,38,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'LESS_THAN_OR_EQUALS':([10,13,17,18,19,20,21,46,47,51,52,53,54,55,56,57,59,],[39,-24,-25,-26,-27,-28,-29,39,-24,-30,-31,-32,-33,-34,-35,-36,-37,]),'OPEN_PARENTHESIS':([12,14,15,40,],[41,43,44,58,]),'EQUALS':([13,],[42,]),'CLOSE_PARENTHESIS':([17,18,19,20,21,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,79,81,],[-25,-26,-27,-28,-29,59,-23,-42,-40,-24,-43,-44,-41,-30,-31,-32,-33,-34,-35,-36,-23,-37,71,72,-19,-21,-22,74,-15,-17,-18,-20,-16,]),'COMMA':([17,18,19,20,21,44,47,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,79,81,],[-25,-26,-27,-28,-29,-23,-24,-30,-31,-32,-33,-34,-35,-36,-23,-37,73,-19,-21,-22,75,-15,-17,-18,-20,-16,]),'OPEN_CURLY_BRACKET':([71,74,],[77,77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,77,],[2,82,]),'statement':([0,2,77,82,],[3,22,3,22,]),'expression_statement':([0,2,77,82,],[4,4,4,4,]),'function_declaration':([0,2,77,82,],[5,5,5,5,]),'assignment':([0,2,77,82,],[6,6,6,6,]),'if_statement':([0,2,77,82,],[7,7,7,7,]),'impresion':([0,2,77,82,],[8,8,8,8,]),'condition':([0,2,16,23,24,43,77,82,],[9,9,45,48,49,61,9,9,]),'expression':([0,2,16,23,24,26,27,28,29,30,31,32,33,42,43,44,73,77,82,],[10,10,46,46,46,50,51,52,53,54,55,56,57,60,46,65,65,10,10,]),'function_call':([0,2,16,23,24,26,27,28,29,30,31,32,33,42,43,44,73,77,82,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison':([10,46,],[26,26,]),'value_parameter_list':([44,],[62,]),'value_parameter':([44,73,],[63,79,]),'empty':([44,58,77,],[64,68,83,]),'parameter_list':([58,],[66,]),'parameter':([58,75,],[67,81,]),'body_statement_list':([71,74,],[76,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',15),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',20),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',21),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',26),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',27),
  ('statement -> assignment','statement',1,'p_statement','main.py',28),
  ('statement -> if_statement','statement',1,'p_statement','main.py',29),
  ('statement -> impresion','statement',1,'p_statement','main.py',30),
  ('statement -> condition','statement',1,'p_statement','main.py',31),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',36),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',41),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',46),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',51),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',57),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',58),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',59),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',64),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',69),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',70),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',71),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',76),
  ('empty -> <empty>','empty',0,'p_empty','main.py',81),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',87),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',88),
  ('expression -> STRING','expression',1,'p_expression','main.py',89),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',90),
  ('expression -> NULL','expression',1,'p_expression','main.py',91),
  ('expression -> function_call','expression',1,'p_expression','main.py',92),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',94),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',96),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',97),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',98),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',99),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',104),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',109),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',114),
  ('condition -> expression','condition',1,'p_condition','main.py',119),
  ('condition -> expression comparison expression','condition',3,'p_condition','main.py',120),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',121),
  ('condition -> condition AND condition','condition',3,'p_condition','main.py',122),
  ('condition -> condition OR condition','condition',3,'p_condition','main.py',123),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',128),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',129),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',130),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',131),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',132),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',133),
]
