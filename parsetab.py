
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n              | VARIABLE EQUALS math_expression SEMICOLON\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n               | STRING\n               | BOOLEAN\n               | NULL\n               | function_call\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression CONCATENATION expression\n               | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,7,8,21,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,55,56,57,59,62,64,72,74,78,89,91,],[7,7,55,58,59,60,62,-47,-48,-49,-50,-51,-52,-53,-54,64,-55,-56,-57,-58,-59,55,78,79,55,55,78,62,64,78,55,78,]),'NOT':([0,7,8,27,28,29,30,31,32,33,34,35,55,59,62,72,89,],[8,8,8,8,-47,-48,-49,-50,-51,-52,-53,-54,8,8,8,8,8,]),'NUMBER':([0,7,36,37,38,39,40,41,56,64,74,78,91,],[9,9,9,-55,-56,-57,-58,-59,9,9,9,9,9,]),'VARIABLE':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,79,89,92,93,100,108,109,110,111,113,115,117,118,],[15,26,-4,53,53,-6,-7,-8,-9,-10,-5,53,-47,-48,-49,-50,-51,-52,-53,-54,53,53,53,53,53,53,53,-13,53,53,53,53,53,53,97,53,-11,-12,53,97,-39,26,-40,-14,26,-15,-16,]),'STRING':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,89,92,93,100,109,110,111,113,115,117,118,],[16,16,-4,16,16,-6,-7,-8,-9,-10,-5,16,-47,-48,-49,-50,-51,-52,-53,-54,16,16,16,16,16,16,16,-13,16,16,16,16,16,16,16,-11,-12,16,-39,16,-40,-14,16,-15,-16,]),'BOOLEAN':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,89,92,93,100,109,110,111,113,115,117,118,],[17,17,-4,17,17,-6,-7,-8,-9,-10,-5,17,-47,-48,-49,-50,-51,-52,-53,-54,17,17,17,17,17,17,17,-13,17,17,17,17,17,17,17,-11,-12,17,-39,17,-40,-14,17,-15,-16,]),'NULL':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,89,92,93,100,109,110,111,113,115,117,118,],[18,18,-4,18,18,-6,-7,-8,-9,-10,-5,18,-47,-48,-49,-50,-51,-52,-53,-54,18,18,18,18,18,18,18,-13,18,18,18,18,18,18,18,-11,-12,18,-39,18,-40,-14,18,-15,-16,]),'FUNCTION':([0,2,5,10,11,12,13,14,24,49,92,93,109,110,111,113,115,117,118,],[20,20,-4,-6,-7,-8,-9,-10,-5,-13,-11,-12,-39,20,-40,-14,20,-15,-16,]),'IF':([0,2,5,10,11,12,13,14,24,49,92,93,109,110,111,113,115,117,118,],[22,22,-4,-6,-7,-8,-9,-10,-5,-13,-11,-12,-39,22,-40,-14,22,-15,-16,]),'ECHO':([0,2,5,10,11,12,13,14,24,49,92,93,109,110,111,113,115,117,118,],[23,23,-4,-6,-7,-8,-9,-10,-5,-13,-11,-12,-39,23,-40,-14,23,-15,-16,]),'IDENTIFIER':([0,2,5,7,8,10,11,12,13,14,20,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,89,92,93,100,109,110,111,113,115,117,118,],[21,21,-4,21,21,-6,-7,-8,-9,-10,57,-5,21,-47,-48,-49,-50,-51,-52,-53,-54,21,21,21,21,21,21,21,-13,21,21,21,21,21,21,21,-11,-12,21,-39,21,-40,-14,21,-15,-16,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,24,49,52,53,54,61,63,65,66,67,68,69,70,71,80,92,93,101,102,103,104,105,106,109,111,113,117,118,],[0,-1,-2,-3,-4,-41,-60,-6,-7,-8,-9,-10,-26,-27,-28,-29,-30,-5,-13,-41,-26,-46,-42,-61,-31,-32,-33,-34,-35,-36,-37,-38,-11,-12,-45,-64,-43,-44,-62,-63,-39,-40,-14,-15,-16,]),'DOUBLE_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[28,-41,-26,-27,-28,-29,-30,28,-41,-26,28,28,-31,-32,-33,-34,-35,-36,-37,28,-38,28,28,28,28,-43,28,]),'NOT_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[29,-41,-26,-27,-28,-29,-30,29,-41,-26,29,29,-31,-32,-33,-34,-35,-36,-37,29,-38,29,29,29,29,-43,29,]),'GREATER_THAN':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[30,-41,-26,-27,-28,-29,-30,30,-41,-26,30,30,-31,-32,-33,-34,-35,-36,-37,30,-38,30,30,30,30,-43,30,]),'LESS_THAN':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[31,-41,-26,-27,-28,-29,-30,31,-41,-26,31,31,-31,-32,-33,-34,-35,-36,-37,31,-38,31,31,31,31,-43,31,]),'GREATER_THAN_OR_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[32,-41,-26,-27,-28,-29,-30,32,-41,-26,32,32,-31,-32,-33,-34,-35,-36,-37,32,-38,32,32,32,32,-43,32,]),'LESS_THAN_OR_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[33,-41,-26,-27,-28,-29,-30,33,-41,-26,33,33,-31,-32,-33,-34,-35,-36,-37,33,-38,33,33,33,33,-43,33,]),'AND':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[34,-41,-26,-27,-28,-29,-30,34,-41,-26,34,34,-31,-32,-33,-34,-35,-36,-37,34,-38,34,34,34,34,-43,34,]),'OR':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,80,81,86,88,101,103,104,],[35,-41,-26,-27,-28,-29,-30,35,-41,-26,35,35,-31,-32,-33,-34,-35,-36,-37,35,-38,35,35,35,35,-43,35,]),'PLUS':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,80,85,87,90,102,105,106,],[37,42,-60,-26,-27,-28,-29,-30,42,-26,37,42,-26,37,-31,-32,-33,-34,-35,42,42,37,42,37,-38,42,37,37,37,-62,37,]),'DIVIDE':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,80,85,87,90,102,105,106,],[38,45,-60,-26,-27,-28,-29,-30,45,-26,38,45,-26,38,45,45,-33,-34,-35,45,45,38,45,38,-38,45,38,38,38,-62,38,]),'MINUS':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,80,85,87,90,102,105,106,],[39,43,-60,-26,-27,-28,-29,-30,43,-26,39,43,-26,39,-31,-32,-33,-34,-35,43,43,39,43,39,-38,43,39,39,39,-62,39,]),'MULTIPLY':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,80,85,87,90,102,105,106,],[40,44,-60,-26,-27,-28,-29,-30,44,-26,40,44,-26,40,44,44,-33,-34,-35,44,44,40,44,40,-38,44,40,40,40,-62,40,]),'MODULO':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,80,85,87,90,102,105,106,],[41,46,-60,-26,-27,-28,-29,-30,46,-26,41,46,-26,41,46,46,-33,-34,-35,46,46,41,46,41,-38,46,41,41,41,-62,41,]),'CLOSE_CURLY_BRACKET':([5,10,11,12,13,14,24,49,92,93,109,110,111,113,115,116,117,118,],[-4,-6,-7,-8,-9,-10,-5,-13,-11,-12,-39,-25,-40,-14,117,118,-15,-16,]),'CONCATENATION':([6,15,16,17,18,19,25,26,52,53,65,66,67,68,69,70,71,76,80,85,],[47,-26,-27,-28,-29,-30,47,-26,47,-26,-31,-32,-33,-34,-35,-36,-37,47,-38,47,]),'CONCATENATION_ASSIGNMENT':([6,15,16,17,18,19,25,26,52,53,65,66,67,68,69,70,71,76,80,85,],[48,-26,-27,-28,-29,-30,48,-26,48,-26,-31,-32,-33,-34,-35,-36,-37,48,-38,48,]),'SEMICOLON':([6,9,15,16,17,18,19,25,26,53,63,65,66,67,68,69,70,71,76,77,80,99,102,105,106,],[49,-60,-26,-27,-28,-29,-30,49,-26,-26,-61,-31,-32,-33,-34,-35,-36,-37,92,93,-38,111,-64,-62,-63,]),'CLOSE_PARENTHESIS':([9,16,17,18,19,50,51,52,53,54,58,60,61,63,65,66,67,68,69,70,71,79,80,81,82,83,84,85,86,87,88,90,94,95,96,97,101,102,103,104,105,106,112,114,],[-60,-27,-28,-29,-30,73,75,-41,-26,-46,80,-25,-42,-61,-31,-32,-33,-34,-35,-36,-37,-25,-38,98,99,-21,-23,-24,101,102,103,105,107,-17,-19,-20,-45,-64,-43,-44,-62,-63,-22,-18,]),'EQUALS':([15,26,],[56,56,]),'COMMA':([16,17,18,19,53,60,65,66,67,68,69,70,71,79,80,82,83,84,85,94,95,96,97,112,114,],[-27,-28,-29,-30,-26,-25,-31,-32,-33,-34,-35,-36,-37,-25,-38,100,-21,-23,-24,108,-17,-19,-20,-22,-18,]),'OPEN_CURLY_BRACKET':([98,107,],[110,110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,110,],[2,115,]),'condition':([0,7,8,27,55,59,62,72,89,],[3,50,54,61,50,81,86,88,104,]),'math_expression':([0,7,36,56,64,74,78,91,],[4,51,63,77,87,90,51,106,]),'statement':([0,2,110,115,],[5,24,5,24,]),'expression':([0,2,7,8,27,42,43,44,45,46,47,48,55,56,59,60,62,72,89,100,110,115,],[6,25,52,52,52,65,66,67,68,69,70,71,52,76,52,85,52,52,52,85,25,25,]),'expression_statement':([0,2,110,115,],[10,10,10,10,]),'function_declaration':([0,2,110,115,],[11,11,11,11,]),'assignment':([0,2,110,115,],[12,12,12,12,]),'if_statement':([0,2,110,115,],[13,13,13,13,]),'impresion':([0,2,110,115,],[14,14,14,14,]),'function_call':([0,2,7,8,27,42,43,44,45,46,47,48,55,56,59,60,62,72,89,100,110,115,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'comparison':([3,50,54,61,73,81,86,88,101,104,],[27,72,27,27,89,27,72,27,89,27,]),'math_operator':([4,51,63,75,77,87,90,102,106,],[36,74,36,91,36,74,36,91,36,]),'value_parameter_list':([60,],[82,]),'value_parameter':([60,100,],[83,112,]),'empty':([60,79,110,],[84,96,116,]),'parameter_list':([79,],[94,]),'parameter':([79,108,],[95,114,]),'body_statement_list':([98,107,],[109,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',15),
  ('program -> condition','program',1,'p_program','main.py',16),
  ('program -> math_expression','program',1,'p_program','main.py',17),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',23),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',28),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',29),
  ('statement -> assignment','statement',1,'p_statement','main.py',30),
  ('statement -> if_statement','statement',1,'p_statement','main.py',31),
  ('statement -> impresion','statement',1,'p_statement','main.py',32),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',37),
  ('assignment -> VARIABLE EQUALS math_expression SEMICOLON','assignment',4,'p_assignment','main.py',38),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',43),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',48),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',53),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',54),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',59),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',60),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',61),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',66),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',71),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',72),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',73),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',78),
  ('empty -> <empty>','empty',0,'p_empty','main.py',83),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',89),
  ('expression -> STRING','expression',1,'p_expression','main.py',90),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',91),
  ('expression -> NULL','expression',1,'p_expression','main.py',92),
  ('expression -> function_call','expression',1,'p_expression','main.py',93),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',94),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',95),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',96),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',97),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',98),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',99),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',100),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',105),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',110),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',115),
  ('condition -> expression','condition',1,'p_condition','main.py',120),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',121),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',122),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',123),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',124),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',125),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',130),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',131),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',132),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',133),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',134),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',135),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',136),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',137),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',142),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',143),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',144),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',145),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',146),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',151),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',152),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',153),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',154),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',155),
]
