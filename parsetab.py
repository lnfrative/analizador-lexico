
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    empty :\n    \n    expression : VARIABLE\n               | NUMBER\n               | STRING\n               | BOOLEAN\n               | NULL\n               | function_call\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression CONCATENATION expression\n               | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    condition : expression\n              | expression comparison expression\n              | NOT condition\n              | condition AND condition\n              | condition OR condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n    '
    
_lr_action_items = {'FUNCTION':([0,2,3,4,5,6,7,18,19,49,63,64,68,70,72,73,],[9,9,-2,-4,-5,-6,-7,-3,-9,-8,-32,9,-10,9,-11,-12,]),'VARIABLE':([0,2,3,4,5,6,7,18,19,20,21,22,23,24,25,26,29,30,39,44,49,51,52,53,54,55,56,57,58,59,62,63,64,68,70,72,73,],[11,11,-2,-4,-5,-6,-7,-3,-9,32,32,32,32,32,32,32,32,32,48,32,-8,32,32,32,-38,-39,-40,-41,-42,-43,48,-32,11,-10,11,-11,-12,]),'IF':([0,2,3,4,5,6,7,18,19,49,63,64,68,70,72,73,],[12,12,-2,-4,-5,-6,-7,-3,-9,-8,-32,12,-10,12,-11,-12,]),'NUMBER':([0,2,3,4,5,6,7,18,19,20,21,22,23,24,25,26,29,30,44,49,51,52,53,54,55,56,57,58,59,63,64,68,70,72,73,],[13,13,-2,-4,-5,-6,-7,-3,-9,13,13,13,13,13,13,13,13,13,13,-8,13,13,13,-38,-39,-40,-41,-42,-43,-32,13,-10,13,-11,-12,]),'STRING':([0,2,3,4,5,6,7,18,19,20,21,22,23,24,25,26,29,30,44,49,51,52,53,54,55,56,57,58,59,63,64,68,70,72,73,],[14,14,-2,-4,-5,-6,-7,-3,-9,14,14,14,14,14,14,14,14,14,14,-8,14,14,14,-38,-39,-40,-41,-42,-43,-32,14,-10,14,-11,-12,]),'BOOLEAN':([0,2,3,4,5,6,7,18,19,20,21,22,23,24,25,26,29,30,44,49,51,52,53,54,55,56,57,58,59,63,64,68,70,72,73,],[15,15,-2,-4,-5,-6,-7,-3,-9,15,15,15,15,15,15,15,15,15,15,-8,15,15,15,-38,-39,-40,-41,-42,-43,-32,15,-10,15,-11,-12,]),'NULL':([0,2,3,4,5,6,7,18,19,20,21,22,23,24,25,26,29,30,44,49,51,52,53,54,55,56,57,58,59,63,64,68,70,72,73,],[16,16,-2,-4,-5,-6,-7,-3,-9,16,16,16,16,16,16,16,16,16,16,-8,16,16,16,-38,-39,-40,-41,-42,-43,-32,16,-10,16,-11,-12,]),'IDENTIFIER':([0,2,3,4,5,6,7,9,18,19,20,21,22,23,24,25,26,29,30,44,49,51,52,53,54,55,56,57,58,59,63,64,68,70,72,73,],[10,10,-2,-4,-5,-6,-7,27,-3,-9,10,10,10,10,10,10,10,10,10,10,-8,10,10,10,-38,-39,-40,-41,-42,-43,-32,10,-10,10,-11,-12,]),'$end':([1,2,3,4,5,6,7,18,19,49,63,68,72,73,],[0,-1,-2,-4,-5,-6,-7,-3,-9,-8,-32,-10,-11,-12,]),'CLOSE_CURLY_BRACKET':([3,4,5,6,7,18,19,49,63,64,68,70,71,72,73,],[-2,-4,-5,-6,-7,-3,-9,-8,-32,-17,-10,72,73,-11,-12,]),'SEMICOLON':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,],[19,-18,-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,49,]),'PLUS':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[20,-18,-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,20,20,-31,20,20,20,]),'MINUS':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[21,-18,-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,21,21,-31,21,21,21,]),'MULTIPLY':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[22,-18,-19,-20,-21,-22,-23,22,-18,22,-26,-27,-28,22,22,-31,22,22,22,]),'DIVIDE':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[23,-18,-19,-20,-21,-22,-23,23,-18,23,-26,-27,-28,23,23,-31,23,23,23,]),'MODULO':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[24,-18,-19,-20,-21,-22,-23,24,-18,24,-26,-27,-28,24,24,-31,24,24,24,]),'CONCATENATION':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[25,-18,-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,25,25,25,]),'CONCATENATION_ASSIGNMENT':([8,11,13,14,15,16,17,31,32,33,34,35,36,37,38,40,41,43,67,],[26,-18,-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,26,26,26,]),'OPEN_PARENTHESIS':([10,12,27,],[28,30,39,]),'EQUALS':([11,],[29,]),'DOUBLE_EQUALS':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,54,]),'NOT_EQUALS':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,55,]),'GREATER_THAN':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,56,]),'LESS_THAN':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,57,]),'GREATER_THAN_OR_EQUALS':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,58,]),'LESS_THAN_OR_EQUALS':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,43,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,59,]),'CLOSE_PARENTHESIS':([13,14,15,16,17,28,31,32,33,34,35,36,37,38,39,40,42,43,45,46,47,48,60,65,66,67,69,],[-19,-20,-21,-22,-23,40,-24,-18,-25,-26,-27,-28,-29,-30,-17,-31,50,-33,61,-13,-15,-16,-35,-36,-37,-34,-14,]),'AND':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,42,43,60,65,66,67,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,51,-33,51,51,51,-34,]),'OR':([13,14,15,16,17,31,32,33,34,35,36,37,38,40,42,43,60,65,66,67,],[-19,-20,-21,-22,-23,-24,-18,-25,-26,-27,-28,-29,-30,-31,52,-33,52,52,52,-34,]),'NOT':([30,44,51,52,],[44,44,44,44,]),'COMMA':([39,45,46,47,48,69,],[-17,62,-13,-15,-16,-14,]),'OPEN_CURLY_BRACKET':([50,61,],[64,64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,64,],[2,70,]),'statement':([0,2,64,70,],[3,18,3,18,]),'expression_statement':([0,2,64,70,],[4,4,4,4,]),'function_declaration':([0,2,64,70,],[5,5,5,5,]),'assignment':([0,2,64,70,],[6,6,6,6,]),'if_statement':([0,2,64,70,],[7,7,7,7,]),'expression':([0,2,20,21,22,23,24,25,26,29,30,44,51,52,53,64,70,],[8,8,31,33,34,35,36,37,38,41,43,43,43,43,67,8,8,]),'function_call':([0,2,20,21,22,23,24,25,26,29,30,44,51,52,53,64,70,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'condition':([30,44,51,52,],[42,60,65,66,]),'parameter_list':([39,],[45,]),'parameter':([39,62,],[46,69,]),'empty':([39,64,],[47,71,]),'comparison':([43,],[53,]),'body_statement_list':([50,61,],[63,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',15),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',22),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',31),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',32),
  ('statement -> assignment','statement',1,'p_statement','main.py',33),
  ('statement -> if_statement','statement',1,'p_statement','main.py',34),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',40),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',46),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',52),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',58),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',59),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',64),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',65),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',66),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',78),
  ('empty -> <empty>','empty',0,'p_empty','main.py',84),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',90),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',91),
  ('expression -> STRING','expression',1,'p_expression','main.py',92),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',93),
  ('expression -> NULL','expression',1,'p_expression','main.py',94),
  ('expression -> function_call','expression',1,'p_expression','main.py',95),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',97),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',98),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',99),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',100),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',101),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',102),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',112),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',118),
  ('condition -> expression','condition',1,'p_condition','main.py',127),
  ('condition -> expression comparison expression','condition',3,'p_condition','main.py',128),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',129),
  ('condition -> condition AND condition','condition',3,'p_condition','main.py',130),
  ('condition -> condition OR condition','condition',3,'p_condition','main.py',131),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',136),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',137),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',138),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',139),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',140),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',141),
]
