
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHILE WHITESPACE\n    program : statement_list\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | while_statement\n              | for_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n              | VARIABLE EQUALS math_expression SEMICOLON\n              | VARIABLE EQUALS array_structure SEMICOLON\n              | VARIABLE EQUALS condition SEMICOLON\n              | VARIABLE PLUS PLUS SEMICOLON\n\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    for_statement : FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list\n    \n    for_initialization : assignment\n                       | empty\n    \n    for_update : expression\n               | empty\n    \n    while_statement : WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,7,8,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,62,63,64,65,67,68,73,76,85,87,91,98,116,118,133,],[7,7,60,66,67,68,69,70,73,-59,-60,-61,-62,-63,-64,-65,-66,76,-67,-68,-69,-70,-71,60,91,98,-67,101,60,60,60,91,73,76,91,98,60,91,60,]),'NOT':([0,7,8,32,33,34,35,36,37,38,39,40,60,63,67,68,73,85,98,116,133,],[8,8,8,8,-59,-60,-61,-62,-63,-64,-65,-66,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,62,63,64,67,68,70,73,76,85,87,91,98,99,116,118,119,120,121,122,126,133,135,143,147,148,149,151,154,155,157,159,161,162,167,],[9,31,-4,9,31,-6,-7,-8,-9,-10,-11,-12,-5,31,-59,-60,-61,-62,-63,-64,-65,-66,77,-67,-68,-69,-70,-71,31,31,31,31,31,31,31,-18,31,77,97,-67,31,31,31,31,77,31,77,77,9,31,31,77,-13,-14,-15,-16,-17,31,31,31,-45,31,-51,-52,31,-19,31,31,-20,-21,-46,]),'VARIABLE':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,62,63,64,67,68,69,70,73,76,85,87,91,98,99,101,116,118,119,120,121,122,126,133,135,143,146,147,148,149,151,154,155,157,159,161,162,167,],[10,30,-4,58,61,-6,-7,-8,-9,-10,-11,-12,-5,61,-59,-60,-61,-62,-63,-64,-65,-66,75,-67,-68,-69,-70,-71,61,61,61,61,61,61,61,-18,61,89,92,-67,61,61,108,61,61,89,61,75,89,58,61,130,61,89,-13,-14,-15,-16,-17,61,61,61,130,-45,30,-51,-52,61,-19,30,61,-20,-21,-46,]),'STRING':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,67,68,70,73,85,98,99,116,119,120,121,122,126,133,135,143,147,148,149,151,154,155,157,159,161,162,167,],[18,18,-4,18,18,-6,-7,-8,-9,-10,-11,-12,-5,18,-59,-60,-61,-62,-63,-64,-65,-66,18,18,18,18,18,18,18,-18,18,18,18,18,18,18,18,18,18,18,-13,-14,-15,-16,-17,18,18,18,-45,18,-51,-52,18,-19,18,18,-20,-21,-46,]),'BOOLEAN':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,67,68,70,73,85,98,99,116,119,120,121,122,126,133,135,143,147,148,149,151,154,155,157,159,161,162,167,],[19,19,-4,19,19,-6,-7,-8,-9,-10,-11,-12,-5,19,-59,-60,-61,-62,-63,-64,-65,-66,19,19,19,19,19,19,19,-18,19,19,19,19,19,19,19,19,19,19,-13,-14,-15,-16,-17,19,19,19,-45,19,-51,-52,19,-19,19,19,-20,-21,-46,]),'NULL':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,67,68,70,73,85,98,99,116,119,120,121,122,126,133,135,143,147,148,149,151,154,155,157,159,161,162,167,],[20,20,-4,20,20,-6,-7,-8,-9,-10,-11,-12,-5,20,-59,-60,-61,-62,-63,-64,-65,-66,20,20,20,20,20,20,20,-18,20,20,20,20,20,20,20,20,20,20,-13,-14,-15,-16,-17,20,20,20,-45,20,-51,-52,20,-19,20,20,-20,-21,-46,]),'FUNCTION':([0,2,5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,161,162,167,],[22,22,-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,22,-51,-52,-19,22,-20,-21,-46,]),'IF':([0,2,5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,161,162,167,],[24,24,-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,24,-51,-52,-19,24,-20,-21,-46,]),'WHILE':([0,2,5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,161,162,167,],[25,25,-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,25,-51,-52,-19,25,-20,-21,-46,]),'FOR':([0,2,5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,161,162,167,],[26,26,-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,26,-51,-52,-19,26,-20,-21,-46,]),'ECHO':([0,2,5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,161,162,167,],[27,27,-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,27,-51,-52,-19,27,-20,-21,-46,]),'IDENTIFIER':([0,2,5,7,8,11,12,13,14,15,16,17,22,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,67,68,70,73,85,98,99,116,119,120,121,122,126,133,135,143,147,148,149,151,154,155,157,159,161,162,167,],[23,23,-4,23,23,-6,-7,-8,-9,-10,-11,-12,65,-5,23,-59,-60,-61,-62,-63,-64,-65,-66,23,23,23,23,23,23,23,-18,23,23,23,23,23,23,23,23,23,23,-13,-14,-15,-16,-17,23,23,23,-45,23,-51,-52,23,-19,23,23,-20,-21,-46,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,28,31,54,57,59,61,72,74,75,77,78,79,80,81,82,83,84,90,102,119,120,121,122,126,136,137,138,139,140,141,147,149,151,155,161,162,167,],[0,-1,-2,-3,-4,-53,-32,-31,-6,-7,-8,-9,-10,-11,-12,-33,-34,-35,-36,-5,-32,-18,-53,-58,-31,-54,-73,-74,-72,-37,-38,-39,-40,-41,-42,-43,-75,-44,-13,-14,-15,-16,-17,-57,-78,-55,-56,-76,-77,-45,-51,-52,-19,-20,-21,-46,]),'DOUBLE_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[33,-53,-32,-31,-33,-34,-35,-36,-32,33,-53,-31,33,-31,33,-37,-38,-39,-40,-41,-42,-43,33,-31,-53,33,-32,-44,33,33,33,33,33,-55,33,33,]),'NOT_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[34,-53,-32,-31,-33,-34,-35,-36,-32,34,-53,-31,34,-31,34,-37,-38,-39,-40,-41,-42,-43,34,-31,-53,34,-32,-44,34,34,34,34,34,-55,34,34,]),'GREATER_THAN':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,144,150,],[35,-53,-32,-31,-33,-34,-35,-36,-32,35,-53,-31,35,-31,35,-37,-38,-39,-40,-41,-42,-43,35,-31,-53,35,-32,-44,35,35,35,35,35,-55,35,154,35,]),'LESS_THAN':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[36,-53,-32,-31,-33,-34,-35,-36,-32,36,-53,-31,36,-31,36,-37,-38,-39,-40,-41,-42,-43,36,-31,-53,36,-32,-44,36,36,36,36,36,-55,36,36,]),'GREATER_THAN_OR_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[37,-53,-32,-31,-33,-34,-35,-36,-32,37,-53,-31,37,-31,37,-37,-38,-39,-40,-41,-42,-43,37,-31,-53,37,-32,-44,37,37,37,37,37,-55,37,37,]),'LESS_THAN_OR_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[38,-53,-32,-31,-33,-34,-35,-36,-32,38,-53,-31,38,-31,38,-37,-38,-39,-40,-41,-42,-43,38,-31,-53,38,-32,-44,38,38,38,38,38,-55,38,38,]),'AND':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[39,-53,-32,-31,-33,-34,-35,-36,-32,39,-53,-31,39,-31,39,-37,-38,-39,-40,-41,-42,-43,39,-31,-53,39,-32,-44,39,39,39,39,39,-55,39,39,]),'OR':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,72,78,79,80,81,82,83,84,86,92,93,96,97,102,103,104,113,115,136,138,139,150,],[40,-53,-32,-31,-33,-34,-35,-36,-32,40,-53,-31,40,-31,40,-37,-38,-39,-40,-41,-42,-43,40,-31,-53,40,-32,-44,40,40,40,40,40,-55,40,40,]),'PLUS':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,64,71,74,75,77,78,79,80,81,82,83,84,88,89,90,92,93,94,97,102,108,112,114,117,124,137,140,141,160,164,],[42,47,-32,64,-33,-34,-35,-36,47,71,-32,42,47,42,-31,100,100,42,42,-72,-37,-38,-39,-40,-41,47,47,42,42,42,42,47,42,-32,-44,71,47,42,42,47,42,-76,42,47,47,]),'DIVIDE':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,74,75,77,78,79,80,81,82,83,84,88,89,90,92,93,94,97,102,112,114,117,124,137,140,141,160,164,],[43,50,-32,43,-33,-34,-35,-36,50,-31,-32,43,50,43,-31,43,43,-72,50,50,-39,-40,-41,50,50,43,43,43,43,50,43,-32,-44,50,43,43,50,43,-76,43,50,50,]),'MINUS':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,74,75,77,78,79,80,81,82,83,84,88,89,90,92,93,94,97,102,112,114,117,124,137,140,141,160,164,],[44,48,-32,44,-33,-34,-35,-36,48,-31,-32,44,48,44,-31,44,44,-72,-37,-38,-39,-40,-41,48,48,44,44,44,44,48,44,-32,-44,48,44,44,48,44,-76,44,48,48,]),'MULTIPLY':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,74,75,77,78,79,80,81,82,83,84,88,89,90,92,93,94,97,102,112,114,117,124,137,140,141,160,164,],[45,49,-32,45,-33,-34,-35,-36,49,-31,-32,45,49,45,-31,45,45,-72,49,49,-39,-40,-41,49,49,45,45,45,45,49,45,-32,-44,49,45,45,49,45,-76,45,49,49,]),'MODULO':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,74,75,77,78,79,80,81,82,83,84,88,89,90,92,93,94,97,102,112,114,117,124,137,140,141,160,164,],[46,51,-32,46,-33,-34,-35,-36,51,-31,-32,46,51,46,-31,46,46,-72,51,51,-39,-40,-41,51,51,46,46,46,46,51,46,-32,-44,51,46,46,51,46,-76,46,51,51,]),'CLOSE_CURLY_BRACKET':([5,11,12,13,14,15,16,17,28,54,119,120,121,122,126,147,148,149,151,155,157,158,161,162,167,],[-4,-6,-7,-8,-9,-10,-11,-12,-5,-18,-13,-14,-15,-16,-17,-45,-30,-51,-52,-19,161,162,-20,-21,-46,]),'CONCATENATION':([6,9,10,18,19,20,21,29,30,31,57,58,61,78,79,80,81,82,83,84,92,93,97,102,112,124,160,164,],[52,-32,-31,-33,-34,-35,-36,52,-31,-32,52,-31,-31,-37,-38,-39,-40,-41,-42,-43,-31,52,-32,-44,52,52,52,52,]),'CONCATENATION_ASSIGNMENT':([6,9,10,18,19,20,21,29,30,31,57,58,61,78,79,80,81,82,83,84,92,93,97,102,112,124,160,164,],[53,-32,-31,-33,-34,-35,-36,53,-31,-32,53,-31,-31,-37,-38,-39,-40,-41,-42,-43,-31,53,-32,-44,53,53,53,53,]),'SEMICOLON':([6,9,10,18,19,20,21,29,30,31,57,59,61,69,72,74,75,77,78,79,80,81,82,83,84,90,92,93,94,95,96,97,100,102,105,106,107,119,120,121,122,126,134,136,137,138,139,140,141,142,150,],[54,-32,-31,-33,-34,-35,-36,54,-31,-32,-53,-58,-31,-30,-54,-73,-74,-72,-37,-38,-39,-40,-41,-42,-43,-75,-31,119,120,121,122,-32,126,-44,133,-47,-48,-13,-14,-15,-16,-17,151,-57,-78,-55,-56,-76,-77,-79,159,]),'CLOSE_PARENTHESIS':([9,18,19,20,21,31,55,56,57,58,59,61,66,70,72,74,75,77,78,79,80,81,82,83,84,90,101,102,103,104,109,110,111,112,113,114,115,117,127,128,129,130,136,137,138,139,140,141,152,156,159,163,164,165,],[-32,-33,-34,-35,-36,-32,86,88,-53,-31,-58,-31,102,-30,-54,-73,-74,-72,-37,-38,-39,-40,-41,-42,-43,-75,-30,-44,131,132,134,-26,-28,-29,136,137,138,140,145,-22,-24,-25,-57,-78,-55,-56,-76,-77,-27,-23,-30,166,-49,-50,]),'EQUALS':([10,18,19,20,21,30,31,61,78,79,80,81,82,83,84,102,108,124,],[63,-33,-34,-35,-36,63,-32,-31,-37,-38,-39,-40,-41,-42,-43,-44,63,144,]),'COMMA':([18,19,20,21,31,61,70,78,79,80,81,82,83,84,99,101,102,109,110,111,112,123,125,127,128,129,130,143,152,153,156,160,],[-33,-34,-35,-36,-32,-31,-30,-37,-38,-39,-40,-41,-42,-43,-30,-30,-44,135,-26,-28,-29,143,-82,146,-22,-24,-25,-30,-27,143,-23,-80,]),'CLOSE_SQUARE_BRACKET':([18,19,20,21,31,61,78,79,80,81,82,83,84,99,102,123,125,143,153,160,],[-33,-34,-35,-36,-32,-31,-37,-38,-39,-40,-41,-42,-43,-30,-44,142,-82,-30,-81,-80,]),'OPEN_SQUARE_BRACKET':([63,],[99,]),'OPEN_CURLY_BRACKET':([131,132,145,166,],[148,148,148,148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,148,],[2,157,]),'condition':([0,7,8,32,60,63,67,68,73,85,98,116,133,],[3,55,59,72,55,96,103,104,113,115,55,139,150,]),'math_expression':([0,7,41,62,63,76,87,91,98,118,],[4,56,74,90,94,114,117,56,56,141,]),'statement':([0,2,148,157,],[5,28,5,28,]),'expression':([0,2,7,8,32,47,48,49,50,51,52,53,60,63,67,68,70,73,85,98,99,116,133,135,143,148,154,157,159,],[6,29,57,57,57,78,79,80,81,82,83,84,57,93,57,57,112,57,57,57,124,57,57,112,124,29,160,29,164,]),'expression_statement':([0,2,148,157,],[11,11,11,11,]),'function_declaration':([0,2,148,157,],[12,12,12,12,]),'assignment':([0,2,69,148,157,],[13,13,106,13,13,]),'if_statement':([0,2,148,157,],[14,14,14,14,]),'while_statement':([0,2,148,157,],[15,15,15,15,]),'for_statement':([0,2,148,157,],[16,16,16,16,]),'impresion':([0,2,148,157,],[17,17,17,17,]),'function_call':([0,2,7,8,32,47,48,49,50,51,52,53,60,63,67,68,70,73,85,98,99,116,133,135,143,148,154,157,159,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison':([3,55,59,72,86,96,103,104,113,115,136,139,150,],[32,85,32,32,116,32,32,32,85,32,116,32,32,]),'math_operator':([4,10,56,58,74,75,88,89,90,92,94,114,117,137,141,],[41,62,87,62,41,62,118,62,41,62,41,87,41,118,41,]),'array_structure':([63,],[95,]),'for_initialization':([69,],[105,]),'empty':([69,70,99,101,143,148,159,],[107,111,125,129,125,158,165,]),'value_parameter_list':([70,],[109,]),'value_parameter':([70,135,],[110,152,]),'key_declaration':([99,143,],[123,153,]),'parameter_list':([101,],[127,]),'parameter':([101,146,],[128,156,]),'body_statement_list':([131,132,145,166,],[147,149,155,167,]),'for_update':([159,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',41),
  ('program -> condition','program',1,'p_program','main.py',42),
  ('program -> math_expression','program',1,'p_program','main.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',48),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',49),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',54),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',55),
  ('statement -> assignment','statement',1,'p_statement','main.py',56),
  ('statement -> if_statement','statement',1,'p_statement','main.py',57),
  ('statement -> while_statement','statement',1,'p_statement','main.py',58),
  ('statement -> for_statement','statement',1,'p_statement','main.py',59),
  ('statement -> impresion','statement',1,'p_statement','main.py',60),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',65),
  ('assignment -> VARIABLE EQUALS math_expression SEMICOLON','assignment',4,'p_assignment','main.py',66),
  ('assignment -> VARIABLE EQUALS array_structure SEMICOLON','assignment',4,'p_assignment','main.py',67),
  ('assignment -> VARIABLE EQUALS condition SEMICOLON','assignment',4,'p_assignment','main.py',68),
  ('assignment -> VARIABLE PLUS PLUS SEMICOLON','assignment',4,'p_assignment','main.py',69),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',75),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',80),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',85),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',86),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',91),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',92),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',93),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',98),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',103),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',104),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',105),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',110),
  ('empty -> <empty>','empty',0,'p_empty','main.py',115),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',121),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',122),
  ('expression -> STRING','expression',1,'p_expression','main.py',123),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',124),
  ('expression -> NULL','expression',1,'p_expression','main.py',125),
  ('expression -> function_call','expression',1,'p_expression','main.py',126),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',127),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',128),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',129),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',130),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',131),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',132),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',133),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',138),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',143),
  ('for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list','for_statement',9,'p_for_statement','main.py',148),
  ('for_initialization -> assignment','for_initialization',1,'p_for_initialization','main.py',153),
  ('for_initialization -> empty','for_initialization',1,'p_for_initialization','main.py',154),
  ('for_update -> expression','for_update',1,'p_for_update','main.py',159),
  ('for_update -> empty','for_update',1,'p_for_update','main.py',160),
  ('while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','while_statement',5,'p_while_statement','main.py',165),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',170),
  ('condition -> expression','condition',1,'p_condition','main.py',175),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',176),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',177),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',178),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',179),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',180),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',185),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',186),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',187),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',188),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',189),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',190),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',191),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',192),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',197),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',198),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',199),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',200),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',201),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',206),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',207),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',208),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',209),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',210),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',211),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',212),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',217),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',222),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',223),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',224),
]
