
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_EQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND AND_EQUALS ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_EQUALS CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DIVIDE_EQUALS DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LEFT_SHIFT_EQUALS LESS_THAN LESS_THAN_OR_EQUALS MINUS MINUS_EQUALS MODULO MODULO_EQUALS MULTIPLY MULTIPLY_EQUALS NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR OR_EQUALS PLUS PLUS_EQUALS RETURN RIGHT_SHIFT_EQUALS SEMICOLON STRING VARIABLE WHILE WHITESPACE XOR_EQUALS\n    program : OPEN_TAG statement_list CLOSE_TAG\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n                   | empty\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment SEMICOLON\n              | if_statement\n              | while_statement\n              | for_statement\n              | impresion\n    \n    assignment : VARIABLE assignment_operator expression \n              | VARIABLE EQUALS math_expression \n              | VARIABLE EQUALS array_structure \n              | VARIABLE EQUALS condition \n              | VARIABLE PLUS PLUS \n              | VARIABLE EQUALS list_access\n              | VARIABLE CONCATENATION_EQUALS list_access\n\n    \n    assignment_operator : PLUS_EQUALS\n                        | MINUS_EQUALS\n                        | MULTIPLY_EQUALS\n                        | DIVIDE_EQUALS\n                        | MODULO_EQUALS\n                        | CONCATENATION_EQUALS\n                        | LEFT_SHIFT_EQUALS\n                        | RIGHT_SHIFT_EQUALS\n                        | AND_EQUALS\n                        | OR_EQUALS\n                        | XOR_EQUALS\n                        | EQUALS\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n                | assignment\n                | expression\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_EQUALS expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    for_statement : FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list\n    \n    for_initialization : assignment\n                       | empty\n    \n    for_update : assignment\n               | empty\n    \n    while_statement : WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    \n    list_access : VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET\n    '
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'OPEN_PARENTHESIS':([0,6,7,14,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,60,66,68,81,82,86,89,98,100,104,118,136,138,148,],[6,6,58,61,81,82,83,84,86,-77,-78,-79,-80,-81,-82,-83,-84,89,-85,-86,-87,-88,-89,58,104,111,118,58,58,58,104,86,89,104,118,58,104,58,]),'NOT':([0,6,7,33,34,35,36,37,38,39,40,41,58,68,81,82,86,98,118,136,148,],[7,7,7,7,-77,-78,-79,-80,-81,-82,-83,-84,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,89,98,100,104,111,118,119,136,138,140,142,148,150,161,163,164,165,167,169,172,173,174,177,178,179,186,187,],[8,32,8,32,32,-4,-6,-7,-8,-10,-11,-12,-13,32,-77,-78,-79,-80,-81,-82,-83,-84,90,-85,-86,-87,-88,-89,32,32,32,32,32,32,32,32,90,32,-5,-9,-33,32,8,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,32,32,32,32,90,32,90,90,32,8,32,32,90,32,32,32,32,32,-63,32,-69,-70,-34,32,32,-6,-35,32,-36,-64,-37,]),'VARIABLE':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,89,98,100,104,111,118,119,136,138,140,142,148,150,161,163,164,165,167,169,172,173,174,175,177,178,179,186,187,],[9,27,9,59,27,-4,-6,-7,-8,-10,-11,-12,-13,59,-77,-78,-79,-80,-81,-82,-83,-84,88,-85,-86,-87,-88,-89,59,59,59,59,59,59,59,59,102,108,-5,-9,-33,59,113,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,59,59,128,59,59,102,59,88,102,108,9,59,59,102,108,59,59,59,59,-63,27,-69,-70,-34,59,27,-6,128,-35,59,-36,-64,-37,]),'STRING':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,136,140,142,148,150,161,163,164,165,167,169,172,173,174,177,178,179,186,187,],[10,10,10,10,10,-4,-6,-7,-8,-10,-11,-12,-13,10,-77,-78,-79,-80,-81,-82,-83,-84,10,10,10,10,10,10,10,10,10,-5,-9,-33,10,10,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-63,10,-69,-70,-34,10,10,-6,-35,10,-36,-64,-37,]),'BOOLEAN':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,136,140,142,148,150,161,163,164,165,167,169,172,173,174,177,178,179,186,187,],[11,11,11,11,11,-4,-6,-7,-8,-10,-11,-12,-13,11,-77,-78,-79,-80,-81,-82,-83,-84,11,11,11,11,11,11,11,11,11,-5,-9,-33,11,11,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-63,11,-69,-70,-34,11,11,-6,-35,11,-36,-64,-37,]),'NULL':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,136,140,142,148,150,161,163,164,165,167,169,172,173,174,177,178,179,186,187,],[12,12,12,12,12,-4,-6,-7,-8,-10,-11,-12,-13,12,-77,-78,-79,-80,-81,-82,-83,-84,12,12,12,12,12,12,12,12,12,-5,-9,-33,12,12,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-63,12,-69,-70,-34,12,12,-6,-35,12,-36,-64,-37,]),'IDENTIFIER':([0,2,6,7,15,16,17,18,19,21,22,23,24,26,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,136,140,142,148,150,161,163,164,165,167,169,172,173,174,177,178,179,186,187,],[14,14,14,14,14,-4,-6,-7,-8,-10,-11,-12,-13,66,14,-77,-78,-79,-80,-81,-82,-83,-84,14,14,14,14,14,14,14,14,14,-5,-9,-33,14,14,-26,-21,-22,-23,-24,-25,-27,-28,-29,-30,-31,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-63,14,-69,-70,-34,14,14,-6,-35,14,-36,-64,-37,]),'$end':([1,3,4,5,8,9,10,11,12,13,32,57,59,62,85,87,88,90,91,92,93,94,95,96,97,103,139,151,152,153,154,155,156,],[0,-2,-3,-71,-50,-49,-51,-52,-53,-54,-50,-76,-49,-1,-72,-91,-92,-90,-55,-56,-57,-58,-59,-60,-61,-93,-62,-75,-96,-73,-74,-94,-95,]),'CLOSE_TAG':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,165,167,169,177,179,186,187,],[-48,62,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,-69,-70,-34,-35,-36,-64,-37,]),'FUNCTION':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[26,26,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,26,-69,-70,-34,26,-6,-35,-36,-64,-37,]),'IF':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[28,28,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,28,-69,-70,-34,28,-6,-35,-36,-64,-37,]),'WHILE':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[29,29,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,29,-69,-70,-34,29,-6,-35,-36,-64,-37,]),'FOR':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[30,30,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,30,-69,-70,-34,30,-6,-35,-36,-64,-37,]),'ECHO':([2,15,16,17,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[31,31,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,31,-69,-70,-34,31,-6,-35,-36,-64,-37,]),'DOUBLE_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[34,-71,-50,-49,-51,-52,-53,-54,-50,34,34,-49,34,-55,-56,-57,-58,-59,-60,-61,34,-49,34,34,34,34,34,-62,34,-73,34,34,]),'NOT_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[35,-71,-50,-49,-51,-52,-53,-54,-50,35,35,-49,35,-55,-56,-57,-58,-59,-60,-61,35,-49,35,35,35,35,35,-62,35,-73,35,35,]),'GREATER_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,162,166,],[36,-71,-50,-49,-51,-52,-53,-54,-50,36,36,-49,36,-55,-56,-57,-58,-59,-60,-61,36,-49,36,36,36,36,36,-62,36,-73,36,172,36,]),'LESS_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[37,-71,-50,-49,-51,-52,-53,-54,-50,37,37,-49,37,-55,-56,-57,-58,-59,-60,-61,37,-49,37,37,37,37,37,-62,37,-73,37,37,]),'GREATER_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[38,-71,-50,-49,-51,-52,-53,-54,-50,38,38,-49,38,-55,-56,-57,-58,-59,-60,-61,38,-49,38,38,38,38,38,-62,38,-73,38,38,]),'LESS_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[39,-71,-50,-49,-51,-52,-53,-54,-50,39,39,-49,39,-55,-56,-57,-58,-59,-60,-61,39,-49,39,39,39,39,39,-62,39,-73,39,39,]),'AND':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[40,-71,-50,-49,-51,-52,-53,-54,-50,40,40,-49,40,-55,-56,-57,-58,-59,-60,-61,40,-49,40,40,40,40,40,-62,40,-73,40,40,]),'OR':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,113,116,123,124,133,135,139,151,153,154,166,],[41,-71,-50,-49,-51,-52,-53,-54,-50,41,41,-49,41,-55,-56,-57,-58,-59,-60,-61,41,-49,41,41,41,41,41,-62,41,-73,41,41,]),'PLUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,69,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,114,128,132,134,137,139,144,152,155,156,159,176,183,],[43,48,-50,43,-51,-52,-53,-54,48,69,-50,43,-49,120,43,43,-90,-55,-56,-57,-58,-59,48,48,43,43,43,69,48,48,43,43,69,48,43,43,-62,48,43,-94,43,48,48,48,]),'DIVIDE':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,114,132,134,137,139,144,152,155,156,159,176,183,],[44,51,-50,44,-51,-52,-53,-54,51,-49,-50,44,-49,44,44,-90,51,51,-57,-58,-59,51,51,44,44,44,-49,51,51,44,44,51,44,44,-62,51,44,-94,44,51,51,51,]),'MINUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,114,132,134,137,139,144,152,155,156,159,176,183,],[45,49,-50,45,-51,-52,-53,-54,49,-49,-50,45,-49,45,45,-90,-55,-56,-57,-58,-59,49,49,45,45,45,-49,49,49,45,45,49,45,45,-62,49,45,-94,45,49,49,49,]),'MULTIPLY':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,114,132,134,137,139,144,152,155,156,159,176,183,],[46,50,-50,46,-51,-52,-53,-54,50,-49,-50,46,-49,46,46,-90,50,50,-57,-58,-59,50,50,46,46,46,-49,50,50,46,46,50,46,46,-62,50,46,-94,46,50,50,50,]),'MODULO':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,114,132,134,137,139,144,152,155,156,159,176,183,],[47,52,-50,47,-51,-52,-53,-54,52,-49,-50,47,-49,47,47,-90,52,52,-57,-58,-59,52,52,47,47,47,-49,52,52,47,47,52,47,47,-62,52,47,-94,47,52,52,52,]),'CLOSE_PARENTHESIS':([5,8,9,10,11,12,13,32,55,56,57,59,61,84,85,87,88,90,91,92,93,94,95,96,97,103,105,106,107,108,109,110,111,112,113,114,115,116,117,120,122,123,124,129,130,131,132,133,134,135,137,139,141,151,152,153,154,155,156,157,160,168,170,175,180,181,182,],[-71,-50,-49,-51,-52,-53,-54,-50,99,101,-76,-49,-48,-48,-72,-91,-92,-90,-55,-56,-57,-58,-59,-60,-61,-93,139,-38,-40,-41,-42,-43,-48,-14,-49,-15,-16,-17,-19,-18,-20,146,147,149,-44,-46,-47,151,152,153,155,-62,158,-75,-96,-73,-74,-94,-95,-39,-97,-45,-101,-48,184,-67,-68,]),'SEMICOLON':([5,8,10,11,12,13,20,25,27,32,57,59,83,85,87,88,90,91,92,93,94,95,96,97,103,112,113,114,115,116,117,120,122,125,126,127,139,149,151,152,153,154,155,156,160,166,170,183,],[-71,-50,-51,-52,-53,-54,64,65,-49,-50,-76,-49,-48,-72,-91,-92,-90,-55,-56,-57,-58,-59,-60,-61,-93,-14,-49,-15,-16,-17,-19,-18,-20,148,-65,-66,-62,167,-75,-96,-73,-74,-94,-95,-97,175,-101,185,]),'COMMA':([5,8,10,11,12,13,32,57,59,61,84,85,87,88,90,91,92,93,94,95,96,97,103,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,122,129,130,131,132,139,141,143,145,151,152,153,154,155,156,157,160,161,168,170,171,176,],[-71,-50,-51,-52,-53,-54,-50,-76,-49,-48,-48,-72,-91,-92,-90,-55,-56,-57,-58,-59,-60,-61,-93,140,-38,-40,-41,-42,-43,-48,-14,-49,-15,-16,-17,-19,-48,-18,-20,150,-44,-46,-47,-62,140,161,-100,-75,-96,-73,-74,-94,-95,-39,-97,-48,-45,-101,161,-98,]),'CONCATENATION':([5,8,9,10,11,12,13,25,27,32,59,91,92,93,94,95,96,97,108,110,112,113,132,139,144,159,176,183,],[53,-50,-49,-51,-52,-53,-54,53,-49,-50,-49,-55,-56,-57,-58,-59,-60,-61,-49,53,53,-49,53,-62,53,53,53,53,]),'CONCATENATION_EQUALS':([5,8,9,10,11,12,13,25,27,32,59,91,92,93,94,95,96,97,108,110,112,113,128,132,139,144,159,176,183,],[54,-50,-49,-51,-52,-53,-54,54,70,-50,-49,-55,-56,-57,-58,-59,-60,-61,70,54,54,-49,70,54,-62,54,54,54,54,]),'EQUALS':([10,11,12,13,27,32,59,91,92,93,94,95,96,97,108,128,139,144,],[-51,-52,-53,-54,68,-50,-49,-55,-56,-57,-58,-59,-60,-61,68,68,-62,162,]),'CLOSE_SQUARE_BRACKET':([10,11,12,13,32,59,91,92,93,94,95,96,97,119,139,143,145,159,161,171,176,],[-51,-52,-53,-54,-50,-49,-55,-56,-57,-58,-59,-60,-61,-48,-62,160,-100,170,-48,-99,-98,]),'CLOSE_CURLY_BRACKET':([16,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,185,186,187,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,-48,-69,-70,-34,177,179,-35,-36,187,-64,-37,]),'RETURN':([16,18,19,21,22,23,24,63,64,65,163,164,165,167,169,173,174,177,179,186,187,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-33,-63,-48,-69,-70,-34,178,-6,-35,-36,-64,-37,]),'PLUS_EQUALS':([27,108,128,],[71,71,71,]),'MINUS_EQUALS':([27,108,128,],[72,72,72,]),'MULTIPLY_EQUALS':([27,108,128,],[73,73,73,]),'DIVIDE_EQUALS':([27,108,128,],[74,74,74,]),'MODULO_EQUALS':([27,108,128,],[75,75,75,]),'LEFT_SHIFT_EQUALS':([27,108,128,],[76,76,76,]),'RIGHT_SHIFT_EQUALS':([27,108,128,],[77,77,77,]),'AND_EQUALS':([27,108,128,],[78,78,78,]),'OR_EQUALS':([27,108,128,],[79,79,79,]),'XOR_EQUALS':([27,108,128,],[80,80,80,]),'OPEN_SQUARE_BRACKET':([68,113,121,],[119,142,142,]),'OPEN_CURLY_BRACKET':([146,147,158,184,],[164,164,164,164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'condition':([0,6,7,33,58,68,81,82,86,98,118,136,148,],[3,55,57,85,55,116,123,124,133,135,55,154,166,]),'math_expression':([0,6,42,60,68,89,100,104,118,138,],[4,56,87,103,114,134,137,56,56,156,]),'expression':([0,2,6,7,15,33,48,49,50,51,52,53,54,58,61,67,68,81,82,84,86,98,111,118,119,136,140,142,148,150,161,164,172,173,178,],[5,25,5,5,25,5,91,92,93,94,95,96,97,5,110,112,5,5,5,132,5,5,110,5,144,5,110,159,5,132,144,25,176,25,183,]),'function_call':([0,2,6,7,15,33,48,49,50,51,52,53,54,58,61,67,68,81,82,84,86,98,111,118,119,136,140,142,148,150,161,164,172,173,178,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'statement_list':([2,164,],[15,173,]),'statement':([2,15,164,173,],[16,63,16,63,]),'empty':([2,61,83,84,111,119,161,164,175,],[17,107,127,131,107,145,145,174,182,]),'expression_statement':([2,15,164,173,],[18,18,18,18,]),'function_declaration':([2,15,164,173,],[19,19,19,19,]),'assignment':([2,15,61,83,111,140,164,173,175,],[20,20,109,126,109,109,20,20,181,]),'if_statement':([2,15,164,173,],[21,21,21,21,]),'while_statement':([2,15,164,173,],[22,22,22,22,]),'for_statement':([2,15,164,173,],[23,23,23,23,]),'impresion':([2,15,164,173,],[24,24,24,24,]),'comparison':([3,55,57,85,99,116,123,124,133,135,151,154,166,],[33,98,33,33,136,33,33,33,98,33,136,33,33,]),'math_operator':([4,9,56,87,88,101,102,103,113,114,134,137,152,156,],[42,60,100,42,60,138,60,42,60,42,100,42,138,42,]),'assignment_operator':([27,108,128,],[67,67,67,]),'parameter_list':([61,111,],[105,141,]),'parameter':([61,111,140,],[106,106,157,]),'array_structure':([68,],[115,]),'list_access':([68,70,],[117,122,]),'for_initialization':([83,],[125,]),'value_parameter_list':([84,],[129,]),'value_parameter':([84,150,],[130,168,]),'key_declaration':([119,161,],[143,171,]),'body_statement_list':([146,147,158,184,],[163,165,169,186,]),'for_update':([175,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statement_list CLOSE_TAG','program',3,'p_program','main.py',41),
  ('program -> condition','program',1,'p_program','main.py',42),
  ('program -> math_expression','program',1,'p_program','main.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',48),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',49),
  ('statement_list -> empty','statement_list',1,'p_statement_list','main.py',50),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',55),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',56),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','main.py',57),
  ('statement -> if_statement','statement',1,'p_statement','main.py',58),
  ('statement -> while_statement','statement',1,'p_statement','main.py',59),
  ('statement -> for_statement','statement',1,'p_statement','main.py',60),
  ('statement -> impresion','statement',1,'p_statement','main.py',61),
  ('assignment -> VARIABLE assignment_operator expression','assignment',3,'p_assignment','main.py',66),
  ('assignment -> VARIABLE EQUALS math_expression','assignment',3,'p_assignment','main.py',67),
  ('assignment -> VARIABLE EQUALS array_structure','assignment',3,'p_assignment','main.py',68),
  ('assignment -> VARIABLE EQUALS condition','assignment',3,'p_assignment','main.py',69),
  ('assignment -> VARIABLE PLUS PLUS','assignment',3,'p_assignment','main.py',70),
  ('assignment -> VARIABLE EQUALS list_access','assignment',3,'p_assignment','main.py',71),
  ('assignment -> VARIABLE CONCATENATION_EQUALS list_access','assignment',3,'p_assignment','main.py',72),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',78),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',79),
  ('assignment_operator -> MULTIPLY_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',80),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',81),
  ('assignment_operator -> MODULO_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',82),
  ('assignment_operator -> CONCATENATION_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',83),
  ('assignment_operator -> LEFT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',84),
  ('assignment_operator -> RIGHT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',85),
  ('assignment_operator -> AND_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',86),
  ('assignment_operator -> OR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',87),
  ('assignment_operator -> XOR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',88),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','main.py',89),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',94),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',99),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',104),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',105),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET','body_statement_list',6,'p_body_statement_list','main.py',106),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',111),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',112),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',113),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',118),
  ('parameter -> assignment','parameter',1,'p_parameter','main.py',119),
  ('parameter -> expression','parameter',1,'p_parameter','main.py',120),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',125),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',126),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',127),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',132),
  ('empty -> <empty>','empty',0,'p_empty','main.py',137),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',143),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',144),
  ('expression -> STRING','expression',1,'p_expression','main.py',145),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',146),
  ('expression -> NULL','expression',1,'p_expression','main.py',147),
  ('expression -> function_call','expression',1,'p_expression','main.py',148),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',149),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',150),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',151),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',152),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',153),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',154),
  ('expression -> expression CONCATENATION_EQUALS expression','expression',3,'p_expression','main.py',155),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS','function_call',4,'p_function_call','main.py',160),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',165),
  ('for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list','for_statement',9,'p_for_statement','main.py',170),
  ('for_initialization -> assignment','for_initialization',1,'p_for_initialization','main.py',175),
  ('for_initialization -> empty','for_initialization',1,'p_for_initialization','main.py',176),
  ('for_update -> assignment','for_update',1,'p_for_update','main.py',181),
  ('for_update -> empty','for_update',1,'p_for_update','main.py',182),
  ('while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','while_statement',5,'p_while_statement','main.py',187),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',192),
  ('condition -> expression','condition',1,'p_condition','main.py',197),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',198),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',199),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',200),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',201),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',202),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',207),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',208),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',209),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',210),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',211),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',212),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',213),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',214),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',219),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',220),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',221),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',222),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',223),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',228),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',229),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',230),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',231),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',232),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',233),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',234),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',239),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',244),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',245),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',246),
  ('list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET','list_access',4,'p_list_access','main.py',251),
]
