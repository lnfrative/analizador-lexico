
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n            | condition\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n               | NUMBER\n               | STRING\n               | BOOLEAN\n               | NULL\n               | function_call\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression CONCATENATION expression\n               | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,6,7,20,21,22,26,27,28,29,30,31,32,33,34,48,50,53,61,73,],[6,6,6,49,50,51,53,-46,-47,-48,-49,-50,-51,-52,-53,64,6,6,53,6,]),'NOT':([0,6,7,26,27,28,29,30,31,32,33,34,50,53,61,73,],[7,7,7,7,-46,-47,-48,-49,-50,-51,-52,-53,7,7,7,7,]),'VARIABLE':([0,2,4,6,7,8,9,10,11,12,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,64,73,74,81,86,87,88,89,91,93,95,96,],[13,25,-3,45,45,-5,-6,-7,-8,-9,-4,45,-46,-47,-48,-49,-50,-51,-52,-53,45,45,45,45,45,45,45,-11,45,45,45,45,45,78,45,-10,45,78,-38,25,-39,-12,25,-13,-14,]),'NUMBER':([0,2,4,6,7,8,9,10,11,12,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,73,74,81,87,88,89,91,93,95,96,],[14,14,-3,14,14,-5,-6,-7,-8,-9,-4,14,-46,-47,-48,-49,-50,-51,-52,-53,14,14,14,14,14,14,14,-11,14,14,14,14,14,14,-10,14,-38,14,-39,-12,14,-13,-14,]),'STRING':([0,2,4,6,7,8,9,10,11,12,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,73,74,81,87,88,89,91,93,95,96,],[15,15,-3,15,15,-5,-6,-7,-8,-9,-4,15,-46,-47,-48,-49,-50,-51,-52,-53,15,15,15,15,15,15,15,-11,15,15,15,15,15,15,-10,15,-38,15,-39,-12,15,-13,-14,]),'BOOLEAN':([0,2,4,6,7,8,9,10,11,12,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,73,74,81,87,88,89,91,93,95,96,],[16,16,-3,16,16,-5,-6,-7,-8,-9,-4,16,-46,-47,-48,-49,-50,-51,-52,-53,16,16,16,16,16,16,16,-11,16,16,16,16,16,16,-10,16,-38,16,-39,-12,16,-13,-14,]),'NULL':([0,2,4,6,7,8,9,10,11,12,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,73,74,81,87,88,89,91,93,95,96,],[17,17,-3,17,17,-5,-6,-7,-8,-9,-4,17,-46,-47,-48,-49,-50,-51,-52,-53,17,17,17,17,17,17,17,-11,17,17,17,17,17,17,-10,17,-38,17,-39,-12,17,-13,-14,]),'FUNCTION':([0,2,4,8,9,10,11,12,23,42,74,87,88,89,91,93,95,96,],[19,19,-3,-5,-6,-7,-8,-9,-4,-11,-10,-38,19,-39,-12,19,-13,-14,]),'IF':([0,2,4,8,9,10,11,12,23,42,74,87,88,89,91,93,95,96,],[21,21,-3,-5,-6,-7,-8,-9,-4,-11,-10,-38,21,-39,-12,21,-13,-14,]),'ECHO':([0,2,4,8,9,10,11,12,23,42,74,87,88,89,91,93,95,96,],[22,22,-3,-5,-6,-7,-8,-9,-4,-11,-10,-38,22,-39,-12,22,-13,-14,]),'IDENTIFIER':([0,2,4,6,7,8,9,10,11,12,19,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,50,51,53,61,73,74,81,87,88,89,91,93,95,96,],[20,20,-3,20,20,-5,-6,-7,-8,-9,48,-4,20,-46,-47,-48,-49,-50,-51,-52,-53,20,20,20,20,20,20,20,-11,20,20,20,20,20,20,-10,20,-38,20,-39,-12,20,-13,-14,]),'$end':([1,2,3,4,5,8,9,10,11,12,13,14,15,16,17,18,23,42,44,45,46,52,54,55,56,57,58,59,60,65,74,82,83,84,87,89,91,95,96,],[0,-1,-2,-3,-40,-5,-6,-7,-8,-9,-24,-25,-26,-27,-28,-29,-4,-11,-40,-24,-45,-41,-30,-31,-32,-33,-34,-35,-36,-37,-10,-44,-42,-43,-38,-39,-12,-13,-14,]),'DOUBLE_EQUALS':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[27,-40,-24,-25,-26,-27,-28,-29,27,-40,-24,27,27,-30,-31,-32,-33,-34,-35,-36,27,-37,27,27,27,27,-42,27,]),'NOT_EQUALS':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[28,-40,-24,-25,-26,-27,-28,-29,28,-40,-24,28,28,-30,-31,-32,-33,-34,-35,-36,28,-37,28,28,28,28,-42,28,]),'GREATER_THAN':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[29,-40,-24,-25,-26,-27,-28,-29,29,-40,-24,29,29,-30,-31,-32,-33,-34,-35,-36,29,-37,29,29,29,29,-42,29,]),'LESS_THAN':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[30,-40,-24,-25,-26,-27,-28,-29,30,-40,-24,30,30,-30,-31,-32,-33,-34,-35,-36,30,-37,30,30,30,30,-42,30,]),'GREATER_THAN_OR_EQUALS':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[31,-40,-24,-25,-26,-27,-28,-29,31,-40,-24,31,31,-30,-31,-32,-33,-34,-35,-36,31,-37,31,31,31,31,-42,31,]),'LESS_THAN_OR_EQUALS':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[32,-40,-24,-25,-26,-27,-28,-29,32,-40,-24,32,32,-30,-31,-32,-33,-34,-35,-36,32,-37,32,32,32,32,-42,32,]),'AND':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[33,-40,-24,-25,-26,-27,-28,-29,33,-40,-24,33,33,-30,-31,-32,-33,-34,-35,-36,33,-37,33,33,33,33,-42,33,]),'OR':([3,5,13,14,15,16,17,18,43,44,45,46,52,54,55,56,57,58,59,60,62,65,66,71,72,82,83,84,],[34,-40,-24,-25,-26,-27,-28,-29,34,-40,-24,34,34,-30,-31,-32,-33,-34,-35,-36,34,-37,34,34,34,34,-42,34,]),'CLOSE_CURLY_BRACKET':([4,8,9,10,11,12,23,42,74,87,88,89,91,93,94,95,96,],[-3,-5,-6,-7,-8,-9,-4,-11,-10,-38,-23,-39,-12,95,96,-13,-14,]),'PLUS':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[35,-24,-25,-26,-27,-28,-29,35,-24,35,-24,-30,-31,-32,-33,-34,35,35,35,-37,35,]),'MINUS':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[36,-24,-25,-26,-27,-28,-29,36,-24,36,-24,-30,-31,-32,-33,-34,36,36,36,-37,36,]),'MULTIPLY':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[37,-24,-25,-26,-27,-28,-29,37,-24,37,-24,37,37,-32,-33,-34,37,37,37,-37,37,]),'DIVIDE':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[38,-24,-25,-26,-27,-28,-29,38,-24,38,-24,38,38,-32,-33,-34,38,38,38,-37,38,]),'MODULO':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[39,-24,-25,-26,-27,-28,-29,39,-24,39,-24,39,39,-32,-33,-34,39,39,39,-37,39,]),'CONCATENATION':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[40,-24,-25,-26,-27,-28,-29,40,-24,40,-24,-30,-31,-32,-33,-34,-35,-36,40,-37,40,]),'CONCATENATION_ASSIGNMENT':([5,13,14,15,16,17,18,24,25,44,45,54,55,56,57,58,59,60,63,65,70,],[41,-24,-25,-26,-27,-28,-29,41,-24,41,-24,-30,-31,-32,-33,-34,-35,-36,41,-37,41,]),'SEMICOLON':([5,13,14,15,16,17,18,24,25,45,54,55,56,57,58,59,60,63,65,80,],[42,-24,-25,-26,-27,-28,-29,42,-24,-24,-30,-31,-32,-33,-34,-35,-36,74,-37,89,]),'EQUALS':([13,25,],[47,47,]),'CLOSE_PARENTHESIS':([14,15,16,17,18,43,44,45,46,49,51,52,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,72,75,76,77,78,82,83,84,90,92,],[-25,-26,-27,-28,-29,62,-40,-24,-45,65,-23,-41,-30,-31,-32,-33,-34,-35,-36,-23,-37,79,80,-19,-21,-22,82,83,85,-15,-17,-18,-44,-42,-43,-20,-16,]),'COMMA':([14,15,16,17,18,45,51,54,55,56,57,58,59,60,64,65,67,68,69,70,75,76,77,78,90,92,],[-25,-26,-27,-28,-29,-24,-23,-30,-31,-32,-33,-34,-35,-36,-23,-37,81,-19,-21,-22,86,-15,-17,-18,-20,-16,]),'OPEN_CURLY_BRACKET':([79,85,],[88,88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,88,],[2,93,]),'condition':([0,6,7,26,50,53,61,73,],[3,43,46,52,66,71,72,84,]),'statement':([0,2,88,93,],[4,23,4,23,]),'expression':([0,2,6,7,26,35,36,37,38,39,40,41,47,50,51,53,61,73,81,88,93,],[5,24,44,44,44,54,55,56,57,58,59,60,63,44,70,44,44,44,70,24,24,]),'expression_statement':([0,2,88,93,],[8,8,8,8,]),'function_declaration':([0,2,88,93,],[9,9,9,9,]),'assignment':([0,2,88,93,],[10,10,10,10,]),'if_statement':([0,2,88,93,],[11,11,11,11,]),'impresion':([0,2,88,93,],[12,12,12,12,]),'function_call':([0,2,6,7,26,35,36,37,38,39,40,41,47,50,51,53,61,73,81,88,93,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'comparison':([3,43,46,52,62,66,71,72,82,84,],[26,61,26,26,73,26,61,26,73,26,]),'value_parameter_list':([51,],[67,]),'value_parameter':([51,81,],[68,90,]),'empty':([51,64,88,],[69,77,94,]),'parameter_list':([64,],[75,]),'parameter':([64,86,],[76,92,]),'body_statement_list':([79,85,],[87,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',15),
  ('program -> condition','program',1,'p_program','main.py',16),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',22),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',27),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',28),
  ('statement -> assignment','statement',1,'p_statement','main.py',29),
  ('statement -> if_statement','statement',1,'p_statement','main.py',30),
  ('statement -> impresion','statement',1,'p_statement','main.py',31),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',36),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',41),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',46),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',51),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',52),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',57),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',58),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',59),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',64),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',69),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',70),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',71),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',76),
  ('empty -> <empty>','empty',0,'p_empty','main.py',81),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',87),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',88),
  ('expression -> STRING','expression',1,'p_expression','main.py',89),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',90),
  ('expression -> NULL','expression',1,'p_expression','main.py',91),
  ('expression -> function_call','expression',1,'p_expression','main.py',92),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',94),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',96),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',97),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',98),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',99),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',104),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',109),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',114),
  ('condition -> expression','condition',1,'p_condition','main.py',119),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',120),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',121),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',122),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',123),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',124),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',129),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',130),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',131),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',132),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',133),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',134),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',135),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',136),
]
