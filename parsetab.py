
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_EQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODULOAND AND_EQUALS ARRAY_T AS BOOLEAN BOOLEAN_T BOOL_T BREAK CALLABLE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_EQUALS CONST CONTINUE DEFAULT DIVIDE DIVIDE_EQUALS DOUBLE_COLON DOUBLE_EQUALS DOUBLE_T ECHO ELSE EMPTY EQUALS FLOAT_T FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF INTEGER_T INT_T LEFT_SHIFT_EQUALS LESS_THAN LESS_THAN_OR_EQUALS MINUS MINUS_EQUALS MODULO MODULO_EQUALS MULTIPLY MULTIPLY_EQUALS NOT NOT_EQUALS NULL NUMBER OBJECT_T OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR OR_EQUALS PLUS PLUS_EQUALS RETURN RIGHT_SHIFT_EQUALS SEMICOLON STRING STRING_T VARIABLE WHILE WHITESPACE XOR_EQUALS\n    program : OPEN_TAG statement_list CLOSE_TAG\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n                   | empty\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment SEMICOLON\n              | if_statement\n              | while_statement\n              | for_statement\n              | impresion\n    \n    assignment : VARIABLE assignment_operator expression \n              | VARIABLE EQUALS math_expression \n              | VARIABLE EQUALS array_structure \n              | VARIABLE EQUALS condition \n              | VARIABLE PLUS PLUS \n              | VARIABLE assignment_operator list_access\n              | VARIABLE EQUALS casting math_expression\n\n    \n    casting :  OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS\n    \n    data_type : INT_T\n            | INTEGER_T\n            | FLOAT_T\n            | DOUBLE_T\n            | STRING_T\n            | BOOLEAN_T\n            | ARRAY_T\n            | OBJECT_T\n    \n    assignment_operator : PLUS_EQUALS\n                        | MINUS_EQUALS\n                        | MULTIPLY_EQUALS\n                        | DIVIDE_EQUALS\n                        | MODULO_EQUALS\n                        | CONCATENATION_EQUALS\n                        | LEFT_SHIFT_EQUALS\n                        | RIGHT_SHIFT_EQUALS\n                        | AND_EQUALS\n                        | OR_EQUALS\n                        | XOR_EQUALS\n                        | EQUALS\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n                | assignment\n                | expression\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_EQUALS expression\n                \n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n                    | if_statement ELSE body_statement_list\n    \n    for_statement : FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list\n    \n    for_initialization : assignment\n                       | empty\n    \n    for_update : assignment\n               | empty\n    \n    while_statement : WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO value_parameter_list SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    \n    list_access : VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET\n    '
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'OPEN_PARENTHESIS':([0,6,7,14,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,60,67,69,82,83,90,93,102,104,108,124,125,139,141,149,164,178,],[6,6,58,61,82,83,84,90,-87,-88,-89,-90,-91,-92,-93,-94,93,-95,-96,-97,-98,-99,58,108,117,125,58,58,58,108,90,93,108,108,149,58,108,149,58,-21,]),'NOT':([0,6,7,33,34,35,36,37,38,39,40,41,58,69,82,83,90,102,125,139,149,164,],[7,7,7,7,-87,-88,-89,-90,-91,-92,-93,-94,7,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,2,6,7,15,16,17,18,19,21,22,23,24,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,93,102,104,108,115,116,117,124,125,126,134,135,139,141,143,144,145,147,149,164,173,174,175,178,180,182,183,186,189,196,198,],[8,32,8,32,32,-4,-6,-7,-8,-10,-11,-12,-13,32,32,-87,-88,-89,-90,-91,-92,-93,-94,94,-95,-96,-97,-98,-99,32,32,32,32,32,32,32,32,94,32,-5,-9,-42,32,8,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,32,32,32,94,32,94,94,-73,32,32,94,8,32,-80,32,32,94,32,32,-6,32,8,32,-44,32,-45,-21,32,-72,-79,-43,32,-46,-74,]),'VARIABLE':([0,2,6,7,15,16,17,18,19,21,22,23,24,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,93,102,104,108,115,116,117,124,125,126,134,135,139,141,143,144,145,147,149,164,173,174,175,178,180,182,183,186,189,190,196,198,],[9,27,9,59,27,-4,-6,-7,-8,-10,-11,-12,-13,59,59,-87,-88,-89,-90,-91,-92,-93,-94,92,-95,-96,-97,-98,-99,59,59,59,59,59,59,59,59,106,112,-5,-9,-42,118,9,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,59,59,133,59,106,59,92,106,-73,27,112,106,9,59,-80,59,59,106,112,27,-6,59,9,59,-44,59,-45,-21,59,-72,-79,-43,59,133,-46,-74,]),'STRING':([0,2,6,7,15,16,17,18,19,21,22,23,24,31,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,102,115,116,117,125,126,134,135,139,143,144,145,147,149,164,173,174,175,180,182,183,186,189,196,198,],[10,10,10,10,10,-4,-6,-7,-8,-10,-11,-12,-13,10,10,-87,-88,-89,-90,-91,-92,-93,-94,10,10,10,10,10,10,10,10,10,-5,-9,-42,10,10,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,10,10,10,10,-73,10,10,10,10,-80,10,10,10,10,-6,10,10,10,-44,10,-45,10,-72,-79,-43,10,-46,-74,]),'BOOLEAN':([0,2,6,7,15,16,17,18,19,21,22,23,24,31,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,102,115,116,117,125,126,134,135,139,143,144,145,147,149,164,173,174,175,180,182,183,186,189,196,198,],[11,11,11,11,11,-4,-6,-7,-8,-10,-11,-12,-13,11,11,-87,-88,-89,-90,-91,-92,-93,-94,11,11,11,11,11,11,11,11,11,-5,-9,-42,11,11,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,11,11,11,11,-73,11,11,11,11,-80,11,11,11,11,-6,11,11,11,-44,11,-45,11,-72,-79,-43,11,-46,-74,]),'NULL':([0,2,6,7,15,16,17,18,19,21,22,23,24,31,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,102,115,116,117,125,126,134,135,139,143,144,145,147,149,164,173,174,175,180,182,183,186,189,196,198,],[12,12,12,12,12,-4,-6,-7,-8,-10,-11,-12,-13,12,12,-87,-88,-89,-90,-91,-92,-93,-94,12,12,12,12,12,12,12,12,12,-5,-9,-42,12,12,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,12,12,12,12,-73,12,12,12,12,-80,12,12,12,12,-6,12,12,12,-44,12,-45,12,-72,-79,-43,12,-46,-74,]),'IDENTIFIER':([0,2,6,7,15,16,17,18,19,21,22,23,24,26,31,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,66,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,102,115,116,117,125,126,134,135,139,143,144,145,147,149,164,173,174,175,180,182,183,186,189,196,198,],[14,14,14,14,14,-4,-6,-7,-8,-10,-11,-12,-13,67,14,14,-87,-88,-89,-90,-91,-92,-93,-94,14,14,14,14,14,14,14,14,14,-5,-9,-42,14,14,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,14,14,14,14,-73,14,14,14,14,-80,14,14,14,14,-6,14,14,14,-44,14,-45,14,-72,-79,-43,14,-46,-74,]),'$end':([1,3,4,5,8,9,10,11,12,13,32,57,59,62,89,91,92,94,95,96,97,98,99,100,101,107,142,166,167,168,169,170,171,],[0,-2,-3,-81,-59,-58,-60,-61,-62,-63,-59,-86,-58,-1,-82,-101,-102,-100,-64,-65,-66,-67,-68,-69,-70,-103,-71,-85,-106,-83,-84,-104,-105,]),'CLOSE_TAG':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,134,173,175,182,183,186,196,198,],[-57,62,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,-80,-44,-45,-72,-79,-43,-46,-74,]),'FUNCTION':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[26,26,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,26,-80,26,-6,-44,-45,-72,-79,-43,-46,-74,]),'IF':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[28,28,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,28,-80,28,-6,-44,-45,-72,-79,-43,-46,-74,]),'WHILE':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[29,29,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,29,-80,29,-6,-44,-45,-72,-79,-43,-46,-74,]),'FOR':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[30,30,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,30,-80,30,-6,-44,-45,-72,-79,-43,-46,-74,]),'ECHO':([2,15,16,17,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[31,31,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,31,-80,31,-6,-44,-45,-72,-79,-43,-46,-74,]),'DOUBLE_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[34,-81,-59,-58,-60,-61,-62,-63,-59,34,34,-58,34,-64,-65,-66,-67,-68,-69,-70,34,34,34,34,34,34,-71,34,-83,34,34,]),'NOT_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[35,-81,-59,-58,-60,-61,-62,-63,-59,35,35,-58,35,-64,-65,-66,-67,-68,-69,-70,35,35,35,35,35,35,-71,35,-83,35,35,]),'GREATER_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,181,184,],[36,-81,-59,-58,-60,-61,-62,-63,-59,36,36,-58,36,-64,-65,-66,-67,-68,-69,-70,36,36,36,36,36,36,-71,36,-83,36,189,36,]),'LESS_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[37,-81,-59,-58,-60,-61,-62,-63,-59,37,37,-58,37,-64,-65,-66,-67,-68,-69,-70,37,37,37,37,37,37,-71,37,-83,37,37,]),'GREATER_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[38,-81,-59,-58,-60,-61,-62,-63,-59,38,38,-58,38,-64,-65,-66,-67,-68,-69,-70,38,38,38,38,38,38,-71,38,-83,38,38,]),'LESS_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[39,-81,-59,-58,-60,-61,-62,-63,-59,39,39,-58,39,-64,-65,-66,-67,-68,-69,-70,39,39,39,39,39,39,-71,39,-83,39,39,]),'AND':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[40,-81,-59,-58,-60,-61,-62,-63,-59,40,40,-58,40,-64,-65,-66,-67,-68,-69,-70,40,40,40,40,40,40,-71,40,-83,40,40,]),'OR':([3,5,8,9,10,11,12,13,32,55,57,59,89,95,96,97,98,99,100,101,103,123,128,129,136,138,142,166,168,169,184,],[41,-81,-59,-58,-60,-61,-62,-63,-59,41,41,-58,41,-64,-65,-66,-67,-68,-69,-70,41,41,41,41,41,41,-71,41,-83,41,41,]),'PLUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,70,88,91,92,94,95,96,97,98,99,100,101,105,106,107,112,114,118,119,121,133,137,140,142,148,160,167,170,171,177,185,192,],[43,48,-59,43,-60,-61,-62,-63,48,70,-59,43,-58,127,48,43,43,-100,-64,-65,-66,-67,-68,48,48,43,43,43,70,48,-58,48,43,70,43,43,-71,43,48,43,-104,43,48,48,48,]),'DIVIDE':([4,5,8,9,10,11,12,13,25,27,32,56,59,88,91,92,94,95,96,97,98,99,100,101,105,106,107,112,114,118,119,121,137,140,142,148,160,167,170,171,177,185,192,],[44,51,-59,44,-60,-61,-62,-63,51,-58,-59,44,-58,51,44,44,-100,51,51,-66,-67,-68,51,51,44,44,44,-58,51,-58,51,44,44,44,-71,44,51,44,-104,44,51,51,51,]),'MINUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,88,91,92,94,95,96,97,98,99,100,101,105,106,107,112,114,118,119,121,137,140,142,148,160,167,170,171,177,185,192,],[45,49,-59,45,-60,-61,-62,-63,49,-58,-59,45,-58,49,45,45,-100,-64,-65,-66,-67,-68,49,49,45,45,45,-58,49,-58,49,45,45,45,-71,45,49,45,-104,45,49,49,49,]),'MULTIPLY':([4,5,8,9,10,11,12,13,25,27,32,56,59,88,91,92,94,95,96,97,98,99,100,101,105,106,107,112,114,118,119,121,137,140,142,148,160,167,170,171,177,185,192,],[46,50,-59,46,-60,-61,-62,-63,50,-58,-59,46,-58,50,46,46,-100,50,50,-66,-67,-68,50,50,46,46,46,-58,50,-58,50,46,46,46,-71,46,50,46,-104,46,50,50,50,]),'MODULO':([4,5,8,9,10,11,12,13,25,27,32,56,59,88,91,92,94,95,96,97,98,99,100,101,105,106,107,112,114,118,119,121,137,140,142,148,160,167,170,171,177,185,192,],[47,52,-59,47,-60,-61,-62,-63,52,-58,-59,47,-58,52,47,47,-100,52,52,-66,-67,-68,52,52,47,47,47,-58,52,-58,52,47,47,47,-71,47,52,47,-104,47,52,52,52,]),'CLOSE_PARENTHESIS':([5,8,9,10,11,12,13,32,55,56,57,59,61,89,91,92,94,95,96,97,98,99,100,101,107,109,110,111,112,113,114,117,118,119,120,121,122,123,127,128,129,136,137,138,140,142,146,148,150,151,152,153,154,155,156,157,158,166,167,168,169,170,171,172,179,187,190,193,194,195,],[-81,-59,-58,-60,-61,-62,-63,-59,103,105,-86,-58,-57,-82,-101,-102,-100,-64,-65,-66,-67,-68,-69,-70,-103,142,-47,-49,-50,-51,-52,-57,-58,-14,-19,-15,-16,-17,-18,162,163,166,167,168,170,-71,176,-20,178,-22,-23,-24,-25,-26,-27,-28,-29,-85,-106,-83,-84,-104,-105,-48,-107,-111,-57,197,-77,-78,]),'SEMICOLON':([5,8,9,10,11,12,13,20,25,27,31,32,57,59,84,85,86,87,88,89,91,92,94,95,96,97,98,99,100,101,107,118,119,120,121,122,123,127,130,131,132,142,148,165,166,167,168,169,170,171,179,184,185,187,],[-81,-59,-58,-60,-61,-62,-63,64,66,-58,-57,-59,-86,-58,-57,134,-53,-55,-56,-82,-101,-102,-100,-64,-65,-66,-67,-68,-69,-70,-103,-58,-14,-19,-15,-16,-17,-18,164,-75,-76,-71,-20,-54,-85,-106,-83,-84,-104,-105,-107,190,191,-111,]),'COMMA':([5,8,9,10,11,12,13,31,32,57,59,61,85,86,87,88,89,91,92,94,95,96,97,98,99,100,101,107,109,110,111,112,113,114,117,118,119,120,121,122,123,126,127,142,146,148,159,161,165,166,167,168,169,170,171,172,179,180,187,188,192,],[-81,-59,-58,-60,-61,-62,-63,-57,-59,-86,-58,-57,135,-53,-55,-56,-82,-101,-102,-100,-64,-65,-66,-67,-68,-69,-70,-103,143,-47,-49,-50,-51,-52,-57,-58,-14,-19,-15,-16,-17,-57,-18,-71,143,-20,180,-110,-54,-85,-106,-83,-84,-104,-105,-48,-107,-57,-111,180,-108,]),'CONCATENATION':([5,8,9,10,11,12,13,25,27,32,59,88,95,96,97,98,99,100,101,112,114,118,119,142,160,177,185,192,],[53,-59,-58,-60,-61,-62,-63,53,-58,-59,-58,53,-64,-65,-66,-67,-68,-69,-70,-58,53,-58,53,-71,53,53,53,53,]),'CONCATENATION_EQUALS':([5,8,9,10,11,12,13,25,27,32,59,88,95,96,97,98,99,100,101,112,114,118,119,133,142,160,177,185,192,],[54,-59,-58,-60,-61,-62,-63,54,76,-59,-58,54,-64,-65,-66,-67,-68,-69,-70,76,54,-58,54,76,-71,54,54,54,54,]),'EQUALS':([10,11,12,13,27,32,59,95,96,97,98,99,100,101,112,133,142,160,],[-60,-61,-62,-63,69,-59,-58,-64,-65,-66,-67,-68,-69,-70,69,69,-71,181,]),'CLOSE_SQUARE_BRACKET':([10,11,12,13,32,59,95,96,97,98,99,100,101,126,142,159,161,177,180,188,192,],[-60,-61,-62,-63,-59,-58,-64,-65,-66,-67,-68,-69,-70,-57,-71,179,-110,187,-57,-109,-108,]),'CLOSE_CURLY_BRACKET':([16,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,191,196,198,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,-57,-80,173,175,-44,-45,-72,-79,-43,196,-46,-74,]),'RETURN':([16,18,19,21,22,23,24,63,64,66,115,116,134,144,145,173,175,182,183,186,196,198,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-42,-73,-57,-80,174,-6,-44,-45,-72,-79,-43,-46,-74,]),'ELSE':([21,115,173,175,182,196,],[65,-73,-44,-45,-72,-46,]),'PLUS_EQUALS':([27,112,133,],[71,71,71,]),'MINUS_EQUALS':([27,112,133,],[72,72,72,]),'MULTIPLY_EQUALS':([27,112,133,],[73,73,73,]),'DIVIDE_EQUALS':([27,112,133,],[74,74,74,]),'MODULO_EQUALS':([27,112,133,],[75,75,75,]),'LEFT_SHIFT_EQUALS':([27,112,133,],[77,77,77,]),'RIGHT_SHIFT_EQUALS':([27,112,133,],[78,78,78,]),'AND_EQUALS':([27,112,133,],[79,79,79,]),'OR_EQUALS':([27,112,133,],[80,80,80,]),'XOR_EQUALS':([27,112,133,],[81,81,81,]),'OPEN_CURLY_BRACKET':([65,162,163,176,197,],[116,116,116,116,116,]),'OPEN_SQUARE_BRACKET':([69,118,],[126,147,]),'INT_T':([125,],[151,]),'INTEGER_T':([125,],[152,]),'FLOAT_T':([125,],[153,]),'DOUBLE_T':([125,],[154,]),'STRING_T':([125,],[155,]),'BOOLEAN_T':([125,],[156,]),'ARRAY_T':([125,],[157,]),'OBJECT_T':([125,],[158,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'condition':([0,6,7,33,58,69,82,83,90,102,125,139,149,164,],[3,55,57,89,55,123,128,129,136,138,55,169,55,184,]),'math_expression':([0,6,42,60,69,93,104,108,124,125,141,149,],[4,56,91,107,121,137,140,56,148,56,171,56,]),'expression':([0,2,6,7,15,31,33,48,49,50,51,52,53,54,58,61,68,69,82,83,90,102,116,117,125,126,135,139,143,144,147,149,164,174,180,189,],[5,25,5,5,25,88,5,95,96,97,98,99,100,101,5,114,119,5,5,5,5,5,25,114,5,160,88,5,114,25,177,5,5,185,160,192,]),'function_call':([0,2,6,7,15,31,33,48,49,50,51,52,53,54,58,61,68,69,82,83,90,102,116,117,125,126,135,139,143,144,147,149,164,174,180,189,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'statement_list':([2,116,],[15,144,]),'statement':([2,15,116,144,],[16,63,16,63,]),'empty':([2,31,61,84,116,117,126,180,190,],[17,87,111,132,145,111,161,161,195,]),'expression_statement':([2,15,116,144,],[18,18,18,18,]),'function_declaration':([2,15,116,144,],[19,19,19,19,]),'assignment':([2,15,61,84,116,117,143,144,190,],[20,20,113,131,20,113,113,20,194,]),'if_statement':([2,15,116,144,],[21,21,21,21,]),'while_statement':([2,15,116,144,],[22,22,22,22,]),'for_statement':([2,15,116,144,],[23,23,23,23,]),'impresion':([2,15,116,144,],[24,24,24,24,]),'comparison':([3,55,57,89,103,123,128,129,136,138,166,169,184,],[33,102,33,33,139,33,33,33,102,33,139,33,33,]),'math_operator':([4,9,56,91,92,105,106,107,121,137,140,148,167,171,],[42,60,104,42,60,141,60,42,42,104,42,42,141,42,]),'assignment_operator':([27,112,133,],[68,68,68,]),'value_parameter_list':([31,],[85,]),'value_parameter':([31,135,],[86,165,]),'parameter_list':([61,117,],[109,146,]),'parameter':([61,117,143,],[110,110,172,]),'body_statement_list':([65,162,163,176,197,],[115,182,183,186,198,]),'list_access':([68,],[120,]),'array_structure':([69,],[122,]),'casting':([69,],[124,]),'for_initialization':([84,],[130,]),'data_type':([125,],[150,]),'key_declaration':([126,180,],[159,188,]),'for_update':([190,],[193,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statement_list CLOSE_TAG','program',3,'p_program','main.py',68),
  ('program -> condition','program',1,'p_program','main.py',69),
  ('program -> math_expression','program',1,'p_program','main.py',70),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',76),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',77),
  ('statement_list -> empty','statement_list',1,'p_statement_list','main.py',78),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',87),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',88),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','main.py',89),
  ('statement -> if_statement','statement',1,'p_statement','main.py',90),
  ('statement -> while_statement','statement',1,'p_statement','main.py',91),
  ('statement -> for_statement','statement',1,'p_statement','main.py',92),
  ('statement -> impresion','statement',1,'p_statement','main.py',93),
  ('assignment -> VARIABLE assignment_operator expression','assignment',3,'p_assignment','main.py',99),
  ('assignment -> VARIABLE EQUALS math_expression','assignment',3,'p_assignment','main.py',100),
  ('assignment -> VARIABLE EQUALS array_structure','assignment',3,'p_assignment','main.py',101),
  ('assignment -> VARIABLE EQUALS condition','assignment',3,'p_assignment','main.py',102),
  ('assignment -> VARIABLE PLUS PLUS','assignment',3,'p_assignment','main.py',103),
  ('assignment -> VARIABLE assignment_operator list_access','assignment',3,'p_assignment','main.py',104),
  ('assignment -> VARIABLE EQUALS casting math_expression','assignment',4,'p_assignment','main.py',105),
  ('casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS','casting',3,'p_casting','main.py',119),
  ('data_type -> INT_T','data_type',1,'p_data_type','main.py',125),
  ('data_type -> INTEGER_T','data_type',1,'p_data_type','main.py',126),
  ('data_type -> FLOAT_T','data_type',1,'p_data_type','main.py',127),
  ('data_type -> DOUBLE_T','data_type',1,'p_data_type','main.py',128),
  ('data_type -> STRING_T','data_type',1,'p_data_type','main.py',129),
  ('data_type -> BOOLEAN_T','data_type',1,'p_data_type','main.py',130),
  ('data_type -> ARRAY_T','data_type',1,'p_data_type','main.py',131),
  ('data_type -> OBJECT_T','data_type',1,'p_data_type','main.py',132),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',138),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',139),
  ('assignment_operator -> MULTIPLY_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',140),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',141),
  ('assignment_operator -> MODULO_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',142),
  ('assignment_operator -> CONCATENATION_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',143),
  ('assignment_operator -> LEFT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',144),
  ('assignment_operator -> RIGHT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',145),
  ('assignment_operator -> AND_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',146),
  ('assignment_operator -> OR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',147),
  ('assignment_operator -> XOR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',148),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','main.py',149),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',155),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',161),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',171),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',172),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET','body_statement_list',6,'p_body_statement_list','main.py',173),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',182),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',183),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',184),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',195),
  ('parameter -> assignment','parameter',1,'p_parameter','main.py',196),
  ('parameter -> expression','parameter',1,'p_parameter','main.py',197),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',203),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',204),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',205),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',216),
  ('empty -> <empty>','empty',0,'p_empty','main.py',222),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',228),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',229),
  ('expression -> STRING','expression',1,'p_expression','main.py',230),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',231),
  ('expression -> NULL','expression',1,'p_expression','main.py',232),
  ('expression -> function_call','expression',1,'p_expression','main.py',233),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',234),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',235),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',236),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',237),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',238),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',239),
  ('expression -> expression CONCATENATION_EQUALS expression','expression',3,'p_expression','main.py',240),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS','function_call',4,'p_function_call','main.py',269),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',281),
  ('if_statement -> if_statement ELSE body_statement_list','if_statement',3,'p_if_statement','main.py',282),
  ('for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list','for_statement',9,'p_for_statement','main.py',288),
  ('for_initialization -> assignment','for_initialization',1,'p_for_initialization','main.py',294),
  ('for_initialization -> empty','for_initialization',1,'p_for_initialization','main.py',295),
  ('for_update -> assignment','for_update',1,'p_for_update','main.py',301),
  ('for_update -> empty','for_update',1,'p_for_update','main.py',302),
  ('while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','while_statement',5,'p_while_statement','main.py',308),
  ('impresion -> ECHO value_parameter_list SEMICOLON','impresion',3,'p_impresion','main.py',314),
  ('condition -> expression','condition',1,'p_condition','main.py',320),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',321),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',322),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',323),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',324),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',325),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',353),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',354),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',355),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',356),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',357),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',358),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',359),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',360),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',366),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',367),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',368),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',369),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',370),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',376),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',377),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',378),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',379),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',380),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',381),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',382),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',407),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',413),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',414),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',415),
  ('list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET','list_access',4,'p_list_access','main.py',428),
]
