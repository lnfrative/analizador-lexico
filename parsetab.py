
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHITESPACE\n    program : statement_list\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n              | VARIABLE EQUALS math_expression SEMICOLON\n              | VARIABLE EQUALS array_structure SEMICOLON\n              | VARIABLE EQUALS condition SEMICOLON\n\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n               | STRING\n               | BOOLEAN\n               | NULL\n               | function_call\n               | expression PLUS expression\n               | expression MINUS expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULO expression\n               | expression CONCATENATION expression\n               | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,7,8,21,22,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,55,56,57,59,62,64,72,74,80,91,93,95,],[7,7,55,58,59,60,62,-49,-50,-51,-52,-53,-54,-55,-56,64,-57,-58,-59,-60,-61,55,80,82,55,55,91,62,64,80,91,55,91,]),'NOT':([0,7,8,27,28,29,30,31,32,33,34,35,55,56,59,62,72,80,93,],[8,8,8,8,-49,-50,-51,-52,-53,-54,-55,-56,8,8,8,8,8,8,8,]),'NUMBER':([0,7,36,37,38,39,40,41,56,64,74,80,91,95,],[9,9,9,-57,-58,-59,-60,-61,9,9,9,9,9,9,]),'VARIABLE':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,80,81,82,93,96,97,98,99,109,117,120,121,122,123,126,127,129,132,133,],[15,26,-4,53,53,-6,-7,-8,-9,-10,-5,53,-49,-50,-51,-52,-53,-54,-55,-56,53,53,53,53,53,53,53,-15,53,53,53,53,53,53,53,53,106,53,-11,-12,-13,-14,53,53,106,-41,26,-42,53,-16,26,-17,-18,]),'STRING':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,80,81,93,96,97,98,99,109,117,121,122,123,126,127,129,132,133,],[16,16,-4,16,16,-6,-7,-8,-9,-10,-5,16,-49,-50,-51,-52,-53,-54,-55,-56,16,16,16,16,16,16,16,-15,16,16,16,16,16,16,16,16,16,-11,-12,-13,-14,16,16,-41,16,-42,16,-16,16,-17,-18,]),'BOOLEAN':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,80,81,93,96,97,98,99,109,117,121,122,123,126,127,129,132,133,],[17,17,-4,17,17,-6,-7,-8,-9,-10,-5,17,-49,-50,-51,-52,-53,-54,-55,-56,17,17,17,17,17,17,17,-15,17,17,17,17,17,17,17,17,17,-11,-12,-13,-14,17,17,-41,17,-42,17,-16,17,-17,-18,]),'NULL':([0,2,5,7,8,10,11,12,13,14,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,80,81,93,96,97,98,99,109,117,121,122,123,126,127,129,132,133,],[18,18,-4,18,18,-6,-7,-8,-9,-10,-5,18,-49,-50,-51,-52,-53,-54,-55,-56,18,18,18,18,18,18,18,-15,18,18,18,18,18,18,18,18,18,-11,-12,-13,-14,18,18,-41,18,-42,18,-16,18,-17,-18,]),'FUNCTION':([0,2,5,10,11,12,13,14,24,49,96,97,98,99,121,122,123,127,129,132,133,],[20,20,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-41,20,-42,-16,20,-17,-18,]),'IF':([0,2,5,10,11,12,13,14,24,49,96,97,98,99,121,122,123,127,129,132,133,],[22,22,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-41,22,-42,-16,22,-17,-18,]),'ECHO':([0,2,5,10,11,12,13,14,24,49,96,97,98,99,121,122,123,127,129,132,133,],[23,23,-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-41,23,-42,-16,23,-17,-18,]),'IDENTIFIER':([0,2,5,7,8,10,11,12,13,14,20,24,27,28,29,30,31,32,33,34,35,42,43,44,45,46,47,48,49,55,56,59,60,62,72,80,81,93,96,97,98,99,109,117,121,122,123,126,127,129,132,133,],[21,21,-4,21,21,-6,-7,-8,-9,-10,57,-5,21,-49,-50,-51,-52,-53,-54,-55,-56,21,21,21,21,21,21,21,-15,21,21,21,21,21,21,21,21,21,-11,-12,-13,-14,21,21,-41,21,-42,21,-16,21,-17,-18,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,24,49,52,53,54,61,63,65,66,67,68,69,70,71,83,96,97,98,99,110,111,112,113,114,115,121,123,127,132,133,],[0,-1,-2,-3,-4,-43,-62,-6,-7,-8,-9,-10,-28,-29,-30,-31,-32,-5,-15,-43,-28,-48,-44,-63,-33,-34,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-47,-66,-45,-46,-64,-65,-41,-42,-16,-17,-18,]),'DOUBLE_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[28,-43,-28,-29,-30,-31,-32,28,-43,-28,28,28,-33,-34,-35,-36,-37,-38,-39,28,-43,28,-40,28,28,28,28,-45,28,]),'NOT_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[29,-43,-28,-29,-30,-31,-32,29,-43,-28,29,29,-33,-34,-35,-36,-37,-38,-39,29,-43,29,-40,29,29,29,29,-45,29,]),'GREATER_THAN':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,118,],[30,-43,-28,-29,-30,-31,-32,30,-43,-28,30,30,-33,-34,-35,-36,-37,-38,-39,30,-43,30,-40,30,30,30,30,-45,30,126,]),'LESS_THAN':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[31,-43,-28,-29,-30,-31,-32,31,-43,-28,31,31,-33,-34,-35,-36,-37,-38,-39,31,-43,31,-40,31,31,31,31,-45,31,]),'GREATER_THAN_OR_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[32,-43,-28,-29,-30,-31,-32,32,-43,-28,32,32,-33,-34,-35,-36,-37,-38,-39,32,-43,32,-40,32,32,32,32,-45,32,]),'LESS_THAN_OR_EQUALS':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[33,-43,-28,-29,-30,-31,-32,33,-43,-28,33,33,-33,-34,-35,-36,-37,-38,-39,33,-43,33,-40,33,33,33,33,-45,33,]),'AND':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[34,-43,-28,-29,-30,-31,-32,34,-43,-28,34,34,-33,-34,-35,-36,-37,-38,-39,34,-43,34,-40,34,34,34,34,-45,34,]),'OR':([3,6,15,16,17,18,19,50,52,53,54,61,65,66,67,68,69,70,71,73,76,79,83,84,89,92,110,112,113,],[35,-43,-28,-29,-30,-31,-32,35,-43,-28,35,35,-33,-34,-35,-36,-37,-38,-39,35,-43,35,-40,35,35,35,35,-45,35,]),'PLUS':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,83,88,90,94,101,111,114,115,131,],[37,42,-62,-28,-29,-30,-31,-32,42,-28,37,42,-28,37,-33,-34,-35,-36,-37,42,42,37,42,37,-40,42,37,37,42,37,-64,37,42,]),'DIVIDE':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,83,88,90,94,101,111,114,115,131,],[38,45,-62,-28,-29,-30,-31,-32,45,-28,38,45,-28,38,45,45,-35,-36,-37,45,45,38,45,38,-40,45,38,38,45,38,-64,38,45,]),'MINUS':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,83,88,90,94,101,111,114,115,131,],[39,43,-62,-28,-29,-30,-31,-32,43,-28,39,43,-28,39,-33,-34,-35,-36,-37,43,43,39,43,39,-40,43,39,39,43,39,-64,39,43,]),'MULTIPLY':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,83,88,90,94,101,111,114,115,131,],[40,44,-62,-28,-29,-30,-31,-32,44,-28,40,44,-28,40,44,44,-35,-36,-37,44,44,40,44,40,-40,44,40,40,44,40,-64,40,44,]),'MODULO':([4,6,9,15,16,17,18,19,25,26,51,52,53,63,65,66,67,68,69,70,71,75,76,77,83,88,90,94,101,111,114,115,131,],[41,46,-62,-28,-29,-30,-31,-32,46,-28,41,46,-28,41,46,46,-35,-36,-37,46,46,41,46,41,-40,46,41,41,46,41,-64,41,46,]),'CLOSE_CURLY_BRACKET':([5,10,11,12,13,14,24,49,96,97,98,99,121,122,123,127,129,130,132,133,],[-4,-6,-7,-8,-9,-10,-5,-15,-11,-12,-13,-14,-41,-27,-42,-16,132,133,-17,-18,]),'CONCATENATION':([6,15,16,17,18,19,25,26,52,53,65,66,67,68,69,70,71,76,83,88,101,131,],[47,-28,-29,-30,-31,-32,47,-28,47,-28,-33,-34,-35,-36,-37,-38,-39,47,-40,47,47,47,]),'CONCATENATION_ASSIGNMENT':([6,15,16,17,18,19,25,26,52,53,65,66,67,68,69,70,71,76,83,88,101,131,],[48,-28,-29,-30,-31,-32,48,-28,48,-28,-33,-34,-35,-36,-37,-38,-39,48,-40,48,48,48,]),'SEMICOLON':([6,9,15,16,17,18,19,25,26,52,53,54,61,63,65,66,67,68,69,70,71,76,77,78,79,83,108,110,111,112,113,114,115,116,],[49,-62,-28,-29,-30,-31,-32,49,-28,-43,-28,-48,-44,-63,-33,-34,-35,-36,-37,-38,-39,96,97,98,99,-40,123,-47,-66,-45,-46,-64,-65,-67,]),'CLOSE_PARENTHESIS':([9,16,17,18,19,50,51,52,53,54,58,60,61,63,65,66,67,68,69,70,71,82,83,84,85,86,87,88,89,90,92,94,103,104,105,106,110,111,112,113,114,115,124,128,],[-62,-29,-30,-31,-32,73,75,-43,-28,-48,83,-27,-44,-63,-33,-34,-35,-36,-37,-38,-39,-27,-40,107,108,-23,-25,-26,110,111,112,114,119,-19,-21,-22,-47,-66,-45,-46,-64,-65,-24,-20,]),'EQUALS':([15,16,17,18,19,26,53,65,66,67,68,69,70,71,83,101,],[56,-29,-30,-31,-32,56,-28,-33,-34,-35,-36,-37,-38,-39,-40,118,]),'COMMA':([16,17,18,19,53,60,65,66,67,68,69,70,71,81,82,83,85,86,87,88,100,102,103,104,105,106,117,124,125,128,131,],[-29,-30,-31,-32,-28,-27,-33,-34,-35,-36,-37,-38,-39,-27,-27,-40,109,-23,-25,-26,117,-70,120,-19,-21,-22,-27,-24,117,-20,-68,]),'CLOSE_SQUARE_BRACKET':([16,17,18,19,53,65,66,67,68,69,70,71,81,83,100,102,117,125,131,],[-29,-30,-31,-32,-28,-33,-34,-35,-36,-37,-38,-39,-27,-40,116,-70,-27,-69,-68,]),'OPEN_SQUARE_BRACKET':([56,],[81,]),'OPEN_CURLY_BRACKET':([107,119,],[122,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,122,],[2,129,]),'condition':([0,7,8,27,55,56,59,62,72,80,93,],[3,50,54,61,50,79,84,89,92,50,113,]),'math_expression':([0,7,36,56,64,74,80,91,95,],[4,51,63,77,90,94,51,51,115,]),'statement':([0,2,122,129,],[5,24,5,24,]),'expression':([0,2,7,8,27,42,43,44,45,46,47,48,55,56,59,60,62,72,80,81,93,109,117,122,126,129,],[6,25,52,52,52,65,66,67,68,69,70,71,52,76,52,88,52,52,52,101,52,88,101,25,131,25,]),'expression_statement':([0,2,122,129,],[10,10,10,10,]),'function_declaration':([0,2,122,129,],[11,11,11,11,]),'assignment':([0,2,122,129,],[12,12,12,12,]),'if_statement':([0,2,122,129,],[13,13,13,13,]),'impresion':([0,2,122,129,],[14,14,14,14,]),'function_call':([0,2,7,8,27,42,43,44,45,46,47,48,55,56,59,60,62,72,80,81,93,109,117,122,126,129,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'comparison':([3,50,54,61,73,79,84,89,92,110,113,],[27,72,27,27,93,27,27,72,27,93,27,]),'math_operator':([4,51,63,75,77,90,94,111,115,],[36,74,36,95,36,74,36,95,36,]),'array_structure':([56,],[78,]),'value_parameter_list':([60,],[85,]),'value_parameter':([60,109,],[86,124,]),'empty':([60,81,82,117,122,],[87,102,105,102,130,]),'key_declaration':([81,117,],[100,125,]),'parameter_list':([82,],[103,]),'parameter':([82,120,],[104,128,]),'body_statement_list':([107,119,],[121,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',15),
  ('program -> condition','program',1,'p_program','main.py',16),
  ('program -> math_expression','program',1,'p_program','main.py',17),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',22),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',23),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',28),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',29),
  ('statement -> assignment','statement',1,'p_statement','main.py',30),
  ('statement -> if_statement','statement',1,'p_statement','main.py',31),
  ('statement -> impresion','statement',1,'p_statement','main.py',32),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',37),
  ('assignment -> VARIABLE EQUALS math_expression SEMICOLON','assignment',4,'p_assignment','main.py',38),
  ('assignment -> VARIABLE EQUALS array_structure SEMICOLON','assignment',4,'p_assignment','main.py',39),
  ('assignment -> VARIABLE EQUALS condition SEMICOLON','assignment',4,'p_assignment','main.py',40),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',46),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',51),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',56),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',57),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',62),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',63),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',64),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',69),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',74),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',75),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',76),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',81),
  ('empty -> <empty>','empty',0,'p_empty','main.py',86),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',92),
  ('expression -> STRING','expression',1,'p_expression','main.py',93),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',94),
  ('expression -> NULL','expression',1,'p_expression','main.py',95),
  ('expression -> function_call','expression',1,'p_expression','main.py',96),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',97),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',98),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',99),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',100),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',101),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',102),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',103),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',108),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',113),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',118),
  ('condition -> expression','condition',1,'p_condition','main.py',123),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',124),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',125),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',126),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',127),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',128),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',133),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',134),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',135),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',136),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',137),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',138),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',139),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',140),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',145),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',146),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',147),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',148),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',149),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',154),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',155),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',156),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',157),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',158),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',163),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',168),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',169),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',170),
]
