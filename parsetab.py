
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_ASSIGNMENTleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND ARRAY AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_ASSIGNMENT CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LESS_THAN LESS_THAN_OR_EQUALS MINUS MODULO MULTIPLY NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR PLUS RETURN SEMICOLON STRING VARIABLE WHILE WHITESPACE\n    program : statement_list\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment\n              | if_statement\n              | while_statement\n              | for_statement\n              | impresion\n    \n    assignment : VARIABLE EQUALS expression SEMICOLON\n              | VARIABLE EQUALS math_expression SEMICOLON\n              | VARIABLE EQUALS array_structure SEMICOLON\n              | VARIABLE EQUALS condition SEMICOLON\n\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_ASSIGNMENT expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    for_statement : FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list\n    \n    for_initialization : assignment\n                       | empty\n    \n    for_update : expression\n               | empty\n    \n    while_statement : WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    '
    
_lr_action_items = {'OPEN_PARENTHESIS':([0,7,8,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,60,62,63,64,66,67,71,74,83,85,89,96,113,115,129,],[7,7,60,65,66,67,68,69,71,-58,-59,-60,-61,-62,-63,-64,-65,74,-66,-67,-68,-69,-70,60,89,96,98,60,60,60,89,71,74,89,96,60,89,60,]),'NOT':([0,7,8,32,33,34,35,36,37,38,39,40,60,63,66,67,71,83,96,113,129,],[8,8,8,8,-58,-59,-60,-61,-62,-63,-64,-65,8,8,8,8,8,8,8,8,8,]),'NUMBER':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,62,63,66,67,69,71,74,83,85,89,96,97,113,115,116,117,118,119,129,131,139,143,144,145,147,150,151,153,155,157,158,163,],[9,31,-4,9,31,-6,-7,-8,-9,-10,-11,-12,-5,31,-58,-59,-60,-61,-62,-63,-64,-65,75,-66,-67,-68,-69,-70,31,31,31,31,31,31,31,-17,31,75,95,31,31,31,31,75,31,75,75,9,31,31,75,-13,-14,-15,-16,31,31,31,-44,31,-50,-51,31,-18,31,31,-19,-20,-45,]),'VARIABLE':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,60,62,63,66,67,68,69,71,74,83,85,89,96,97,98,113,115,116,117,118,119,129,131,139,142,143,144,145,147,150,151,153,155,157,158,163,],[10,30,-4,58,61,-6,-7,-8,-9,-10,-11,-12,-5,61,-58,-59,-60,-61,-62,-63,-64,-65,73,-66,-67,-68,-69,-70,61,61,61,61,61,61,61,-17,61,87,90,61,61,105,61,61,87,61,73,87,58,61,126,61,87,-13,-14,-15,-16,61,61,61,126,-44,30,-50,-51,61,-18,30,61,-19,-20,-45,]),'STRING':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,66,67,69,71,83,96,97,113,116,117,118,119,129,131,139,143,144,145,147,150,151,153,155,157,158,163,],[18,18,-4,18,18,-6,-7,-8,-9,-10,-11,-12,-5,18,-58,-59,-60,-61,-62,-63,-64,-65,18,18,18,18,18,18,18,-17,18,18,18,18,18,18,18,18,18,18,-13,-14,-15,-16,18,18,18,-44,18,-50,-51,18,-18,18,18,-19,-20,-45,]),'BOOLEAN':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,66,67,69,71,83,96,97,113,116,117,118,119,129,131,139,143,144,145,147,150,151,153,155,157,158,163,],[19,19,-4,19,19,-6,-7,-8,-9,-10,-11,-12,-5,19,-58,-59,-60,-61,-62,-63,-64,-65,19,19,19,19,19,19,19,-17,19,19,19,19,19,19,19,19,19,19,-13,-14,-15,-16,19,19,19,-44,19,-50,-51,19,-18,19,19,-19,-20,-45,]),'NULL':([0,2,5,7,8,11,12,13,14,15,16,17,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,66,67,69,71,83,96,97,113,116,117,118,119,129,131,139,143,144,145,147,150,151,153,155,157,158,163,],[20,20,-4,20,20,-6,-7,-8,-9,-10,-11,-12,-5,20,-58,-59,-60,-61,-62,-63,-64,-65,20,20,20,20,20,20,20,-17,20,20,20,20,20,20,20,20,20,20,-13,-14,-15,-16,20,20,20,-44,20,-50,-51,20,-18,20,20,-19,-20,-45,]),'FUNCTION':([0,2,5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,157,158,163,],[22,22,-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,22,-50,-51,-18,22,-19,-20,-45,]),'IF':([0,2,5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,157,158,163,],[24,24,-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,24,-50,-51,-18,24,-19,-20,-45,]),'WHILE':([0,2,5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,157,158,163,],[25,25,-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,25,-50,-51,-18,25,-19,-20,-45,]),'FOR':([0,2,5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,157,158,163,],[26,26,-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,26,-50,-51,-18,26,-19,-20,-45,]),'ECHO':([0,2,5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,157,158,163,],[27,27,-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,27,-50,-51,-18,27,-19,-20,-45,]),'IDENTIFIER':([0,2,5,7,8,11,12,13,14,15,16,17,22,28,32,33,34,35,36,37,38,39,40,47,48,49,50,51,52,53,54,60,63,66,67,69,71,83,96,97,113,116,117,118,119,129,131,139,143,144,145,147,150,151,153,155,157,158,163,],[23,23,-4,23,23,-6,-7,-8,-9,-10,-11,-12,64,-5,23,-58,-59,-60,-61,-62,-63,-64,-65,23,23,23,23,23,23,23,-17,23,23,23,23,23,23,23,23,23,23,-13,-14,-15,-16,23,23,23,-44,23,-50,-51,23,-18,23,23,-19,-20,-45,]),'$end':([1,2,3,4,5,6,9,10,11,12,13,14,15,16,17,18,19,20,21,28,31,54,57,59,61,70,72,73,75,76,77,78,79,80,81,82,88,99,116,117,118,119,132,133,134,135,136,137,143,145,147,151,157,158,163,],[0,-1,-2,-3,-4,-52,-31,-30,-6,-7,-8,-9,-10,-11,-12,-32,-33,-34,-35,-5,-31,-17,-52,-57,-30,-53,-72,-73,-71,-36,-37,-38,-39,-40,-41,-42,-74,-43,-13,-14,-15,-16,-56,-77,-54,-55,-75,-76,-44,-50,-51,-18,-19,-20,-45,]),'DOUBLE_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[33,-52,-31,-30,-32,-33,-34,-35,-31,33,-52,-30,33,-30,33,-36,-37,-38,-39,-40,-41,-42,33,-30,-52,33,-31,-43,33,33,33,33,33,-54,33,33,]),'NOT_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[34,-52,-31,-30,-32,-33,-34,-35,-31,34,-52,-30,34,-30,34,-36,-37,-38,-39,-40,-41,-42,34,-30,-52,34,-31,-43,34,34,34,34,34,-54,34,34,]),'GREATER_THAN':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,140,146,],[35,-52,-31,-30,-32,-33,-34,-35,-31,35,-52,-30,35,-30,35,-36,-37,-38,-39,-40,-41,-42,35,-30,-52,35,-31,-43,35,35,35,35,35,-54,35,150,35,]),'LESS_THAN':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[36,-52,-31,-30,-32,-33,-34,-35,-31,36,-52,-30,36,-30,36,-36,-37,-38,-39,-40,-41,-42,36,-30,-52,36,-31,-43,36,36,36,36,36,-54,36,36,]),'GREATER_THAN_OR_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[37,-52,-31,-30,-32,-33,-34,-35,-31,37,-52,-30,37,-30,37,-36,-37,-38,-39,-40,-41,-42,37,-30,-52,37,-31,-43,37,37,37,37,37,-54,37,37,]),'LESS_THAN_OR_EQUALS':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[38,-52,-31,-30,-32,-33,-34,-35,-31,38,-52,-30,38,-30,38,-36,-37,-38,-39,-40,-41,-42,38,-30,-52,38,-31,-43,38,38,38,38,38,-54,38,38,]),'AND':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[39,-52,-31,-30,-32,-33,-34,-35,-31,39,-52,-30,39,-30,39,-36,-37,-38,-39,-40,-41,-42,39,-30,-52,39,-31,-43,39,39,39,39,39,-54,39,39,]),'OR':([3,6,9,10,18,19,20,21,31,55,57,58,59,61,70,76,77,78,79,80,81,82,84,90,91,94,95,99,100,101,110,112,132,134,135,146,],[40,-52,-31,-30,-32,-33,-34,-35,-31,40,-52,-30,40,-30,40,-36,-37,-38,-39,-40,-41,-42,40,-30,-52,40,-31,-43,40,40,40,40,40,-54,40,40,]),'PLUS':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,72,73,75,76,77,78,79,80,81,82,86,87,88,90,91,92,95,99,109,111,114,121,133,136,137,156,160,],[42,47,-31,42,-32,-33,-34,-35,47,-30,-31,42,47,42,-30,42,42,-71,-36,-37,-38,-39,-40,47,47,42,42,42,42,47,42,-31,-43,47,42,42,47,42,-75,42,47,47,]),'DIVIDE':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,72,73,75,76,77,78,79,80,81,82,86,87,88,90,91,92,95,99,109,111,114,121,133,136,137,156,160,],[43,50,-31,43,-32,-33,-34,-35,50,-30,-31,43,50,43,-30,43,43,-71,50,50,-38,-39,-40,50,50,43,43,43,43,50,43,-31,-43,50,43,43,50,43,-75,43,50,50,]),'MINUS':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,72,73,75,76,77,78,79,80,81,82,86,87,88,90,91,92,95,99,109,111,114,121,133,136,137,156,160,],[44,48,-31,44,-32,-33,-34,-35,48,-30,-31,44,48,44,-30,44,44,-71,-36,-37,-38,-39,-40,48,48,44,44,44,44,48,44,-31,-43,48,44,44,48,44,-75,44,48,48,]),'MULTIPLY':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,72,73,75,76,77,78,79,80,81,82,86,87,88,90,91,92,95,99,109,111,114,121,133,136,137,156,160,],[45,49,-31,45,-32,-33,-34,-35,49,-30,-31,45,49,45,-30,45,45,-71,49,49,-38,-39,-40,49,49,45,45,45,45,49,45,-31,-43,49,45,45,49,45,-75,45,49,49,]),'MODULO':([4,6,9,10,18,19,20,21,29,30,31,56,57,58,61,72,73,75,76,77,78,79,80,81,82,86,87,88,90,91,92,95,99,109,111,114,121,133,136,137,156,160,],[46,51,-31,46,-32,-33,-34,-35,51,-30,-31,46,51,46,-30,46,46,-71,51,51,-38,-39,-40,51,51,46,46,46,46,51,46,-31,-43,51,46,46,51,46,-75,46,51,51,]),'CLOSE_CURLY_BRACKET':([5,11,12,13,14,15,16,17,28,54,116,117,118,119,143,144,145,147,151,153,154,157,158,163,],[-4,-6,-7,-8,-9,-10,-11,-12,-5,-17,-13,-14,-15,-16,-44,-29,-50,-51,-18,157,158,-19,-20,-45,]),'CONCATENATION':([6,9,10,18,19,20,21,29,30,31,57,58,61,76,77,78,79,80,81,82,90,91,95,99,109,121,156,160,],[52,-31,-30,-32,-33,-34,-35,52,-30,-31,52,-30,-30,-36,-37,-38,-39,-40,-41,-42,-30,52,-31,-43,52,52,52,52,]),'CONCATENATION_ASSIGNMENT':([6,9,10,18,19,20,21,29,30,31,57,58,61,76,77,78,79,80,81,82,90,91,95,99,109,121,156,160,],[53,-31,-30,-32,-33,-34,-35,53,-30,-31,53,-30,-30,-36,-37,-38,-39,-40,-41,-42,-30,53,-31,-43,53,53,53,53,]),'SEMICOLON':([6,9,10,18,19,20,21,29,30,31,57,59,61,68,70,72,73,75,76,77,78,79,80,81,82,88,90,91,92,93,94,95,99,102,103,104,116,117,118,119,130,132,133,134,135,136,137,138,146,],[54,-31,-30,-32,-33,-34,-35,54,-30,-31,-52,-57,-30,-29,-53,-72,-73,-71,-36,-37,-38,-39,-40,-41,-42,-74,-30,116,117,118,119,-31,-43,129,-46,-47,-13,-14,-15,-16,147,-56,-77,-54,-55,-75,-76,-78,155,]),'CLOSE_PARENTHESIS':([9,18,19,20,21,31,55,56,57,58,59,61,65,69,70,72,73,75,76,77,78,79,80,81,82,88,98,99,100,101,106,107,108,109,110,111,112,114,123,124,125,126,132,133,134,135,136,137,148,152,155,159,160,161,],[-31,-32,-33,-34,-35,-31,84,86,-52,-30,-57,-30,99,-29,-53,-72,-73,-71,-36,-37,-38,-39,-40,-41,-42,-74,-29,-43,127,128,130,-25,-27,-28,132,133,134,136,141,-21,-23,-24,-56,-77,-54,-55,-75,-76,-26,-22,-29,162,-48,-49,]),'EQUALS':([10,18,19,20,21,30,31,61,76,77,78,79,80,81,82,99,105,121,],[63,-32,-33,-34,-35,63,-31,-30,-36,-37,-38,-39,-40,-41,-42,-43,63,140,]),'COMMA':([18,19,20,21,31,61,69,76,77,78,79,80,81,82,97,98,99,106,107,108,109,120,122,123,124,125,126,139,148,149,152,156,],[-32,-33,-34,-35,-31,-30,-29,-36,-37,-38,-39,-40,-41,-42,-29,-29,-43,131,-25,-27,-28,139,-81,142,-21,-23,-24,-29,-26,139,-22,-79,]),'CLOSE_SQUARE_BRACKET':([18,19,20,21,31,61,76,77,78,79,80,81,82,97,99,120,122,139,149,156,],[-32,-33,-34,-35,-31,-30,-36,-37,-38,-39,-40,-41,-42,-29,-43,138,-81,-29,-80,-79,]),'OPEN_SQUARE_BRACKET':([63,],[97,]),'OPEN_CURLY_BRACKET':([127,128,141,162,],[144,144,144,144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,144,],[2,153,]),'condition':([0,7,8,32,60,63,66,67,71,83,96,113,129,],[3,55,59,70,55,94,100,101,110,112,55,135,146,]),'math_expression':([0,7,41,62,63,74,85,89,96,115,],[4,56,72,88,92,111,114,56,56,137,]),'statement':([0,2,144,153,],[5,28,5,28,]),'expression':([0,2,7,8,32,47,48,49,50,51,52,53,60,63,66,67,69,71,83,96,97,113,129,131,139,144,150,153,155,],[6,29,57,57,57,76,77,78,79,80,81,82,57,91,57,57,109,57,57,57,121,57,57,109,121,29,156,29,160,]),'expression_statement':([0,2,144,153,],[11,11,11,11,]),'function_declaration':([0,2,144,153,],[12,12,12,12,]),'assignment':([0,2,68,144,153,],[13,13,103,13,13,]),'if_statement':([0,2,144,153,],[14,14,14,14,]),'while_statement':([0,2,144,153,],[15,15,15,15,]),'for_statement':([0,2,144,153,],[16,16,16,16,]),'impresion':([0,2,144,153,],[17,17,17,17,]),'function_call':([0,2,7,8,32,47,48,49,50,51,52,53,60,63,66,67,69,71,83,96,97,113,129,131,139,144,150,153,155,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'comparison':([3,55,59,70,84,94,100,101,110,112,132,135,146,],[32,83,32,32,113,32,32,32,83,32,113,32,32,]),'math_operator':([4,10,56,58,72,73,86,87,88,90,92,111,114,133,137,],[41,62,85,62,41,62,115,62,41,62,41,85,41,115,41,]),'array_structure':([63,],[93,]),'for_initialization':([68,],[102,]),'empty':([68,69,97,98,139,144,155,],[104,108,122,125,122,154,161,]),'value_parameter_list':([69,],[106,]),'value_parameter':([69,131,],[107,148,]),'key_declaration':([97,139,],[120,149,]),'parameter_list':([98,],[123,]),'parameter':([98,142,],[124,152,]),'body_statement_list':([127,128,141,162,],[143,145,151,163,]),'for_update':([155,],[159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','main.py',25),
  ('program -> condition','program',1,'p_program','main.py',26),
  ('program -> math_expression','program',1,'p_program','main.py',27),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',32),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',33),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',38),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',39),
  ('statement -> assignment','statement',1,'p_statement','main.py',40),
  ('statement -> if_statement','statement',1,'p_statement','main.py',41),
  ('statement -> while_statement','statement',1,'p_statement','main.py',42),
  ('statement -> for_statement','statement',1,'p_statement','main.py',43),
  ('statement -> impresion','statement',1,'p_statement','main.py',44),
  ('assignment -> VARIABLE EQUALS expression SEMICOLON','assignment',4,'p_assignment','main.py',49),
  ('assignment -> VARIABLE EQUALS math_expression SEMICOLON','assignment',4,'p_assignment','main.py',50),
  ('assignment -> VARIABLE EQUALS array_structure SEMICOLON','assignment',4,'p_assignment','main.py',51),
  ('assignment -> VARIABLE EQUALS condition SEMICOLON','assignment',4,'p_assignment','main.py',52),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',58),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',63),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',68),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',69),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',74),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',75),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',76),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',81),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',86),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',87),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',88),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',93),
  ('empty -> <empty>','empty',0,'p_empty','main.py',98),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',104),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',105),
  ('expression -> STRING','expression',1,'p_expression','main.py',106),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',107),
  ('expression -> NULL','expression',1,'p_expression','main.py',108),
  ('expression -> function_call','expression',1,'p_expression','main.py',109),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',110),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',111),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',112),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',113),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',114),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',115),
  ('expression -> expression CONCATENATION_ASSIGNMENT expression','expression',3,'p_expression','main.py',116),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS','function_call',3,'p_function_call','main.py',121),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',126),
  ('for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list','for_statement',9,'p_for_statement','main.py',131),
  ('for_initialization -> assignment','for_initialization',1,'p_for_initialization','main.py',136),
  ('for_initialization -> empty','for_initialization',1,'p_for_initialization','main.py',137),
  ('for_update -> expression','for_update',1,'p_for_update','main.py',142),
  ('for_update -> empty','for_update',1,'p_for_update','main.py',143),
  ('while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','while_statement',5,'p_while_statement','main.py',148),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',153),
  ('condition -> expression','condition',1,'p_condition','main.py',158),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',159),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',160),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',161),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',162),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',163),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',168),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',169),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',170),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',171),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',172),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',173),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',174),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',175),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',180),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',181),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',182),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',183),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',184),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',189),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',190),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',191),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',192),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',193),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',194),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',195),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',200),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',205),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',206),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',207),
]
