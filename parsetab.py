
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATENATIONCONCATENATION_EQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODULOABSTRACT AND AND_EQUALS AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSE_CURLY_BRACKET CLOSE_PARENTHESIS CLOSE_SQUARE_BRACKET CLOSE_TAG COLON COMMA COMMENT CONCATENATION CONCATENATION_EQUALS CONST CONTINUE DECLARE DEFAULT DIE DIVIDE DIVIDE_EQUALS DO DOUBLE_COLON DOUBLE_EQUALS ECHO ELSE ELSEIF EMPTY ENDDECLARE ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUALS EVAL EXIT EXTENDS FINAL FINALLY FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUALS IDENTIFIER IF LEFT_SHIFT_EQUALS LESS_THAN LESS_THAN_OR_EQUALS MINUS MINUS_EQUALS MODULO MODULO_EQUALS MULTIPLY MULTIPLY_EQUALS NOT NOT_EQUALS NULL NUMBER OPEN_CURLY_BRACKET OPEN_PARENTHESIS OPEN_SQUARE_BRACKET OPEN_TAG OPEN_TAG_WITH_ECHO OR OR_EQUALS PLUS PLUS_EQUALS RETURN RIGHT_SHIFT_EQUALS SEMICOLON STRING VARIABLE WHILE WHITESPACE XOR_EQUALS\n    program : OPEN_TAG statement_list CLOSE_TAG\n            | condition\n            | math_expression\n    \n    statement_list : statement\n                   | statement_list statement\n                   | empty\n    \n    statement : expression_statement\n              | function_declaration\n              | assignment SEMICOLON\n              | if_statement\n              | while_statement\n              | for_statement\n              | impresion\n    \n    assignment : VARIABLE assignment_operator expression \n              | VARIABLE EQUALS math_expression \n              | VARIABLE EQUALS array_structure \n              | VARIABLE EQUALS condition \n              | VARIABLE PLUS PLUS \n              | VARIABLE assignment_operator list_access\n\n    \n    assignment_operator : PLUS_EQUALS\n                        | MINUS_EQUALS\n                        | MULTIPLY_EQUALS\n                        | DIVIDE_EQUALS\n                        | MODULO_EQUALS\n                        | CONCATENATION_EQUALS\n                        | LEFT_SHIFT_EQUALS\n                        | RIGHT_SHIFT_EQUALS\n                        | AND_EQUALS\n                        | OR_EQUALS\n                        | XOR_EQUALS\n                        | EQUALS\n    \n    expression_statement : expression SEMICOLON\n    \n    function_declaration : FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list\n    \n    body_statement_list : OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET\n                        | OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET\n    \n    parameter_list : parameter\n                   | parameter_list COMMA parameter\n                   | empty\n    \n    parameter : VARIABLE\n                | assignment\n                | expression\n    \n    value_parameter_list : value_parameter\n                   | value_parameter_list COMMA value_parameter\n                   | empty\n    \n    value_parameter : expression\n    \n    empty :\n    \n    expression : VARIABLE\n                | NUMBER\n                | STRING\n                | BOOLEAN\n                | NULL\n                | function_call\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression CONCATENATION expression\n                | expression CONCATENATION_EQUALS expression\n    \n    function_call : IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS\n    \n    if_statement : IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    for_statement : FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list\n    \n    for_initialization : assignment\n                       | empty\n    \n    for_update : assignment\n               | empty\n    \n    while_statement : WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list\n    \n    impresion : ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON\n    \n    condition : expression\n              | condition comparison condition\n              | OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS\n              | OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition\n              | condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS\n              | NOT condition\n    \n    comparison : DOUBLE_EQUALS\n               | NOT_EQUALS\n               | GREATER_THAN\n               | LESS_THAN\n               | GREATER_THAN_OR_EQUALS\n               | LESS_THAN_OR_EQUALS\n               | AND\n               | OR\n    \n    math_operator : PLUS\n                  | DIVIDE\n                  | MINUS\n                  | MULTIPLY\n                  | MODULO\n    \n    math_expression : NUMBER\n                    | math_expression math_operator math_expression\n                    | math_expression math_operator VARIABLE\n                    | VARIABLE math_operator math_expression \n                    | OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS\n                    | OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression\n                    | math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS\n    \n    array_structure : OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET\n    \n    key_declaration : expression EQUALS GREATER_THAN expression\n                    | key_declaration COMMA key_declaration\n                    | empty\n    \n    list_access : VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET\n    '
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'OPEN_PARENTHESIS':([0,6,7,14,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,58,60,66,68,81,82,86,89,98,100,104,118,134,136,146,],[6,6,58,61,81,82,83,84,86,-76,-77,-78,-79,-80,-81,-82,-83,89,-84,-85,-86,-87,-88,58,104,111,118,58,58,58,104,86,89,104,118,58,104,58,]),'NOT':([0,6,7,33,34,35,36,37,38,39,40,41,58,68,81,82,86,98,118,134,146,],[7,7,7,7,-76,-77,-78,-79,-80,-81,-82,-83,7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,89,98,100,104,111,118,119,134,136,138,140,146,148,159,161,162,163,165,167,170,171,172,175,176,177,184,185,],[8,32,8,32,32,-4,-6,-7,-8,-10,-11,-12,-13,32,-76,-77,-78,-79,-80,-81,-82,-83,90,-84,-85,-86,-87,-88,32,32,32,32,32,32,32,32,90,32,-5,-9,-32,32,8,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,32,32,32,32,90,32,90,90,32,8,32,32,90,32,32,32,32,32,-62,32,-68,-69,-33,32,32,-6,-34,32,-35,-63,-36,]),'VARIABLE':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,58,60,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,89,98,100,104,111,118,119,134,136,138,140,146,148,159,161,162,163,165,167,170,171,172,173,175,176,177,184,185,],[9,27,9,59,27,-4,-6,-7,-8,-10,-11,-12,-13,59,-76,-77,-78,-79,-80,-81,-82,-83,88,-84,-85,-86,-87,-88,59,59,59,59,59,59,59,59,102,108,-5,-9,-32,112,9,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,59,59,126,59,59,102,59,88,102,108,9,59,59,102,108,59,59,59,59,-62,27,-68,-69,-33,59,27,-6,126,-34,59,-35,-63,-36,]),'STRING':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,134,138,140,146,148,159,161,162,163,165,167,170,171,172,175,176,177,184,185,],[10,10,10,10,10,-4,-6,-7,-8,-10,-11,-12,-13,10,-76,-77,-78,-79,-80,-81,-82,-83,10,10,10,10,10,10,10,10,10,-5,-9,-32,10,10,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-62,10,-68,-69,-33,10,10,-6,-34,10,-35,-63,-36,]),'BOOLEAN':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,134,138,140,146,148,159,161,162,163,165,167,170,171,172,175,176,177,184,185,],[11,11,11,11,11,-4,-6,-7,-8,-10,-11,-12,-13,11,-76,-77,-78,-79,-80,-81,-82,-83,11,11,11,11,11,11,11,11,11,-5,-9,-32,11,11,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-62,11,-68,-69,-33,11,11,-6,-34,11,-35,-63,-36,]),'NULL':([0,2,6,7,15,16,17,18,19,21,22,23,24,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,134,138,140,146,148,159,161,162,163,165,167,170,171,172,175,176,177,184,185,],[12,12,12,12,12,-4,-6,-7,-8,-10,-11,-12,-13,12,-76,-77,-78,-79,-80,-81,-82,-83,12,12,12,12,12,12,12,12,12,-5,-9,-32,12,12,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-62,12,-68,-69,-33,12,12,-6,-34,12,-35,-63,-36,]),'IDENTIFIER':([0,2,6,7,15,16,17,18,19,21,22,23,24,26,33,34,35,36,37,38,39,40,41,48,49,50,51,52,53,54,58,61,63,64,65,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,98,111,118,119,134,138,140,146,148,159,161,162,163,165,167,170,171,172,175,176,177,184,185,],[14,14,14,14,14,-4,-6,-7,-8,-10,-11,-12,-13,66,14,-76,-77,-78,-79,-80,-81,-82,-83,14,14,14,14,14,14,14,14,14,-5,-9,-32,14,14,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-62,14,-68,-69,-33,14,14,-6,-34,14,-35,-63,-36,]),'$end':([1,3,4,5,8,9,10,11,12,13,32,57,59,62,85,87,88,90,91,92,93,94,95,96,97,103,137,149,150,151,152,153,154,],[0,-2,-3,-70,-49,-48,-50,-51,-52,-53,-49,-75,-48,-1,-71,-90,-91,-89,-54,-55,-56,-57,-58,-59,-60,-92,-61,-74,-95,-72,-73,-93,-94,]),'CLOSE_TAG':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,163,165,167,175,177,184,185,],[-47,62,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,-68,-69,-33,-34,-35,-63,-36,]),'FUNCTION':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[26,26,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,26,-68,-69,-33,26,-6,-34,-35,-63,-36,]),'IF':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[28,28,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,28,-68,-69,-33,28,-6,-34,-35,-63,-36,]),'WHILE':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[29,29,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,29,-68,-69,-33,29,-6,-34,-35,-63,-36,]),'FOR':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[30,30,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,30,-68,-69,-33,30,-6,-34,-35,-63,-36,]),'ECHO':([2,15,16,17,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[31,31,-4,-6,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,31,-68,-69,-33,31,-6,-34,-35,-63,-36,]),'DOUBLE_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[34,-70,-49,-48,-50,-51,-52,-53,-49,34,34,-48,34,-54,-55,-56,-57,-58,-59,-60,34,34,34,34,34,34,-61,34,-72,34,34,]),'NOT_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[35,-70,-49,-48,-50,-51,-52,-53,-49,35,35,-48,35,-54,-55,-56,-57,-58,-59,-60,35,35,35,35,35,35,-61,35,-72,35,35,]),'GREATER_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,160,164,],[36,-70,-49,-48,-50,-51,-52,-53,-49,36,36,-48,36,-54,-55,-56,-57,-58,-59,-60,36,36,36,36,36,36,-61,36,-72,36,170,36,]),'LESS_THAN':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[37,-70,-49,-48,-50,-51,-52,-53,-49,37,37,-48,37,-54,-55,-56,-57,-58,-59,-60,37,37,37,37,37,37,-61,37,-72,37,37,]),'GREATER_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[38,-70,-49,-48,-50,-51,-52,-53,-49,38,38,-48,38,-54,-55,-56,-57,-58,-59,-60,38,38,38,38,38,38,-61,38,-72,38,38,]),'LESS_THAN_OR_EQUALS':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[39,-70,-49,-48,-50,-51,-52,-53,-49,39,39,-48,39,-54,-55,-56,-57,-58,-59,-60,39,39,39,39,39,39,-61,39,-72,39,39,]),'AND':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[40,-70,-49,-48,-50,-51,-52,-53,-49,40,40,-48,40,-54,-55,-56,-57,-58,-59,-60,40,40,40,40,40,40,-61,40,-72,40,40,]),'OR':([3,5,8,9,10,11,12,13,32,55,57,59,85,91,92,93,94,95,96,97,99,117,121,122,131,133,137,149,151,152,164,],[41,-70,-49,-48,-50,-51,-52,-53,-49,41,41,-48,41,-54,-55,-56,-57,-58,-59,-60,41,41,41,41,41,41,-61,41,-72,41,41,]),'PLUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,69,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,115,126,130,132,135,137,142,150,153,154,157,174,181,],[43,48,-49,43,-50,-51,-52,-53,48,69,-49,43,-48,120,43,43,-89,-54,-55,-56,-57,-58,48,48,43,43,43,69,48,-48,48,43,69,48,43,43,-61,48,43,-93,43,48,48,48,]),'DIVIDE':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,115,130,132,135,137,142,150,153,154,157,174,181,],[44,51,-49,44,-50,-51,-52,-53,51,-48,-49,44,-48,44,44,-89,51,51,-56,-57,-58,51,51,44,44,44,-48,51,-48,51,44,51,44,44,-61,51,44,-93,44,51,51,51,]),'MINUS':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,115,130,132,135,137,142,150,153,154,157,174,181,],[45,49,-49,45,-50,-51,-52,-53,49,-48,-49,45,-48,45,45,-89,-54,-55,-56,-57,-58,49,49,45,45,45,-48,49,-48,49,45,49,45,45,-61,49,45,-93,45,49,49,49,]),'MULTIPLY':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,115,130,132,135,137,142,150,153,154,157,174,181,],[46,50,-49,46,-50,-51,-52,-53,50,-48,-49,46,-48,46,46,-89,50,50,-56,-57,-58,50,50,46,46,46,-48,50,-48,50,46,50,46,46,-61,50,46,-93,46,50,50,50,]),'MODULO':([4,5,8,9,10,11,12,13,25,27,32,56,59,87,88,90,91,92,93,94,95,96,97,101,102,103,108,110,112,113,115,130,132,135,137,142,150,153,154,157,174,181,],[47,52,-49,47,-50,-51,-52,-53,52,-48,-49,47,-48,47,47,-89,52,52,-56,-57,-58,52,52,47,47,47,-48,52,-48,52,47,52,47,47,-61,52,47,-93,47,52,52,52,]),'CLOSE_PARENTHESIS':([5,8,9,10,11,12,13,32,55,56,57,59,61,84,85,87,88,90,91,92,93,94,95,96,97,103,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,127,128,129,130,131,132,133,135,137,139,149,150,151,152,153,154,155,158,166,168,173,178,179,180,],[-70,-49,-48,-50,-51,-52,-53,-49,99,101,-75,-48,-47,-47,-71,-90,-91,-89,-54,-55,-56,-57,-58,-59,-60,-92,137,-37,-39,-40,-41,-42,-47,-48,-14,-19,-15,-16,-17,-18,144,145,147,-43,-45,-46,149,150,151,153,-61,156,-74,-95,-72,-73,-93,-94,-38,-96,-44,-100,-47,182,-66,-67,]),'SEMICOLON':([5,8,9,10,11,12,13,20,25,27,32,57,59,83,85,87,88,90,91,92,93,94,95,96,97,103,112,113,114,115,116,117,120,123,124,125,137,147,149,150,151,152,153,154,158,164,168,181,],[-70,-49,-48,-50,-51,-52,-53,64,65,-48,-49,-75,-48,-47,-71,-90,-91,-89,-54,-55,-56,-57,-58,-59,-60,-92,-48,-14,-19,-15,-16,-17,-18,146,-64,-65,-61,165,-74,-95,-72,-73,-93,-94,-96,173,-100,183,]),'COMMA':([5,8,9,10,11,12,13,32,57,59,61,84,85,87,88,90,91,92,93,94,95,96,97,103,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,127,128,129,130,137,139,141,143,149,150,151,152,153,154,155,158,159,166,168,169,174,],[-70,-49,-48,-50,-51,-52,-53,-49,-75,-48,-47,-47,-71,-90,-91,-89,-54,-55,-56,-57,-58,-59,-60,-92,138,-37,-39,-40,-41,-42,-47,-48,-14,-19,-15,-16,-17,-47,-18,148,-43,-45,-46,-61,138,159,-99,-74,-95,-72,-73,-93,-94,-38,-96,-47,-44,-100,159,-97,]),'CONCATENATION':([5,8,9,10,11,12,13,25,27,32,59,91,92,93,94,95,96,97,108,110,112,113,130,137,142,157,174,181,],[53,-49,-48,-50,-51,-52,-53,53,-48,-49,-48,-54,-55,-56,-57,-58,-59,-60,-48,53,-48,53,53,-61,53,53,53,53,]),'CONCATENATION_EQUALS':([5,8,9,10,11,12,13,25,27,32,59,91,92,93,94,95,96,97,108,110,112,113,126,130,137,142,157,174,181,],[54,-49,-48,-50,-51,-52,-53,54,75,-49,-48,-54,-55,-56,-57,-58,-59,-60,75,54,-48,54,75,54,-61,54,54,54,54,]),'EQUALS':([10,11,12,13,27,32,59,91,92,93,94,95,96,97,108,126,137,142,],[-50,-51,-52,-53,68,-49,-48,-54,-55,-56,-57,-58,-59,-60,68,68,-61,160,]),'CLOSE_SQUARE_BRACKET':([10,11,12,13,32,59,91,92,93,94,95,96,97,119,137,141,143,157,159,169,174,],[-50,-51,-52,-53,-49,-48,-54,-55,-56,-57,-58,-59,-60,-47,-61,158,-99,168,-47,-98,-97,]),'CLOSE_CURLY_BRACKET':([16,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,183,184,185,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,-47,-68,-69,-33,175,177,-34,-35,185,-63,-36,]),'RETURN':([16,18,19,21,22,23,24,63,64,65,161,162,163,165,167,171,172,175,177,184,185,],[-4,-7,-8,-10,-11,-12,-13,-5,-9,-32,-62,-47,-68,-69,-33,176,-6,-34,-35,-63,-36,]),'PLUS_EQUALS':([27,108,126,],[70,70,70,]),'MINUS_EQUALS':([27,108,126,],[71,71,71,]),'MULTIPLY_EQUALS':([27,108,126,],[72,72,72,]),'DIVIDE_EQUALS':([27,108,126,],[73,73,73,]),'MODULO_EQUALS':([27,108,126,],[74,74,74,]),'LEFT_SHIFT_EQUALS':([27,108,126,],[76,76,76,]),'RIGHT_SHIFT_EQUALS':([27,108,126,],[77,77,77,]),'AND_EQUALS':([27,108,126,],[78,78,78,]),'OR_EQUALS':([27,108,126,],[79,79,79,]),'XOR_EQUALS':([27,108,126,],[80,80,80,]),'OPEN_SQUARE_BRACKET':([68,112,],[119,140,]),'OPEN_CURLY_BRACKET':([144,145,156,182,],[162,162,162,162,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'condition':([0,6,7,33,58,68,81,82,86,98,118,134,146,],[3,55,57,85,55,117,121,122,131,133,55,152,164,]),'math_expression':([0,6,42,60,68,89,100,104,118,136,],[4,56,87,103,115,132,135,56,56,154,]),'expression':([0,2,6,7,15,33,48,49,50,51,52,53,54,58,61,67,68,81,82,84,86,98,111,118,119,134,138,140,146,148,159,162,170,171,176,],[5,25,5,5,25,5,91,92,93,94,95,96,97,5,110,113,5,5,5,130,5,5,110,5,142,5,110,157,5,130,142,25,174,25,181,]),'function_call':([0,2,6,7,15,33,48,49,50,51,52,53,54,58,61,67,68,81,82,84,86,98,111,118,119,134,138,140,146,148,159,162,170,171,176,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'statement_list':([2,162,],[15,171,]),'statement':([2,15,162,171,],[16,63,16,63,]),'empty':([2,61,83,84,111,119,159,162,173,],[17,107,125,129,107,143,143,172,180,]),'expression_statement':([2,15,162,171,],[18,18,18,18,]),'function_declaration':([2,15,162,171,],[19,19,19,19,]),'assignment':([2,15,61,83,111,138,162,171,173,],[20,20,109,124,109,109,20,20,179,]),'if_statement':([2,15,162,171,],[21,21,21,21,]),'while_statement':([2,15,162,171,],[22,22,22,22,]),'for_statement':([2,15,162,171,],[23,23,23,23,]),'impresion':([2,15,162,171,],[24,24,24,24,]),'comparison':([3,55,57,85,99,117,121,122,131,133,149,152,164,],[33,98,33,33,134,33,33,33,98,33,134,33,33,]),'math_operator':([4,9,56,87,88,101,102,103,115,132,135,150,154,],[42,60,100,42,60,136,60,42,42,100,42,136,42,]),'assignment_operator':([27,108,126,],[67,67,67,]),'parameter_list':([61,111,],[105,139,]),'parameter':([61,111,138,],[106,106,155,]),'list_access':([67,],[114,]),'array_structure':([68,],[116,]),'for_initialization':([83,],[123,]),'value_parameter_list':([84,],[127,]),'value_parameter':([84,148,],[128,166,]),'key_declaration':([119,159,],[141,169,]),'body_statement_list':([144,145,156,182,],[161,163,167,184,]),'for_update':([173,],[178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG statement_list CLOSE_TAG','program',3,'p_program','main.py',41),
  ('program -> condition','program',1,'p_program','main.py',42),
  ('program -> math_expression','program',1,'p_program','main.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',48),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','main.py',49),
  ('statement_list -> empty','statement_list',1,'p_statement_list','main.py',50),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',55),
  ('statement -> function_declaration','statement',1,'p_statement','main.py',56),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','main.py',57),
  ('statement -> if_statement','statement',1,'p_statement','main.py',58),
  ('statement -> while_statement','statement',1,'p_statement','main.py',59),
  ('statement -> for_statement','statement',1,'p_statement','main.py',60),
  ('statement -> impresion','statement',1,'p_statement','main.py',61),
  ('assignment -> VARIABLE assignment_operator expression','assignment',3,'p_assignment','main.py',66),
  ('assignment -> VARIABLE EQUALS math_expression','assignment',3,'p_assignment','main.py',67),
  ('assignment -> VARIABLE EQUALS array_structure','assignment',3,'p_assignment','main.py',68),
  ('assignment -> VARIABLE EQUALS condition','assignment',3,'p_assignment','main.py',69),
  ('assignment -> VARIABLE PLUS PLUS','assignment',3,'p_assignment','main.py',70),
  ('assignment -> VARIABLE assignment_operator list_access','assignment',3,'p_assignment','main.py',71),
  ('assignment_operator -> PLUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',77),
  ('assignment_operator -> MINUS_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',78),
  ('assignment_operator -> MULTIPLY_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',79),
  ('assignment_operator -> DIVIDE_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',80),
  ('assignment_operator -> MODULO_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',81),
  ('assignment_operator -> CONCATENATION_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',82),
  ('assignment_operator -> LEFT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',83),
  ('assignment_operator -> RIGHT_SHIFT_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',84),
  ('assignment_operator -> AND_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',85),
  ('assignment_operator -> OR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',86),
  ('assignment_operator -> XOR_EQUALS','assignment_operator',1,'p_assignment_operator','main.py',87),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','main.py',88),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','main.py',93),
  ('function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list','function_declaration',6,'p_function_declaration','main.py',98),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',103),
  ('body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET','body_statement_list',3,'p_body_statement_list','main.py',104),
  ('body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET','body_statement_list',6,'p_body_statement_list','main.py',105),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','main.py',110),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','main.py',111),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','main.py',112),
  ('parameter -> VARIABLE','parameter',1,'p_parameter','main.py',117),
  ('parameter -> assignment','parameter',1,'p_parameter','main.py',118),
  ('parameter -> expression','parameter',1,'p_parameter','main.py',119),
  ('value_parameter_list -> value_parameter','value_parameter_list',1,'p_value_parameter_list','main.py',124),
  ('value_parameter_list -> value_parameter_list COMMA value_parameter','value_parameter_list',3,'p_value_parameter_list','main.py',125),
  ('value_parameter_list -> empty','value_parameter_list',1,'p_value_parameter_list','main.py',126),
  ('value_parameter -> expression','value_parameter',1,'p_value_parameter','main.py',131),
  ('empty -> <empty>','empty',0,'p_empty','main.py',136),
  ('expression -> VARIABLE','expression',1,'p_expression','main.py',142),
  ('expression -> NUMBER','expression',1,'p_expression','main.py',143),
  ('expression -> STRING','expression',1,'p_expression','main.py',144),
  ('expression -> BOOLEAN','expression',1,'p_expression','main.py',145),
  ('expression -> NULL','expression',1,'p_expression','main.py',146),
  ('expression -> function_call','expression',1,'p_expression','main.py',147),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',148),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',149),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','main.py',150),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',151),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',152),
  ('expression -> expression CONCATENATION expression','expression',3,'p_expression','main.py',153),
  ('expression -> expression CONCATENATION_EQUALS expression','expression',3,'p_expression','main.py',154),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS','function_call',4,'p_function_call','main.py',159),
  ('if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','if_statement',5,'p_if_statement','main.py',164),
  ('for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list','for_statement',9,'p_for_statement','main.py',169),
  ('for_initialization -> assignment','for_initialization',1,'p_for_initialization','main.py',174),
  ('for_initialization -> empty','for_initialization',1,'p_for_initialization','main.py',175),
  ('for_update -> assignment','for_update',1,'p_for_update','main.py',180),
  ('for_update -> empty','for_update',1,'p_for_update','main.py',181),
  ('while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list','while_statement',5,'p_while_statement','main.py',186),
  ('impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON','impresion',5,'p_impresion','main.py',191),
  ('condition -> expression','condition',1,'p_condition','main.py',196),
  ('condition -> condition comparison condition','condition',3,'p_condition','main.py',197),
  ('condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',198),
  ('condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition','condition',5,'p_condition','main.py',199),
  ('condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS','condition',5,'p_condition','main.py',200),
  ('condition -> NOT condition','condition',2,'p_condition','main.py',201),
  ('comparison -> DOUBLE_EQUALS','comparison',1,'p_comparison','main.py',206),
  ('comparison -> NOT_EQUALS','comparison',1,'p_comparison','main.py',207),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','main.py',208),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','main.py',209),
  ('comparison -> GREATER_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',210),
  ('comparison -> LESS_THAN_OR_EQUALS','comparison',1,'p_comparison','main.py',211),
  ('comparison -> AND','comparison',1,'p_comparison','main.py',212),
  ('comparison -> OR','comparison',1,'p_comparison','main.py',213),
  ('math_operator -> PLUS','math_operator',1,'p_math_operator','main.py',218),
  ('math_operator -> DIVIDE','math_operator',1,'p_math_operator','main.py',219),
  ('math_operator -> MINUS','math_operator',1,'p_math_operator','main.py',220),
  ('math_operator -> MULTIPLY','math_operator',1,'p_math_operator','main.py',221),
  ('math_operator -> MODULO','math_operator',1,'p_math_operator','main.py',222),
  ('math_expression -> NUMBER','math_expression',1,'p_math_expression','main.py',227),
  ('math_expression -> math_expression math_operator math_expression','math_expression',3,'p_math_expression','main.py',228),
  ('math_expression -> math_expression math_operator VARIABLE','math_expression',3,'p_math_expression','main.py',229),
  ('math_expression -> VARIABLE math_operator math_expression','math_expression',3,'p_math_expression','main.py',230),
  ('math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',231),
  ('math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression','math_expression',5,'p_math_expression','main.py',232),
  ('math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS','math_expression',5,'p_math_expression','main.py',233),
  ('array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET','array_structure',3,'p_array_structure','main.py',238),
  ('key_declaration -> expression EQUALS GREATER_THAN expression','key_declaration',4,'p_key_declaration','main.py',243),
  ('key_declaration -> key_declaration COMMA key_declaration','key_declaration',3,'p_key_declaration','main.py',244),
  ('key_declaration -> empty','key_declaration',1,'p_key_declaration','main.py',245),
  ('list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET','list_access',4,'p_list_access','main.py',250),
]
