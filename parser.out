Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAY
    AS
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    CLOSE_TAG
    COLON
    COMMENT
    CONST
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    DOUBLE_COLON
    ELSE
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FOR
    OPEN_TAG
    OPEN_TAG_WITH_ECHO
    RETURN
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> condition
Rule 3     program -> math_expression
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> expression_statement
Rule 7     statement -> function_declaration
Rule 8     statement -> assignment
Rule 9     statement -> if_statement
Rule 10    statement -> impresion
Rule 11    assignment -> VARIABLE EQUALS expression SEMICOLON
Rule 12    assignment -> VARIABLE EQUALS math_expression SEMICOLON
Rule 13    assignment -> VARIABLE EQUALS array_structure SEMICOLON
Rule 14    assignment -> VARIABLE EQUALS condition SEMICOLON
Rule 15    expression_statement -> expression SEMICOLON
Rule 16    function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
Rule 17    body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
Rule 18    body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
Rule 19    parameter_list -> parameter
Rule 20    parameter_list -> parameter_list COMMA parameter
Rule 21    parameter_list -> empty
Rule 22    parameter -> VARIABLE
Rule 23    value_parameter_list -> value_parameter
Rule 24    value_parameter_list -> value_parameter_list COMMA value_parameter
Rule 25    value_parameter_list -> empty
Rule 26    value_parameter -> expression
Rule 27    empty -> <empty>
Rule 28    expression -> VARIABLE
Rule 29    expression -> NUMBER
Rule 30    expression -> STRING
Rule 31    expression -> BOOLEAN
Rule 32    expression -> NULL
Rule 33    expression -> function_call
Rule 34    expression -> expression PLUS expression
Rule 35    expression -> expression MINUS expression
Rule 36    expression -> expression MULTIPLY expression
Rule 37    expression -> expression DIVIDE expression
Rule 38    expression -> expression MODULO expression
Rule 39    expression -> expression CONCATENATION expression
Rule 40    expression -> expression CONCATENATION_ASSIGNMENT expression
Rule 41    function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 42    if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 43    impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
Rule 44    condition -> expression
Rule 45    condition -> condition comparison condition
Rule 46    condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
Rule 47    condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
Rule 48    condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
Rule 49    condition -> NOT condition
Rule 50    comparison -> DOUBLE_EQUALS
Rule 51    comparison -> NOT_EQUALS
Rule 52    comparison -> GREATER_THAN
Rule 53    comparison -> LESS_THAN
Rule 54    comparison -> GREATER_THAN_OR_EQUALS
Rule 55    comparison -> LESS_THAN_OR_EQUALS
Rule 56    comparison -> AND
Rule 57    comparison -> OR
Rule 58    math_operator -> PLUS
Rule 59    math_operator -> DIVIDE
Rule 60    math_operator -> MINUS
Rule 61    math_operator -> MULTIPLY
Rule 62    math_operator -> MODULO
Rule 63    math_expression -> NUMBER
Rule 64    math_expression -> math_expression math_operator math_expression
Rule 65    math_expression -> math_expression math_operator VARIABLE
Rule 66    math_expression -> VARIABLE math_operator math_expression
Rule 67    math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
Rule 68    math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
Rule 69    math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
Rule 70    array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
Rule 71    key_declaration -> expression EQUALS GREATER_THAN expression
Rule 72    key_declaration -> key_declaration COMMA key_declaration
Rule 73    key_declaration -> empty

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 56
ARRAY                : 
AS                   : 
BOOLEAN              : 31
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_CURLY_BRACKET  : 17 18
CLOSE_PARENTHESIS    : 16 41 42 43 46 47 48 67 68 69
CLOSE_SQUARE_BRACKET : 70
CLOSE_TAG            : 
COLON                : 
COMMA                : 20 24 72
COMMENT              : 
CONCATENATION        : 39
CONCATENATION_ASSIGNMENT : 40
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 
DIE                  : 
DIVIDE               : 37 59
DO                   : 
DOUBLE_COLON         : 
DOUBLE_EQUALS        : 50
ECHO                 : 43
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 11 12 13 14 71
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FOR                  : 
FUNCTION             : 16
GREATER_THAN         : 52 71
GREATER_THAN_OR_EQUALS : 54
IDENTIFIER           : 16 41
IF                   : 42
LESS_THAN            : 53
LESS_THAN_OR_EQUALS  : 55
MINUS                : 35 60
MODULO               : 38 62
MULTIPLY             : 36 61
NOT                  : 49
NOT_EQUALS           : 51
NULL                 : 32
NUMBER               : 29 63
OPEN_CURLY_BRACKET   : 17 18
OPEN_PARENTHESIS     : 16 41 42 43 46 47 48 67 68 69
OPEN_SQUARE_BRACKET  : 70
OPEN_TAG             : 
OPEN_TAG_WITH_ECHO   : 
OR                   : 57
PLUS                 : 34 58
RETURN               : 
SEMICOLON            : 11 12 13 14 15 43
STRING               : 30
VARIABLE             : 11 12 13 14 22 28 65 66
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

array_structure      : 13
assignment           : 8
body_statement_list  : 16 42
comparison           : 45 46 47 48
condition            : 2 14 42 45 45 46 46 47 47 48 48 49
empty                : 18 21 25 73
expression           : 11 15 26 34 34 35 35 36 36 37 37 38 38 39 39 40 40 44 71 71
expression_statement : 6
function_call        : 33
function_declaration : 7
if_statement         : 9
impresion            : 10
key_declaration      : 70 72 72
math_expression      : 3 12 64 64 65 66 67 67 68 68 69 69
math_operator        : 64 65 66 67 68 69
parameter            : 19 20
parameter_list       : 16 20
program              : 0
statement            : 4 5
statement_list       : 1 5 17
value_parameter      : 23 24
value_parameter_list : 24 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> . condition
    (3) program -> . math_expression
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . impresion
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (15) expression_statement -> . expression SEMICOLON
    (16) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (11) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (12) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (13) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (14) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (42) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (43) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 10
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    FUNCTION        shift and go to state 20
    IF              shift and go to state 22
    ECHO            shift and go to state 23
    IDENTIFIER      shift and go to state 21

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    condition                      shift and go to state 3
    math_expression                shift and go to state 4
    statement                      shift and go to state 5
    expression                     shift and go to state 6
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    impresion                      shift and go to state 15
    function_call                  shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . impresion
    (15) expression_statement -> . expression SEMICOLON
    (16) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (11) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (12) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (13) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (14) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (42) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (43) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    $end            reduce using rule 1 (program -> statement_list .)
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 26
    IF              shift and go to state 22
    ECHO            shift and go to state 23
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    statement                      shift and go to state 24
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    impresion                      shift and go to state 15
    expression                     shift and go to state 25
    function_call                  shift and go to state 19

state 3

    (2) program -> condition .
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    $end            reduce using rule 2 (program -> condition .)
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 28

state 4

    (3) program -> math_expression .
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    $end            reduce using rule 3 (program -> math_expression .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 37

state 5

    (4) statement_list -> statement .

    FUNCTION        reduce using rule 4 (statement_list -> statement .)
    VARIABLE        reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    ECHO            reduce using rule 4 (statement_list -> statement .)
    NUMBER          reduce using rule 4 (statement_list -> statement .)
    STRING          reduce using rule 4 (statement_list -> statement .)
    BOOLEAN         reduce using rule 4 (statement_list -> statement .)
    NULL            reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    CLOSE_CURLY_BRACKET reduce using rule 4 (statement_list -> statement .)


state 6

    (44) condition -> expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression
    (15) expression_statement -> expression . SEMICOLON

    DOUBLE_EQUALS   reduce using rule 44 (condition -> expression .)
    NOT_EQUALS      reduce using rule 44 (condition -> expression .)
    GREATER_THAN    reduce using rule 44 (condition -> expression .)
    LESS_THAN       reduce using rule 44 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    AND             reduce using rule 44 (condition -> expression .)
    OR              reduce using rule 44 (condition -> expression .)
    $end            reduce using rule 44 (condition -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49
    SEMICOLON       shift and go to state 50


state 7

    (46) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (67) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 54
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 51
    math_expression                shift and go to state 52
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 8

    (49) condition -> NOT . condition
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 55
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 9

    (63) math_expression -> NUMBER .
    (29) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 29 (expression -> NUMBER .)
    PLUS            reduce using rule 29 (expression -> NUMBER .)
    MINUS           reduce using rule 29 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 29 (expression -> NUMBER .)
    DIVIDE          reduce using rule 29 (expression -> NUMBER .)
    MODULO          reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 29 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 29 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 29 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    AND             reduce using rule 29 (expression -> NUMBER .)
    OR              reduce using rule 29 (expression -> NUMBER .)
    $end            reduce using rule 29 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 29 (expression -> NUMBER .)

  ! PLUS            [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! $end            [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 63 (math_expression -> NUMBER .) ]


state 10

    (66) math_expression -> VARIABLE . math_operator math_expression
    (28) expression -> VARIABLE .
    (11) assignment -> VARIABLE . EQUALS expression SEMICOLON
    (12) assignment -> VARIABLE . EQUALS math_expression SEMICOLON
    (13) assignment -> VARIABLE . EQUALS array_structure SEMICOLON
    (14) assignment -> VARIABLE . EQUALS condition SEMICOLON
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 28 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 28 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 28 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    AND             reduce using rule 28 (expression -> VARIABLE .)
    OR              reduce using rule 28 (expression -> VARIABLE .)
    $end            reduce using rule 28 (expression -> VARIABLE .)
    EQUALS          shift and go to state 59
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 28 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 58

state 11

    (6) statement -> expression_statement .

    FUNCTION        reduce using rule 6 (statement -> expression_statement .)
    VARIABLE        reduce using rule 6 (statement -> expression_statement .)
    IF              reduce using rule 6 (statement -> expression_statement .)
    ECHO            reduce using rule 6 (statement -> expression_statement .)
    NUMBER          reduce using rule 6 (statement -> expression_statement .)
    STRING          reduce using rule 6 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 6 (statement -> expression_statement .)
    NULL            reduce using rule 6 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> expression_statement .)
    $end            reduce using rule 6 (statement -> expression_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 6 (statement -> expression_statement .)


state 12

    (7) statement -> function_declaration .

    FUNCTION        reduce using rule 7 (statement -> function_declaration .)
    VARIABLE        reduce using rule 7 (statement -> function_declaration .)
    IF              reduce using rule 7 (statement -> function_declaration .)
    ECHO            reduce using rule 7 (statement -> function_declaration .)
    NUMBER          reduce using rule 7 (statement -> function_declaration .)
    STRING          reduce using rule 7 (statement -> function_declaration .)
    BOOLEAN         reduce using rule 7 (statement -> function_declaration .)
    NULL            reduce using rule 7 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> function_declaration .)
    $end            reduce using rule 7 (statement -> function_declaration .)
    CLOSE_CURLY_BRACKET reduce using rule 7 (statement -> function_declaration .)


state 13

    (8) statement -> assignment .

    FUNCTION        reduce using rule 8 (statement -> assignment .)
    VARIABLE        reduce using rule 8 (statement -> assignment .)
    IF              reduce using rule 8 (statement -> assignment .)
    ECHO            reduce using rule 8 (statement -> assignment .)
    NUMBER          reduce using rule 8 (statement -> assignment .)
    STRING          reduce using rule 8 (statement -> assignment .)
    BOOLEAN         reduce using rule 8 (statement -> assignment .)
    NULL            reduce using rule 8 (statement -> assignment .)
    IDENTIFIER      reduce using rule 8 (statement -> assignment .)
    $end            reduce using rule 8 (statement -> assignment .)
    CLOSE_CURLY_BRACKET reduce using rule 8 (statement -> assignment .)


state 14

    (9) statement -> if_statement .

    FUNCTION        reduce using rule 9 (statement -> if_statement .)
    VARIABLE        reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    ECHO            reduce using rule 9 (statement -> if_statement .)
    NUMBER          reduce using rule 9 (statement -> if_statement .)
    STRING          reduce using rule 9 (statement -> if_statement .)
    BOOLEAN         reduce using rule 9 (statement -> if_statement .)
    NULL            reduce using rule 9 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 9 (statement -> if_statement .)


state 15

    (10) statement -> impresion .

    FUNCTION        reduce using rule 10 (statement -> impresion .)
    VARIABLE        reduce using rule 10 (statement -> impresion .)
    IF              reduce using rule 10 (statement -> impresion .)
    ECHO            reduce using rule 10 (statement -> impresion .)
    NUMBER          reduce using rule 10 (statement -> impresion .)
    STRING          reduce using rule 10 (statement -> impresion .)
    BOOLEAN         reduce using rule 10 (statement -> impresion .)
    NULL            reduce using rule 10 (statement -> impresion .)
    IDENTIFIER      reduce using rule 10 (statement -> impresion .)
    $end            reduce using rule 10 (statement -> impresion .)
    CLOSE_CURLY_BRACKET reduce using rule 10 (statement -> impresion .)


state 16

    (30) expression -> STRING .

    PLUS            reduce using rule 30 (expression -> STRING .)
    MINUS           reduce using rule 30 (expression -> STRING .)
    MULTIPLY        reduce using rule 30 (expression -> STRING .)
    DIVIDE          reduce using rule 30 (expression -> STRING .)
    MODULO          reduce using rule 30 (expression -> STRING .)
    CONCATENATION   reduce using rule 30 (expression -> STRING .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> STRING .)
    SEMICOLON       reduce using rule 30 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 30 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 30 (expression -> STRING .)
    GREATER_THAN    reduce using rule 30 (expression -> STRING .)
    LESS_THAN       reduce using rule 30 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 30 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 30 (expression -> STRING .)
    AND             reduce using rule 30 (expression -> STRING .)
    OR              reduce using rule 30 (expression -> STRING .)
    $end            reduce using rule 30 (expression -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 30 (expression -> STRING .)
    COMMA           reduce using rule 30 (expression -> STRING .)
    EQUALS          reduce using rule 30 (expression -> STRING .)
    CLOSE_SQUARE_BRACKET reduce using rule 30 (expression -> STRING .)


state 17

    (31) expression -> BOOLEAN .

    PLUS            reduce using rule 31 (expression -> BOOLEAN .)
    MINUS           reduce using rule 31 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 31 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 31 (expression -> BOOLEAN .)
    MODULO          reduce using rule 31 (expression -> BOOLEAN .)
    CONCATENATION   reduce using rule 31 (expression -> BOOLEAN .)
    CONCATENATION_ASSIGNMENT reduce using rule 31 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 31 (expression -> BOOLEAN .)
    DOUBLE_EQUALS   reduce using rule 31 (expression -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 31 (expression -> BOOLEAN .)
    GREATER_THAN    reduce using rule 31 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 31 (expression -> BOOLEAN .)
    GREATER_THAN_OR_EQUALS reduce using rule 31 (expression -> BOOLEAN .)
    LESS_THAN_OR_EQUALS reduce using rule 31 (expression -> BOOLEAN .)
    AND             reduce using rule 31 (expression -> BOOLEAN .)
    OR              reduce using rule 31 (expression -> BOOLEAN .)
    $end            reduce using rule 31 (expression -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 31 (expression -> BOOLEAN .)
    COMMA           reduce using rule 31 (expression -> BOOLEAN .)
    EQUALS          reduce using rule 31 (expression -> BOOLEAN .)
    CLOSE_SQUARE_BRACKET reduce using rule 31 (expression -> BOOLEAN .)


state 18

    (32) expression -> NULL .

    PLUS            reduce using rule 32 (expression -> NULL .)
    MINUS           reduce using rule 32 (expression -> NULL .)
    MULTIPLY        reduce using rule 32 (expression -> NULL .)
    DIVIDE          reduce using rule 32 (expression -> NULL .)
    MODULO          reduce using rule 32 (expression -> NULL .)
    CONCATENATION   reduce using rule 32 (expression -> NULL .)
    CONCATENATION_ASSIGNMENT reduce using rule 32 (expression -> NULL .)
    SEMICOLON       reduce using rule 32 (expression -> NULL .)
    DOUBLE_EQUALS   reduce using rule 32 (expression -> NULL .)
    NOT_EQUALS      reduce using rule 32 (expression -> NULL .)
    GREATER_THAN    reduce using rule 32 (expression -> NULL .)
    LESS_THAN       reduce using rule 32 (expression -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 32 (expression -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 32 (expression -> NULL .)
    AND             reduce using rule 32 (expression -> NULL .)
    OR              reduce using rule 32 (expression -> NULL .)
    $end            reduce using rule 32 (expression -> NULL .)
    CLOSE_PARENTHESIS reduce using rule 32 (expression -> NULL .)
    COMMA           reduce using rule 32 (expression -> NULL .)
    EQUALS          reduce using rule 32 (expression -> NULL .)
    CLOSE_SQUARE_BRACKET reduce using rule 32 (expression -> NULL .)


state 19

    (33) expression -> function_call .

    PLUS            reduce using rule 33 (expression -> function_call .)
    MINUS           reduce using rule 33 (expression -> function_call .)
    MULTIPLY        reduce using rule 33 (expression -> function_call .)
    DIVIDE          reduce using rule 33 (expression -> function_call .)
    MODULO          reduce using rule 33 (expression -> function_call .)
    CONCATENATION   reduce using rule 33 (expression -> function_call .)
    CONCATENATION_ASSIGNMENT reduce using rule 33 (expression -> function_call .)
    SEMICOLON       reduce using rule 33 (expression -> function_call .)
    DOUBLE_EQUALS   reduce using rule 33 (expression -> function_call .)
    NOT_EQUALS      reduce using rule 33 (expression -> function_call .)
    GREATER_THAN    reduce using rule 33 (expression -> function_call .)
    LESS_THAN       reduce using rule 33 (expression -> function_call .)
    GREATER_THAN_OR_EQUALS reduce using rule 33 (expression -> function_call .)
    LESS_THAN_OR_EQUALS reduce using rule 33 (expression -> function_call .)
    AND             reduce using rule 33 (expression -> function_call .)
    OR              reduce using rule 33 (expression -> function_call .)
    $end            reduce using rule 33 (expression -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 33 (expression -> function_call .)
    COMMA           reduce using rule 33 (expression -> function_call .)
    EQUALS          reduce using rule 33 (expression -> function_call .)
    CLOSE_SQUARE_BRACKET reduce using rule 33 (expression -> function_call .)


state 20

    (16) function_declaration -> FUNCTION . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    IDENTIFIER      shift and go to state 60


state 21

    (41) function_call -> IDENTIFIER . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 61


state 22

    (42) if_statement -> IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 62


state 23

    (43) impresion -> ECHO . OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 63


state 24

    (5) statement_list -> statement_list statement .

    FUNCTION        reduce using rule 5 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 5 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 5 (statement_list -> statement_list statement .)
    STRING          reduce using rule 5 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 5 (statement_list -> statement_list statement .)
    NULL            reduce using rule 5 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    CLOSE_CURLY_BRACKET reduce using rule 5 (statement_list -> statement_list statement .)


state 25

    (15) expression_statement -> expression . SEMICOLON
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    SEMICOLON       shift and go to state 50
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49


state 26

    (11) assignment -> VARIABLE . EQUALS expression SEMICOLON
    (12) assignment -> VARIABLE . EQUALS math_expression SEMICOLON
    (13) assignment -> VARIABLE . EQUALS array_structure SEMICOLON
    (14) assignment -> VARIABLE . EQUALS condition SEMICOLON
    (28) expression -> VARIABLE .

    EQUALS          shift and go to state 59
    SEMICOLON       reduce using rule 28 (expression -> VARIABLE .)
    PLUS            reduce using rule 28 (expression -> VARIABLE .)
    MINUS           reduce using rule 28 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 28 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 28 (expression -> VARIABLE .)
    MODULO          reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 28 (expression -> VARIABLE .)


state 27

    (29) expression -> NUMBER .

    SEMICOLON       reduce using rule 29 (expression -> NUMBER .)
    PLUS            reduce using rule 29 (expression -> NUMBER .)
    MINUS           reduce using rule 29 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 29 (expression -> NUMBER .)
    DIVIDE          reduce using rule 29 (expression -> NUMBER .)
    MODULO          reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 29 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 29 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    AND             reduce using rule 29 (expression -> NUMBER .)
    OR              reduce using rule 29 (expression -> NUMBER .)
    $end            reduce using rule 29 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 29 (expression -> NUMBER .)
    COMMA           reduce using rule 29 (expression -> NUMBER .)
    EQUALS          reduce using rule 29 (expression -> NUMBER .)
    CLOSE_SQUARE_BRACKET reduce using rule 29 (expression -> NUMBER .)


state 28

    (45) condition -> condition comparison . condition
    (48) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 65
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 64
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 29

    (50) comparison -> DOUBLE_EQUALS .

    OPEN_PARENTHESIS reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    NOT             reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    VARIABLE        reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    NUMBER          reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    STRING          reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    BOOLEAN         reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    NULL            reduce using rule 50 (comparison -> DOUBLE_EQUALS .)
    IDENTIFIER      reduce using rule 50 (comparison -> DOUBLE_EQUALS .)


state 30

    (51) comparison -> NOT_EQUALS .

    OPEN_PARENTHESIS reduce using rule 51 (comparison -> NOT_EQUALS .)
    NOT             reduce using rule 51 (comparison -> NOT_EQUALS .)
    VARIABLE        reduce using rule 51 (comparison -> NOT_EQUALS .)
    NUMBER          reduce using rule 51 (comparison -> NOT_EQUALS .)
    STRING          reduce using rule 51 (comparison -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 51 (comparison -> NOT_EQUALS .)
    NULL            reduce using rule 51 (comparison -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 51 (comparison -> NOT_EQUALS .)


state 31

    (52) comparison -> GREATER_THAN .

    OPEN_PARENTHESIS reduce using rule 52 (comparison -> GREATER_THAN .)
    NOT             reduce using rule 52 (comparison -> GREATER_THAN .)
    VARIABLE        reduce using rule 52 (comparison -> GREATER_THAN .)
    NUMBER          reduce using rule 52 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 52 (comparison -> GREATER_THAN .)
    BOOLEAN         reduce using rule 52 (comparison -> GREATER_THAN .)
    NULL            reduce using rule 52 (comparison -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 52 (comparison -> GREATER_THAN .)


state 32

    (53) comparison -> LESS_THAN .

    OPEN_PARENTHESIS reduce using rule 53 (comparison -> LESS_THAN .)
    NOT             reduce using rule 53 (comparison -> LESS_THAN .)
    VARIABLE        reduce using rule 53 (comparison -> LESS_THAN .)
    NUMBER          reduce using rule 53 (comparison -> LESS_THAN .)
    STRING          reduce using rule 53 (comparison -> LESS_THAN .)
    BOOLEAN         reduce using rule 53 (comparison -> LESS_THAN .)
    NULL            reduce using rule 53 (comparison -> LESS_THAN .)
    IDENTIFIER      reduce using rule 53 (comparison -> LESS_THAN .)


state 33

    (54) comparison -> GREATER_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    NOT             reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    STRING          reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    NULL            reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 54 (comparison -> GREATER_THAN_OR_EQUALS .)


state 34

    (55) comparison -> LESS_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    NOT             reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    STRING          reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    NULL            reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 55 (comparison -> LESS_THAN_OR_EQUALS .)


state 35

    (56) comparison -> AND .

    OPEN_PARENTHESIS reduce using rule 56 (comparison -> AND .)
    NOT             reduce using rule 56 (comparison -> AND .)
    VARIABLE        reduce using rule 56 (comparison -> AND .)
    NUMBER          reduce using rule 56 (comparison -> AND .)
    STRING          reduce using rule 56 (comparison -> AND .)
    BOOLEAN         reduce using rule 56 (comparison -> AND .)
    NULL            reduce using rule 56 (comparison -> AND .)
    IDENTIFIER      reduce using rule 56 (comparison -> AND .)


state 36

    (57) comparison -> OR .

    OPEN_PARENTHESIS reduce using rule 57 (comparison -> OR .)
    NOT             reduce using rule 57 (comparison -> OR .)
    VARIABLE        reduce using rule 57 (comparison -> OR .)
    NUMBER          reduce using rule 57 (comparison -> OR .)
    STRING          reduce using rule 57 (comparison -> OR .)
    BOOLEAN         reduce using rule 57 (comparison -> OR .)
    NULL            reduce using rule 57 (comparison -> OR .)
    IDENTIFIER      reduce using rule 57 (comparison -> OR .)


state 37

    (64) math_expression -> math_expression math_operator . math_expression
    (65) math_expression -> math_expression math_operator . VARIABLE
    (69) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 67
    OPEN_PARENTHESIS shift and go to state 68
    NUMBER          shift and go to state 69

    math_expression                shift and go to state 66

state 38

    (58) math_operator -> PLUS .

    VARIABLE        reduce using rule 58 (math_operator -> PLUS .)
    OPEN_PARENTHESIS reduce using rule 58 (math_operator -> PLUS .)
    NUMBER          reduce using rule 58 (math_operator -> PLUS .)


state 39

    (59) math_operator -> DIVIDE .

    VARIABLE        reduce using rule 59 (math_operator -> DIVIDE .)
    OPEN_PARENTHESIS reduce using rule 59 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 59 (math_operator -> DIVIDE .)


state 40

    (60) math_operator -> MINUS .

    VARIABLE        reduce using rule 60 (math_operator -> MINUS .)
    OPEN_PARENTHESIS reduce using rule 60 (math_operator -> MINUS .)
    NUMBER          reduce using rule 60 (math_operator -> MINUS .)


state 41

    (61) math_operator -> MULTIPLY .

    VARIABLE        reduce using rule 61 (math_operator -> MULTIPLY .)
    OPEN_PARENTHESIS reduce using rule 61 (math_operator -> MULTIPLY .)
    NUMBER          reduce using rule 61 (math_operator -> MULTIPLY .)


state 42

    (62) math_operator -> MODULO .

    VARIABLE        reduce using rule 62 (math_operator -> MODULO .)
    OPEN_PARENTHESIS reduce using rule 62 (math_operator -> MODULO .)
    NUMBER          reduce using rule 62 (math_operator -> MODULO .)


state 43

    (34) expression -> expression PLUS . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 70
    function_call                  shift and go to state 19

state 44

    (35) expression -> expression MINUS . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 71
    function_call                  shift and go to state 19

state 45

    (36) expression -> expression MULTIPLY . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 72
    function_call                  shift and go to state 19

state 46

    (37) expression -> expression DIVIDE . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 73
    function_call                  shift and go to state 19

state 47

    (38) expression -> expression MODULO . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 74
    function_call                  shift and go to state 19

state 48

    (39) expression -> expression CONCATENATION . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 75
    function_call                  shift and go to state 19

state 49

    (40) expression -> expression CONCATENATION_ASSIGNMENT . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 76
    function_call                  shift and go to state 19

state 50

    (15) expression_statement -> expression SEMICOLON .

    FUNCTION        reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    VARIABLE        reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 15 (expression_statement -> expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 15 (expression_statement -> expression SEMICOLON .)


state 51

    (46) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 78
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 77

state 52

    (67) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 80
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 79

state 53

    (44) condition -> expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_PARENTHESIS reduce using rule 44 (condition -> expression .)
    DOUBLE_EQUALS   reduce using rule 44 (condition -> expression .)
    NOT_EQUALS      reduce using rule 44 (condition -> expression .)
    GREATER_THAN    reduce using rule 44 (condition -> expression .)
    LESS_THAN       reduce using rule 44 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    AND             reduce using rule 44 (condition -> expression .)
    OR              reduce using rule 44 (condition -> expression .)
    $end            reduce using rule 44 (condition -> expression .)
    SEMICOLON       reduce using rule 44 (condition -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49


state 54

    (66) math_expression -> VARIABLE . math_operator math_expression
    (28) expression -> VARIABLE .
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 28 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 28 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 28 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    AND             reduce using rule 28 (expression -> VARIABLE .)
    OR              reduce using rule 28 (expression -> VARIABLE .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 28 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 58

state 55

    (49) condition -> NOT condition .
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 49 (condition -> NOT condition .)
    CLOSE_PARENTHESIS reduce using rule 49 (condition -> NOT condition .)
    SEMICOLON       reduce using rule 49 (condition -> NOT condition .)
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

  ! DOUBLE_EQUALS   [ reduce using rule 49 (condition -> NOT condition .) ]
  ! NOT_EQUALS      [ reduce using rule 49 (condition -> NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 49 (condition -> NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 49 (condition -> NOT condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 49 (condition -> NOT condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 49 (condition -> NOT condition .) ]
  ! AND             [ reduce using rule 49 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 49 (condition -> NOT condition .) ]

    comparison                     shift and go to state 28

state 56

    (46) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 51
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 57

    (28) expression -> VARIABLE .

    PLUS            reduce using rule 28 (expression -> VARIABLE .)
    MINUS           reduce using rule 28 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 28 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 28 (expression -> VARIABLE .)
    MODULO          reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 28 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 28 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    AND             reduce using rule 28 (expression -> VARIABLE .)
    OR              reduce using rule 28 (expression -> VARIABLE .)
    $end            reduce using rule 28 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 28 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 28 (expression -> VARIABLE .)
    COMMA           reduce using rule 28 (expression -> VARIABLE .)
    EQUALS          reduce using rule 28 (expression -> VARIABLE .)
    CLOSE_SQUARE_BRACKET reduce using rule 28 (expression -> VARIABLE .)


state 58

    (66) math_expression -> VARIABLE math_operator . math_expression
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83

    math_expression                shift and go to state 82

state 59

    (11) assignment -> VARIABLE EQUALS . expression SEMICOLON
    (12) assignment -> VARIABLE EQUALS . math_expression SEMICOLON
    (13) assignment -> VARIABLE EQUALS . array_structure SEMICOLON
    (14) assignment -> VARIABLE EQUALS . condition SEMICOLON
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (70) array_structure -> . OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 84
    NUMBER          shift and go to state 89
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    OPEN_PARENTHESIS shift and go to state 90
    OPEN_SQUARE_BRACKET shift and go to state 91
    NOT             shift and go to state 8
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 85
    math_expression                shift and go to state 86
    array_structure                shift and go to state 87
    condition                      shift and go to state 88
    function_call                  shift and go to state 19

state 60

    (16) function_declaration -> FUNCTION IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 92


state 61

    (41) function_call -> IDENTIFIER OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 93


state 62

    (42) if_statement -> IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 94
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 63

    (43) impresion -> ECHO OPEN_PARENTHESIS . value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (23) value_parameter_list -> . value_parameter
    (24) value_parameter_list -> . value_parameter_list COMMA value_parameter
    (25) value_parameter_list -> . empty
    (26) value_parameter -> . expression
    (27) empty -> .
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS reduce using rule 27 (empty -> .)
    COMMA           reduce using rule 27 (empty -> .)
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    value_parameter_list           shift and go to state 95
    value_parameter                shift and go to state 96
    empty                          shift and go to state 97
    expression                     shift and go to state 98
    function_call                  shift and go to state 19

state 64

    (45) condition -> condition comparison condition .
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 45 (condition -> condition comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 45 (condition -> condition comparison condition .)
    SEMICOLON       reduce using rule 45 (condition -> condition comparison condition .)
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

  ! DOUBLE_EQUALS   [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 45 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 28

state 65

    (48) condition -> condition comparison OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS
    (46) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 99
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 66

    (64) math_expression -> math_expression math_operator math_expression .
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 64 (math_expression -> math_expression math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 64 (math_expression -> math_expression math_operator math_expression .)
    SEMICOLON       reduce using rule 64 (math_expression -> math_expression math_operator math_expression .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 37

state 67

    (65) math_expression -> math_expression math_operator VARIABLE .
    (66) math_expression -> VARIABLE . math_operator math_expression
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .)
    SEMICOLON       reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MINUS           [ reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MODULO          [ reduce using rule 65 (math_expression -> math_expression math_operator VARIABLE .) ]

    math_operator                  shift and go to state 58

state 68

    (69) math_expression -> math_expression math_operator OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS
    (67) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83

    math_expression                shift and go to state 100

state 69

    (63) math_expression -> NUMBER .

    PLUS            reduce using rule 63 (math_expression -> NUMBER .)
    DIVIDE          reduce using rule 63 (math_expression -> NUMBER .)
    MINUS           reduce using rule 63 (math_expression -> NUMBER .)
    MULTIPLY        reduce using rule 63 (math_expression -> NUMBER .)
    MODULO          reduce using rule 63 (math_expression -> NUMBER .)
    $end            reduce using rule 63 (math_expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 63 (math_expression -> NUMBER .)
    SEMICOLON       reduce using rule 63 (math_expression -> NUMBER .)


state 70

    (34) expression -> expression PLUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 34 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 34 (expression -> expression PLUS expression .)
    CONCATENATION   reduce using rule 34 (expression -> expression PLUS expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 34 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression PLUS expression .)
    DOUBLE_EQUALS   reduce using rule 34 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 34 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 34 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 34 (expression -> expression PLUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 34 (expression -> expression PLUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 34 (expression -> expression PLUS expression .)
    AND             reduce using rule 34 (expression -> expression PLUS expression .)
    OR              reduce using rule 34 (expression -> expression PLUS expression .)
    $end            reduce using rule 34 (expression -> expression PLUS expression .)
    CLOSE_PARENTHESIS reduce using rule 34 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 34 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 34 (expression -> expression PLUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 34 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47

  ! MULTIPLY        [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 34 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 71

    (35) expression -> expression MINUS expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 35 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 35 (expression -> expression MINUS expression .)
    CONCATENATION   reduce using rule 35 (expression -> expression MINUS expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 35 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 35 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 35 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 35 (expression -> expression MINUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 35 (expression -> expression MINUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 35 (expression -> expression MINUS expression .)
    AND             reduce using rule 35 (expression -> expression MINUS expression .)
    OR              reduce using rule 35 (expression -> expression MINUS expression .)
    $end            reduce using rule 35 (expression -> expression MINUS expression .)
    CLOSE_PARENTHESIS reduce using rule 35 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 35 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 35 (expression -> expression MINUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 35 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47

  ! MULTIPLY        [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 35 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 72

    (36) expression -> expression MULTIPLY expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 36 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 36 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 36 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 36 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 36 (expression -> expression MULTIPLY expression .)
    CONCATENATION   reduce using rule 36 (expression -> expression MULTIPLY expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 36 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression MULTIPLY expression .)
    DOUBLE_EQUALS   reduce using rule 36 (expression -> expression MULTIPLY expression .)
    NOT_EQUALS      reduce using rule 36 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 36 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 36 (expression -> expression MULTIPLY expression .)
    LESS_THAN_OR_EQUALS reduce using rule 36 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 36 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 36 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 36 (expression -> expression MULTIPLY expression .)
    CLOSE_PARENTHESIS reduce using rule 36 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 36 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 36 (expression -> expression MULTIPLY expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 36 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MULTIPLY        [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 73

    (37) expression -> expression DIVIDE expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 37 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 37 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 37 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 37 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 37 (expression -> expression DIVIDE expression .)
    CONCATENATION   reduce using rule 37 (expression -> expression DIVIDE expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 37 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression DIVIDE expression .)
    DOUBLE_EQUALS   reduce using rule 37 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 37 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 37 (expression -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 37 (expression -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUALS reduce using rule 37 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 37 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 37 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 37 (expression -> expression DIVIDE expression .)
    CLOSE_PARENTHESIS reduce using rule 37 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 37 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 37 (expression -> expression DIVIDE expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 37 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MULTIPLY        [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 74

    (38) expression -> expression MODULO expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 38 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 38 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 38 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 38 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 38 (expression -> expression MODULO expression .)
    CONCATENATION   reduce using rule 38 (expression -> expression MODULO expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 38 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression MODULO expression .)
    DOUBLE_EQUALS   reduce using rule 38 (expression -> expression MODULO expression .)
    NOT_EQUALS      reduce using rule 38 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 38 (expression -> expression MODULO expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 38 (expression -> expression MODULO expression .)
    LESS_THAN_OR_EQUALS reduce using rule 38 (expression -> expression MODULO expression .)
    AND             reduce using rule 38 (expression -> expression MODULO expression .)
    OR              reduce using rule 38 (expression -> expression MODULO expression .)
    $end            reduce using rule 38 (expression -> expression MODULO expression .)
    CLOSE_PARENTHESIS reduce using rule 38 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 38 (expression -> expression MODULO expression .)
    EQUALS          reduce using rule 38 (expression -> expression MODULO expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 38 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 43 ]
  ! MINUS           [ shift and go to state 44 ]
  ! MULTIPLY        [ shift and go to state 45 ]
  ! DIVIDE          [ shift and go to state 46 ]
  ! MODULO          [ shift and go to state 47 ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 75

    (39) expression -> expression CONCATENATION expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CONCATENATION   reduce using rule 39 (expression -> expression CONCATENATION expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 39 (expression -> expression CONCATENATION expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression CONCATENATION expression .)
    DOUBLE_EQUALS   reduce using rule 39 (expression -> expression CONCATENATION expression .)
    NOT_EQUALS      reduce using rule 39 (expression -> expression CONCATENATION expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression CONCATENATION expression .)
    LESS_THAN       reduce using rule 39 (expression -> expression CONCATENATION expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 39 (expression -> expression CONCATENATION expression .)
    LESS_THAN_OR_EQUALS reduce using rule 39 (expression -> expression CONCATENATION expression .)
    AND             reduce using rule 39 (expression -> expression CONCATENATION expression .)
    OR              reduce using rule 39 (expression -> expression CONCATENATION expression .)
    $end            reduce using rule 39 (expression -> expression CONCATENATION expression .)
    CLOSE_PARENTHESIS reduce using rule 39 (expression -> expression CONCATENATION expression .)
    COMMA           reduce using rule 39 (expression -> expression CONCATENATION expression .)
    EQUALS          reduce using rule 39 (expression -> expression CONCATENATION expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 39 (expression -> expression CONCATENATION expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 39 (expression -> expression CONCATENATION expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression CONCATENATION expression .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression -> expression CONCATENATION expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression CONCATENATION expression .) ]
  ! MODULO          [ reduce using rule 39 (expression -> expression CONCATENATION expression .) ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 76

    (40) expression -> expression CONCATENATION_ASSIGNMENT expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CONCATENATION   reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    DOUBLE_EQUALS   reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    NOT_EQUALS      reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    LESS_THAN_OR_EQUALS reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    AND             reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    OR              reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    $end            reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CLOSE_PARENTHESIS reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    COMMA           reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    EQUALS          reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MODULO          [ reduce using rule 40 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! CONCATENATION   [ shift and go to state 48 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 49 ]


state 77

    (46) condition -> OPEN_PARENTHESIS condition comparison . condition CLOSE_PARENTHESIS
    (45) condition -> condition comparison . condition
    (48) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 65
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 101
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 78

    (47) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 102

state 79

    (67) math_expression -> OPEN_PARENTHESIS math_expression math_operator . math_expression CLOSE_PARENTHESIS
    (64) math_expression -> math_expression math_operator . math_expression
    (65) math_expression -> math_expression math_operator . VARIABLE
    (69) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 67
    OPEN_PARENTHESIS shift and go to state 68
    NUMBER          shift and go to state 69

    math_expression                shift and go to state 103

state 80

    (68) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 104

state 81

    (66) math_expression -> VARIABLE . math_operator math_expression
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 58

state 82

    (66) math_expression -> VARIABLE math_operator math_expression .
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .)
    SEMICOLON       reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 66 (math_expression -> VARIABLE math_operator math_expression .) ]

    math_operator                  shift and go to state 37

state 83

    (67) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83

    math_expression                shift and go to state 52

state 84

    (28) expression -> VARIABLE .
    (66) math_expression -> VARIABLE . math_operator math_expression
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 28 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 28 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 28 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 28 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 28 (expression -> VARIABLE .)
    AND             reduce using rule 28 (expression -> VARIABLE .)
    OR              reduce using rule 28 (expression -> VARIABLE .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 28 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 28 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 58

state 85

    (11) assignment -> VARIABLE EQUALS expression . SEMICOLON
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression
    (44) condition -> expression .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 105
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49
    DOUBLE_EQUALS   reduce using rule 44 (condition -> expression .)
    NOT_EQUALS      reduce using rule 44 (condition -> expression .)
    GREATER_THAN    reduce using rule 44 (condition -> expression .)
    LESS_THAN       reduce using rule 44 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 44 (condition -> expression .)
    AND             reduce using rule 44 (condition -> expression .)
    OR              reduce using rule 44 (condition -> expression .)

  ! SEMICOLON       [ reduce using rule 44 (condition -> expression .) ]


state 86

    (12) assignment -> VARIABLE EQUALS math_expression . SEMICOLON
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    SEMICOLON       shift and go to state 106
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 37

state 87

    (13) assignment -> VARIABLE EQUALS array_structure . SEMICOLON

    SEMICOLON       shift and go to state 107


state 88

    (14) assignment -> VARIABLE EQUALS condition . SEMICOLON
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    SEMICOLON       shift and go to state 108
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 28

state 89

    (29) expression -> NUMBER .
    (63) math_expression -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 29 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 29 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 29 (expression -> NUMBER .)
    PLUS            reduce using rule 29 (expression -> NUMBER .)
    MINUS           reduce using rule 29 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 29 (expression -> NUMBER .)
    DIVIDE          reduce using rule 29 (expression -> NUMBER .)
    MODULO          reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 29 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 29 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 29 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 29 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 29 (expression -> NUMBER .)
    AND             reduce using rule 29 (expression -> NUMBER .)
    OR              reduce using rule 29 (expression -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! PLUS            [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 63 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 63 (math_expression -> NUMBER .) ]


state 90

    (67) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (46) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 54
    OPEN_PARENTHESIS shift and go to state 90
    NOT             shift and go to state 8
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    math_expression                shift and go to state 52
    condition                      shift and go to state 51
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 91

    (70) array_structure -> OPEN_SQUARE_BRACKET . key_declaration CLOSE_SQUARE_BRACKET
    (71) key_declaration -> . expression EQUALS GREATER_THAN expression
    (72) key_declaration -> . key_declaration COMMA key_declaration
    (73) key_declaration -> . empty
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (27) empty -> .
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    CLOSE_SQUARE_BRACKET reduce using rule 27 (empty -> .)
    COMMA           reduce using rule 27 (empty -> .)
    IDENTIFIER      shift and go to state 21

    key_declaration                shift and go to state 109
    expression                     shift and go to state 110
    empty                          shift and go to state 111
    function_call                  shift and go to state 19

state 92

    (16) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS body_statement_list
    (19) parameter_list -> . parameter
    (20) parameter_list -> . parameter_list COMMA parameter
    (21) parameter_list -> . empty
    (22) parameter -> . VARIABLE
    (27) empty -> .

    VARIABLE        shift and go to state 115
    CLOSE_PARENTHESIS reduce using rule 27 (empty -> .)
    COMMA           reduce using rule 27 (empty -> .)

    parameter_list                 shift and go to state 112
    parameter                      shift and go to state 113
    empty                          shift and go to state 114

state 93

    (41) function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    PLUS            reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CONCATENATION   reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CONCATENATION_ASSIGNMENT reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    AND             reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    OR              reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    EQUALS          reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_SQUARE_BRACKET reduce using rule 41 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 94

    (42) if_statement -> IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 116
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 28

state 95

    (43) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list . CLOSE_PARENTHESIS SEMICOLON
    (24) value_parameter_list -> value_parameter_list . COMMA value_parameter

    CLOSE_PARENTHESIS shift and go to state 117
    COMMA           shift and go to state 118


state 96

    (23) value_parameter_list -> value_parameter .

    CLOSE_PARENTHESIS reduce using rule 23 (value_parameter_list -> value_parameter .)
    COMMA           reduce using rule 23 (value_parameter_list -> value_parameter .)


state 97

    (25) value_parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 25 (value_parameter_list -> empty .)
    COMMA           reduce using rule 25 (value_parameter_list -> empty .)


state 98

    (26) value_parameter -> expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_PARENTHESIS reduce using rule 26 (value_parameter -> expression .)
    COMMA           reduce using rule 26 (value_parameter -> expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49


state 99

    (48) condition -> condition comparison OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS
    (46) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (47) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 119
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

    comparison                     shift and go to state 77

state 100

    (69) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS
    (67) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 120
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

    math_operator                  shift and go to state 79

state 101

    (46) condition -> OPEN_PARENTHESIS condition comparison condition . CLOSE_PARENTHESIS
    (45) condition -> condition comparison condition .
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS shift and go to state 121
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

  ! CLOSE_PARENTHESIS [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 45 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 45 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 28

state 102

    (47) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison . condition
    (44) condition -> . expression
    (45) condition -> . condition comparison condition
    (46) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (47) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (48) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (49) condition -> . NOT condition
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 56
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    condition                      shift and go to state 122
    expression                     shift and go to state 53
    function_call                  shift and go to state 19

state 103

    (67) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression . CLOSE_PARENTHESIS
    (64) math_expression -> math_expression math_operator math_expression .
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CLOSE_PARENTHESIS shift and go to state 123
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! CLOSE_PARENTHESIS [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! PLUS            [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 64 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 37

state 104

    (68) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator . math_expression
    (63) math_expression -> . NUMBER
    (64) math_expression -> . math_expression math_operator math_expression
    (65) math_expression -> . math_expression math_operator VARIABLE
    (66) math_expression -> . VARIABLE math_operator math_expression
    (67) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (68) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (69) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 81
    OPEN_PARENTHESIS shift and go to state 83

    math_expression                shift and go to state 124

state 105

    (11) assignment -> VARIABLE EQUALS expression SEMICOLON .

    FUNCTION        reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    IF              reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    ECHO            reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    BOOLEAN         reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NULL            reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    IDENTIFIER      reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 11 (assignment -> VARIABLE EQUALS expression SEMICOLON .)


state 106

    (12) assignment -> VARIABLE EQUALS math_expression SEMICOLON .

    FUNCTION        reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    VARIABLE        reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    IF              reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    ECHO            reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    NUMBER          reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    STRING          reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    BOOLEAN         reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    NULL            reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    $end            reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 12 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)


state 107

    (13) assignment -> VARIABLE EQUALS array_structure SEMICOLON .

    FUNCTION        reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    VARIABLE        reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    IF              reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    ECHO            reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    NUMBER          reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    STRING          reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    BOOLEAN         reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    NULL            reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    $end            reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 13 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)


state 108

    (14) assignment -> VARIABLE EQUALS condition SEMICOLON .

    FUNCTION        reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    VARIABLE        reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    IF              reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    ECHO            reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    NUMBER          reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    STRING          reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    BOOLEAN         reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    NULL            reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    IDENTIFIER      reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    $end            reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 14 (assignment -> VARIABLE EQUALS condition SEMICOLON .)


state 109

    (70) array_structure -> OPEN_SQUARE_BRACKET key_declaration . CLOSE_SQUARE_BRACKET
    (72) key_declaration -> key_declaration . COMMA key_declaration

    CLOSE_SQUARE_BRACKET shift and go to state 125
    COMMA           shift and go to state 126


state 110

    (71) key_declaration -> expression . EQUALS GREATER_THAN expression
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    EQUALS          shift and go to state 127
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49


state 111

    (73) key_declaration -> empty .

    CLOSE_SQUARE_BRACKET reduce using rule 73 (key_declaration -> empty .)
    COMMA           reduce using rule 73 (key_declaration -> empty .)


state 112

    (16) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS body_statement_list
    (20) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 128
    COMMA           shift and go to state 129


state 113

    (19) parameter_list -> parameter .

    CLOSE_PARENTHESIS reduce using rule 19 (parameter_list -> parameter .)
    COMMA           reduce using rule 19 (parameter_list -> parameter .)


state 114

    (21) parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 21 (parameter_list -> empty .)
    COMMA           reduce using rule 21 (parameter_list -> empty .)


state 115

    (22) parameter -> VARIABLE .

    CLOSE_PARENTHESIS reduce using rule 22 (parameter -> VARIABLE .)
    COMMA           reduce using rule 22 (parameter -> VARIABLE .)


state 116

    (42) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (17) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (18) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 131

    body_statement_list            shift and go to state 130

state 117

    (43) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 132


state 118

    (24) value_parameter_list -> value_parameter_list COMMA . value_parameter
    (26) value_parameter -> . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    value_parameter                shift and go to state 133
    expression                     shift and go to state 98
    function_call                  shift and go to state 19

state 119

    (48) condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .
    (47) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

  ! DOUBLE_EQUALS   [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! NOT_EQUALS      [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN    [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN       [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! AND             [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! OR              [ reduce using rule 48 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]

    comparison                     shift and go to state 102

state 120

    (69) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .
    (68) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! DIVIDE          [ reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MINUS           [ reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MULTIPLY        [ reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MODULO          [ reduce using rule 69 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]

    math_operator                  shift and go to state 104

state 121

    (46) condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .

    DOUBLE_EQUALS   reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    AND             reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    OR              reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    $end            reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 46 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)


state 122

    (47) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .
    (45) condition -> condition . comparison condition
    (48) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (50) comparison -> . DOUBLE_EQUALS
    (51) comparison -> . NOT_EQUALS
    (52) comparison -> . GREATER_THAN
    (53) comparison -> . LESS_THAN
    (54) comparison -> . GREATER_THAN_OR_EQUALS
    (55) comparison -> . LESS_THAN_OR_EQUALS
    (56) comparison -> . AND
    (57) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    SEMICOLON       reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    DOUBLE_EQUALS   shift and go to state 29
    NOT_EQUALS      shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESS_THAN       shift and go to state 32
    GREATER_THAN_OR_EQUALS shift and go to state 33
    LESS_THAN_OR_EQUALS shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36

  ! DOUBLE_EQUALS   [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! AND             [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! OR              [ reduce using rule 47 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]

    comparison                     shift and go to state 28

state 123

    (67) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .

    PLUS            reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    $end            reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 67 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)


state 124

    (68) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .
    (64) math_expression -> math_expression . math_operator math_expression
    (65) math_expression -> math_expression . math_operator VARIABLE
    (69) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) math_operator -> . PLUS
    (59) math_operator -> . DIVIDE
    (60) math_operator -> . MINUS
    (61) math_operator -> . MULTIPLY
    (62) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    SEMICOLON       reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    PLUS            shift and go to state 38
    DIVIDE          shift and go to state 39
    MINUS           shift and go to state 40
    MULTIPLY        shift and go to state 41
    MODULO          shift and go to state 42

  ! PLUS            [ reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 68 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]

    math_operator                  shift and go to state 37

state 125

    (70) array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 70 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)


state 126

    (72) key_declaration -> key_declaration COMMA . key_declaration
    (71) key_declaration -> . expression EQUALS GREATER_THAN expression
    (72) key_declaration -> . key_declaration COMMA key_declaration
    (73) key_declaration -> . empty
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (27) empty -> .
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    COMMA           reduce using rule 27 (empty -> .)
    CLOSE_SQUARE_BRACKET reduce using rule 27 (empty -> .)
    IDENTIFIER      shift and go to state 21

    key_declaration                shift and go to state 134
    expression                     shift and go to state 110
    empty                          shift and go to state 111
    function_call                  shift and go to state 19

state 127

    (71) key_declaration -> expression EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 135


state 128

    (16) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS . body_statement_list
    (17) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (18) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 131

    body_statement_list            shift and go to state 136

state 129

    (20) parameter_list -> parameter_list COMMA . parameter
    (22) parameter -> . VARIABLE

    VARIABLE        shift and go to state 115

    parameter                      shift and go to state 137

state 130

    (42) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 42 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 131

    (17) body_statement_list -> OPEN_CURLY_BRACKET . statement_list CLOSE_CURLY_BRACKET
    (18) body_statement_list -> OPEN_CURLY_BRACKET . empty CLOSE_CURLY_BRACKET
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (27) empty -> .
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . impresion
    (15) expression_statement -> . expression SEMICOLON
    (16) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (11) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (12) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (13) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (14) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (42) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (43) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET reduce using rule 27 (empty -> .)
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 26
    IF              shift and go to state 22
    ECHO            shift and go to state 23
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    statement_list                 shift and go to state 138
    empty                          shift and go to state 139
    statement                      shift and go to state 5
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    impresion                      shift and go to state 15
    expression                     shift and go to state 25
    function_call                  shift and go to state 19

state 132

    (43) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .

    FUNCTION        reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NUMBER          reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    BOOLEAN         reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 43 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)


state 133

    (24) value_parameter_list -> value_parameter_list COMMA value_parameter .

    CLOSE_PARENTHESIS reduce using rule 24 (value_parameter_list -> value_parameter_list COMMA value_parameter .)
    COMMA           reduce using rule 24 (value_parameter_list -> value_parameter_list COMMA value_parameter .)


state 134

    (72) key_declaration -> key_declaration COMMA key_declaration .
    (72) key_declaration -> key_declaration . COMMA key_declaration

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSE_SQUARE_BRACKET reduce using rule 72 (key_declaration -> key_declaration COMMA key_declaration .)
    COMMA           shift and go to state 126

  ! COMMA           [ reduce using rule 72 (key_declaration -> key_declaration COMMA key_declaration .) ]


state 135

    (71) key_declaration -> expression EQUALS GREATER_THAN . expression
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 57
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    expression                     shift and go to state 140
    function_call                  shift and go to state 19

state 136

    (16) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 16 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)


state 137

    (20) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PARENTHESIS reduce using rule 20 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 20 (parameter_list -> parameter_list COMMA parameter .)


state 138

    (17) body_statement_list -> OPEN_CURLY_BRACKET statement_list . CLOSE_CURLY_BRACKET
    (5) statement_list -> statement_list . statement
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . impresion
    (15) expression_statement -> . expression SEMICOLON
    (16) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (11) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (12) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (13) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (14) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (42) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (43) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (28) expression -> . VARIABLE
    (29) expression -> . NUMBER
    (30) expression -> . STRING
    (31) expression -> . BOOLEAN
    (32) expression -> . NULL
    (33) expression -> . function_call
    (34) expression -> . expression PLUS expression
    (35) expression -> . expression MINUS expression
    (36) expression -> . expression MULTIPLY expression
    (37) expression -> . expression DIVIDE expression
    (38) expression -> . expression MODULO expression
    (39) expression -> . expression CONCATENATION expression
    (40) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (41) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET shift and go to state 141
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 26
    IF              shift and go to state 22
    ECHO            shift and go to state 23
    NUMBER          shift and go to state 27
    STRING          shift and go to state 16
    BOOLEAN         shift and go to state 17
    NULL            shift and go to state 18
    IDENTIFIER      shift and go to state 21

    statement                      shift and go to state 24
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    impresion                      shift and go to state 15
    expression                     shift and go to state 25
    function_call                  shift and go to state 19

state 139

    (18) body_statement_list -> OPEN_CURLY_BRACKET empty . CLOSE_CURLY_BRACKET

    CLOSE_CURLY_BRACKET shift and go to state 142


state 140

    (71) key_declaration -> expression EQUALS GREATER_THAN expression .
    (34) expression -> expression . PLUS expression
    (35) expression -> expression . MINUS expression
    (36) expression -> expression . MULTIPLY expression
    (37) expression -> expression . DIVIDE expression
    (38) expression -> expression . MODULO expression
    (39) expression -> expression . CONCATENATION expression
    (40) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_SQUARE_BRACKET reduce using rule 71 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    COMMA           reduce using rule 71 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    DIVIDE          shift and go to state 46
    MODULO          shift and go to state 47
    CONCATENATION   shift and go to state 48
    CONCATENATION_ASSIGNMENT shift and go to state 49


state 141

    (17) body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .

    FUNCTION        reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 17 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)


state 142

    (18) body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .

    FUNCTION        reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 18 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 10 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 54 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 54 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 55 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 55 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 55 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 55 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 55 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 55 resolved as shift
WARNING: shift/reduce conflict for AND in state 55 resolved as shift
WARNING: shift/reduce conflict for OR in state 55 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 66 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 82 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 84 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 85 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 101 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 101 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 103 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 120 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 120 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 124 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 124 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 134 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 9
WARNING: reduce/reduce conflict in state 89 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 89
