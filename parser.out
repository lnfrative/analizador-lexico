Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAY
    AS
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    CLOSE_TAG
    COLON
    COMMENT
    CONST
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    DOUBLE_COLON
    ELSE
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    OPEN_TAG
    OPEN_TAG_WITH_ECHO
    RETURN
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     program -> condition
Rule 3     program -> math_expression
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement -> expression_statement
Rule 7     statement -> function_declaration
Rule 8     statement -> assignment
Rule 9     statement -> if_statement
Rule 10    statement -> while_statement
Rule 11    statement -> for_statement
Rule 12    statement -> impresion
Rule 13    assignment -> VARIABLE EQUALS expression SEMICOLON
Rule 14    assignment -> VARIABLE EQUALS math_expression SEMICOLON
Rule 15    assignment -> VARIABLE EQUALS array_structure SEMICOLON
Rule 16    assignment -> VARIABLE EQUALS condition SEMICOLON
Rule 17    expression_statement -> expression SEMICOLON
Rule 18    function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
Rule 19    body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
Rule 20    body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
Rule 21    parameter_list -> parameter
Rule 22    parameter_list -> parameter_list COMMA parameter
Rule 23    parameter_list -> empty
Rule 24    parameter -> VARIABLE
Rule 25    value_parameter_list -> value_parameter
Rule 26    value_parameter_list -> value_parameter_list COMMA value_parameter
Rule 27    value_parameter_list -> empty
Rule 28    value_parameter -> expression
Rule 29    empty -> <empty>
Rule 30    expression -> VARIABLE
Rule 31    expression -> NUMBER
Rule 32    expression -> STRING
Rule 33    expression -> BOOLEAN
Rule 34    expression -> NULL
Rule 35    expression -> function_call
Rule 36    expression -> expression PLUS expression
Rule 37    expression -> expression MINUS expression
Rule 38    expression -> expression MULTIPLY expression
Rule 39    expression -> expression DIVIDE expression
Rule 40    expression -> expression MODULO expression
Rule 41    expression -> expression CONCATENATION expression
Rule 42    expression -> expression CONCATENATION_ASSIGNMENT expression
Rule 43    function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS
Rule 44    if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 45    for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
Rule 46    for_initialization -> assignment
Rule 47    for_initialization -> empty
Rule 48    for_update -> expression
Rule 49    for_update -> empty
Rule 50    while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 51    impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
Rule 52    condition -> expression
Rule 53    condition -> condition comparison condition
Rule 54    condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
Rule 55    condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
Rule 56    condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
Rule 57    condition -> NOT condition
Rule 58    comparison -> DOUBLE_EQUALS
Rule 59    comparison -> NOT_EQUALS
Rule 60    comparison -> GREATER_THAN
Rule 61    comparison -> LESS_THAN
Rule 62    comparison -> GREATER_THAN_OR_EQUALS
Rule 63    comparison -> LESS_THAN_OR_EQUALS
Rule 64    comparison -> AND
Rule 65    comparison -> OR
Rule 66    math_operator -> PLUS
Rule 67    math_operator -> DIVIDE
Rule 68    math_operator -> MINUS
Rule 69    math_operator -> MULTIPLY
Rule 70    math_operator -> MODULO
Rule 71    math_expression -> NUMBER
Rule 72    math_expression -> math_expression math_operator math_expression
Rule 73    math_expression -> math_expression math_operator VARIABLE
Rule 74    math_expression -> VARIABLE math_operator math_expression
Rule 75    math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
Rule 76    math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
Rule 77    math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
Rule 78    array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
Rule 79    key_declaration -> expression EQUALS GREATER_THAN expression
Rule 80    key_declaration -> key_declaration COMMA key_declaration
Rule 81    key_declaration -> empty

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 64
ARRAY                : 
AS                   : 
BOOLEAN              : 33
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_CURLY_BRACKET  : 19 20
CLOSE_PARENTHESIS    : 18 43 44 45 50 51 54 55 56 75 76 77
CLOSE_SQUARE_BRACKET : 78
CLOSE_TAG            : 
COLON                : 
COMMA                : 22 26 80
COMMENT              : 
CONCATENATION        : 41
CONCATENATION_ASSIGNMENT : 42
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 
DIE                  : 
DIVIDE               : 39 67
DO                   : 
DOUBLE_COLON         : 
DOUBLE_EQUALS        : 58
ECHO                 : 51
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 13 14 15 16 79
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FOR                  : 45
FUNCTION             : 18
GREATER_THAN         : 60 79
GREATER_THAN_OR_EQUALS : 62
IDENTIFIER           : 18 43
IF                   : 44
LESS_THAN            : 61
LESS_THAN_OR_EQUALS  : 63
MINUS                : 37 68
MODULO               : 40 70
MULTIPLY             : 38 69
NOT                  : 57
NOT_EQUALS           : 59
NULL                 : 34
NUMBER               : 31 71
OPEN_CURLY_BRACKET   : 19 20
OPEN_PARENTHESIS     : 18 43 44 45 50 51 54 55 56 75 76 77
OPEN_SQUARE_BRACKET  : 78
OPEN_TAG             : 
OPEN_TAG_WITH_ECHO   : 
OR                   : 65
PLUS                 : 36 66
RETURN               : 
SEMICOLON            : 13 14 15 16 17 45 45 51
STRING               : 32
VARIABLE             : 13 14 15 16 24 30 73 74
WHILE                : 50
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

array_structure      : 15
assignment           : 8 46
body_statement_list  : 18 44 45 50
comparison           : 53 54 55 56
condition            : 2 16 44 45 50 53 53 54 54 55 55 56 56 57
empty                : 20 23 27 47 49 81
expression           : 13 17 28 36 36 37 37 38 38 39 39 40 40 41 41 42 42 48 52 79 79
expression_statement : 6
for_initialization   : 45
for_statement        : 11
for_update           : 45
function_call        : 35
function_declaration : 7
if_statement         : 9
impresion            : 12
key_declaration      : 78 80 80
math_expression      : 3 14 72 72 73 74 75 75 76 76 77 77
math_operator        : 72 73 74 75 76 77
parameter            : 21 22
parameter_list       : 18 22
program              : 0
statement            : 4 5
statement_list       : 1 5 19
value_parameter      : 25 26
value_parameter_list : 26 51
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) program -> . condition
    (3) program -> . math_expression
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . impresion
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (17) expression_statement -> . expression SEMICOLON
    (18) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (13) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (14) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (15) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (16) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (44) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (50) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (45) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (51) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 10
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    FUNCTION        shift and go to state 22
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    ECHO            shift and go to state 27
    IDENTIFIER      shift and go to state 23

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    condition                      shift and go to state 3
    math_expression                shift and go to state 4
    statement                      shift and go to state 5
    expression                     shift and go to state 6
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    for_statement                  shift and go to state 16
    impresion                      shift and go to state 17
    function_call                  shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (5) statement_list -> statement_list . statement
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . impresion
    (17) expression_statement -> . expression SEMICOLON
    (18) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (13) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (14) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (15) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (16) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (44) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (50) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (45) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (51) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    $end            reduce using rule 1 (program -> statement_list .)
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 30
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    ECHO            shift and go to state 27
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    statement                      shift and go to state 28
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    for_statement                  shift and go to state 16
    impresion                      shift and go to state 17
    expression                     shift and go to state 29
    function_call                  shift and go to state 21

state 3

    (2) program -> condition .
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    $end            reduce using rule 2 (program -> condition .)
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 32

state 4

    (3) program -> math_expression .
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    $end            reduce using rule 3 (program -> math_expression .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 41

state 5

    (4) statement_list -> statement .

    FUNCTION        reduce using rule 4 (statement_list -> statement .)
    VARIABLE        reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    ECHO            reduce using rule 4 (statement_list -> statement .)
    NUMBER          reduce using rule 4 (statement_list -> statement .)
    STRING          reduce using rule 4 (statement_list -> statement .)
    BOOLEAN         reduce using rule 4 (statement_list -> statement .)
    NULL            reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    $end            reduce using rule 4 (statement_list -> statement .)
    CLOSE_CURLY_BRACKET reduce using rule 4 (statement_list -> statement .)


state 6

    (52) condition -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression
    (17) expression_statement -> expression . SEMICOLON

    DOUBLE_EQUALS   reduce using rule 52 (condition -> expression .)
    NOT_EQUALS      reduce using rule 52 (condition -> expression .)
    GREATER_THAN    reduce using rule 52 (condition -> expression .)
    LESS_THAN       reduce using rule 52 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    AND             reduce using rule 52 (condition -> expression .)
    OR              reduce using rule 52 (condition -> expression .)
    $end            reduce using rule 52 (condition -> expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53
    SEMICOLON       shift and go to state 54


state 7

    (54) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (75) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 7
    NOT             shift and go to state 8
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 58
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 55
    math_expression                shift and go to state 56
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 8

    (57) condition -> NOT . condition
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 59
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 9

    (71) math_expression -> NUMBER .
    (31) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 31 (expression -> NUMBER .)
    PLUS            reduce using rule 31 (expression -> NUMBER .)
    MINUS           reduce using rule 31 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 31 (expression -> NUMBER .)
    DIVIDE          reduce using rule 31 (expression -> NUMBER .)
    MODULO          reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 31 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 31 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 31 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    AND             reduce using rule 31 (expression -> NUMBER .)
    OR              reduce using rule 31 (expression -> NUMBER .)
    $end            reduce using rule 31 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 31 (expression -> NUMBER .)

  ! PLUS            [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! $end            [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 71 (math_expression -> NUMBER .) ]


state 10

    (74) math_expression -> VARIABLE . math_operator math_expression
    (30) expression -> VARIABLE .
    (13) assignment -> VARIABLE . EQUALS expression SEMICOLON
    (14) assignment -> VARIABLE . EQUALS math_expression SEMICOLON
    (15) assignment -> VARIABLE . EQUALS array_structure SEMICOLON
    (16) assignment -> VARIABLE . EQUALS condition SEMICOLON
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 30 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 30 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    AND             reduce using rule 30 (expression -> VARIABLE .)
    OR              reduce using rule 30 (expression -> VARIABLE .)
    $end            reduce using rule 30 (expression -> VARIABLE .)
    EQUALS          shift and go to state 63
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 30 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 62

state 11

    (6) statement -> expression_statement .

    FUNCTION        reduce using rule 6 (statement -> expression_statement .)
    VARIABLE        reduce using rule 6 (statement -> expression_statement .)
    IF              reduce using rule 6 (statement -> expression_statement .)
    WHILE           reduce using rule 6 (statement -> expression_statement .)
    FOR             reduce using rule 6 (statement -> expression_statement .)
    ECHO            reduce using rule 6 (statement -> expression_statement .)
    NUMBER          reduce using rule 6 (statement -> expression_statement .)
    STRING          reduce using rule 6 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 6 (statement -> expression_statement .)
    NULL            reduce using rule 6 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> expression_statement .)
    $end            reduce using rule 6 (statement -> expression_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 6 (statement -> expression_statement .)


state 12

    (7) statement -> function_declaration .

    FUNCTION        reduce using rule 7 (statement -> function_declaration .)
    VARIABLE        reduce using rule 7 (statement -> function_declaration .)
    IF              reduce using rule 7 (statement -> function_declaration .)
    WHILE           reduce using rule 7 (statement -> function_declaration .)
    FOR             reduce using rule 7 (statement -> function_declaration .)
    ECHO            reduce using rule 7 (statement -> function_declaration .)
    NUMBER          reduce using rule 7 (statement -> function_declaration .)
    STRING          reduce using rule 7 (statement -> function_declaration .)
    BOOLEAN         reduce using rule 7 (statement -> function_declaration .)
    NULL            reduce using rule 7 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> function_declaration .)
    $end            reduce using rule 7 (statement -> function_declaration .)
    CLOSE_CURLY_BRACKET reduce using rule 7 (statement -> function_declaration .)


state 13

    (8) statement -> assignment .

    FUNCTION        reduce using rule 8 (statement -> assignment .)
    VARIABLE        reduce using rule 8 (statement -> assignment .)
    IF              reduce using rule 8 (statement -> assignment .)
    WHILE           reduce using rule 8 (statement -> assignment .)
    FOR             reduce using rule 8 (statement -> assignment .)
    ECHO            reduce using rule 8 (statement -> assignment .)
    NUMBER          reduce using rule 8 (statement -> assignment .)
    STRING          reduce using rule 8 (statement -> assignment .)
    BOOLEAN         reduce using rule 8 (statement -> assignment .)
    NULL            reduce using rule 8 (statement -> assignment .)
    IDENTIFIER      reduce using rule 8 (statement -> assignment .)
    $end            reduce using rule 8 (statement -> assignment .)
    CLOSE_CURLY_BRACKET reduce using rule 8 (statement -> assignment .)


state 14

    (9) statement -> if_statement .

    FUNCTION        reduce using rule 9 (statement -> if_statement .)
    VARIABLE        reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    ECHO            reduce using rule 9 (statement -> if_statement .)
    NUMBER          reduce using rule 9 (statement -> if_statement .)
    STRING          reduce using rule 9 (statement -> if_statement .)
    BOOLEAN         reduce using rule 9 (statement -> if_statement .)
    NULL            reduce using rule 9 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 9 (statement -> if_statement .)


state 15

    (10) statement -> while_statement .

    FUNCTION        reduce using rule 10 (statement -> while_statement .)
    VARIABLE        reduce using rule 10 (statement -> while_statement .)
    IF              reduce using rule 10 (statement -> while_statement .)
    WHILE           reduce using rule 10 (statement -> while_statement .)
    FOR             reduce using rule 10 (statement -> while_statement .)
    ECHO            reduce using rule 10 (statement -> while_statement .)
    NUMBER          reduce using rule 10 (statement -> while_statement .)
    STRING          reduce using rule 10 (statement -> while_statement .)
    BOOLEAN         reduce using rule 10 (statement -> while_statement .)
    NULL            reduce using rule 10 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> while_statement .)
    $end            reduce using rule 10 (statement -> while_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 10 (statement -> while_statement .)


state 16

    (11) statement -> for_statement .

    FUNCTION        reduce using rule 11 (statement -> for_statement .)
    VARIABLE        reduce using rule 11 (statement -> for_statement .)
    IF              reduce using rule 11 (statement -> for_statement .)
    WHILE           reduce using rule 11 (statement -> for_statement .)
    FOR             reduce using rule 11 (statement -> for_statement .)
    ECHO            reduce using rule 11 (statement -> for_statement .)
    NUMBER          reduce using rule 11 (statement -> for_statement .)
    STRING          reduce using rule 11 (statement -> for_statement .)
    BOOLEAN         reduce using rule 11 (statement -> for_statement .)
    NULL            reduce using rule 11 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> for_statement .)
    $end            reduce using rule 11 (statement -> for_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 11 (statement -> for_statement .)


state 17

    (12) statement -> impresion .

    FUNCTION        reduce using rule 12 (statement -> impresion .)
    VARIABLE        reduce using rule 12 (statement -> impresion .)
    IF              reduce using rule 12 (statement -> impresion .)
    WHILE           reduce using rule 12 (statement -> impresion .)
    FOR             reduce using rule 12 (statement -> impresion .)
    ECHO            reduce using rule 12 (statement -> impresion .)
    NUMBER          reduce using rule 12 (statement -> impresion .)
    STRING          reduce using rule 12 (statement -> impresion .)
    BOOLEAN         reduce using rule 12 (statement -> impresion .)
    NULL            reduce using rule 12 (statement -> impresion .)
    IDENTIFIER      reduce using rule 12 (statement -> impresion .)
    $end            reduce using rule 12 (statement -> impresion .)
    CLOSE_CURLY_BRACKET reduce using rule 12 (statement -> impresion .)


state 18

    (32) expression -> STRING .

    PLUS            reduce using rule 32 (expression -> STRING .)
    MINUS           reduce using rule 32 (expression -> STRING .)
    MULTIPLY        reduce using rule 32 (expression -> STRING .)
    DIVIDE          reduce using rule 32 (expression -> STRING .)
    MODULO          reduce using rule 32 (expression -> STRING .)
    CONCATENATION   reduce using rule 32 (expression -> STRING .)
    CONCATENATION_ASSIGNMENT reduce using rule 32 (expression -> STRING .)
    SEMICOLON       reduce using rule 32 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 32 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 32 (expression -> STRING .)
    GREATER_THAN    reduce using rule 32 (expression -> STRING .)
    LESS_THAN       reduce using rule 32 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 32 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 32 (expression -> STRING .)
    AND             reduce using rule 32 (expression -> STRING .)
    OR              reduce using rule 32 (expression -> STRING .)
    $end            reduce using rule 32 (expression -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 32 (expression -> STRING .)
    COMMA           reduce using rule 32 (expression -> STRING .)
    EQUALS          reduce using rule 32 (expression -> STRING .)
    CLOSE_SQUARE_BRACKET reduce using rule 32 (expression -> STRING .)


state 19

    (33) expression -> BOOLEAN .

    PLUS            reduce using rule 33 (expression -> BOOLEAN .)
    MINUS           reduce using rule 33 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 33 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 33 (expression -> BOOLEAN .)
    MODULO          reduce using rule 33 (expression -> BOOLEAN .)
    CONCATENATION   reduce using rule 33 (expression -> BOOLEAN .)
    CONCATENATION_ASSIGNMENT reduce using rule 33 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 33 (expression -> BOOLEAN .)
    DOUBLE_EQUALS   reduce using rule 33 (expression -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 33 (expression -> BOOLEAN .)
    GREATER_THAN    reduce using rule 33 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 33 (expression -> BOOLEAN .)
    GREATER_THAN_OR_EQUALS reduce using rule 33 (expression -> BOOLEAN .)
    LESS_THAN_OR_EQUALS reduce using rule 33 (expression -> BOOLEAN .)
    AND             reduce using rule 33 (expression -> BOOLEAN .)
    OR              reduce using rule 33 (expression -> BOOLEAN .)
    $end            reduce using rule 33 (expression -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 33 (expression -> BOOLEAN .)
    COMMA           reduce using rule 33 (expression -> BOOLEAN .)
    EQUALS          reduce using rule 33 (expression -> BOOLEAN .)
    CLOSE_SQUARE_BRACKET reduce using rule 33 (expression -> BOOLEAN .)


state 20

    (34) expression -> NULL .

    PLUS            reduce using rule 34 (expression -> NULL .)
    MINUS           reduce using rule 34 (expression -> NULL .)
    MULTIPLY        reduce using rule 34 (expression -> NULL .)
    DIVIDE          reduce using rule 34 (expression -> NULL .)
    MODULO          reduce using rule 34 (expression -> NULL .)
    CONCATENATION   reduce using rule 34 (expression -> NULL .)
    CONCATENATION_ASSIGNMENT reduce using rule 34 (expression -> NULL .)
    SEMICOLON       reduce using rule 34 (expression -> NULL .)
    DOUBLE_EQUALS   reduce using rule 34 (expression -> NULL .)
    NOT_EQUALS      reduce using rule 34 (expression -> NULL .)
    GREATER_THAN    reduce using rule 34 (expression -> NULL .)
    LESS_THAN       reduce using rule 34 (expression -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 34 (expression -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 34 (expression -> NULL .)
    AND             reduce using rule 34 (expression -> NULL .)
    OR              reduce using rule 34 (expression -> NULL .)
    $end            reduce using rule 34 (expression -> NULL .)
    CLOSE_PARENTHESIS reduce using rule 34 (expression -> NULL .)
    COMMA           reduce using rule 34 (expression -> NULL .)
    EQUALS          reduce using rule 34 (expression -> NULL .)
    CLOSE_SQUARE_BRACKET reduce using rule 34 (expression -> NULL .)


state 21

    (35) expression -> function_call .

    PLUS            reduce using rule 35 (expression -> function_call .)
    MINUS           reduce using rule 35 (expression -> function_call .)
    MULTIPLY        reduce using rule 35 (expression -> function_call .)
    DIVIDE          reduce using rule 35 (expression -> function_call .)
    MODULO          reduce using rule 35 (expression -> function_call .)
    CONCATENATION   reduce using rule 35 (expression -> function_call .)
    CONCATENATION_ASSIGNMENT reduce using rule 35 (expression -> function_call .)
    SEMICOLON       reduce using rule 35 (expression -> function_call .)
    DOUBLE_EQUALS   reduce using rule 35 (expression -> function_call .)
    NOT_EQUALS      reduce using rule 35 (expression -> function_call .)
    GREATER_THAN    reduce using rule 35 (expression -> function_call .)
    LESS_THAN       reduce using rule 35 (expression -> function_call .)
    GREATER_THAN_OR_EQUALS reduce using rule 35 (expression -> function_call .)
    LESS_THAN_OR_EQUALS reduce using rule 35 (expression -> function_call .)
    AND             reduce using rule 35 (expression -> function_call .)
    OR              reduce using rule 35 (expression -> function_call .)
    $end            reduce using rule 35 (expression -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 35 (expression -> function_call .)
    COMMA           reduce using rule 35 (expression -> function_call .)
    EQUALS          reduce using rule 35 (expression -> function_call .)
    CLOSE_SQUARE_BRACKET reduce using rule 35 (expression -> function_call .)


state 22

    (18) function_declaration -> FUNCTION . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    IDENTIFIER      shift and go to state 64


state 23

    (43) function_call -> IDENTIFIER . OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 65


state 24

    (44) if_statement -> IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 66


state 25

    (50) while_statement -> WHILE . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 67


state 26

    (45) for_statement -> FOR . OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 68


state 27

    (51) impresion -> ECHO . OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 69


state 28

    (5) statement_list -> statement_list statement .

    FUNCTION        reduce using rule 5 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 5 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 5 (statement_list -> statement_list statement .)
    STRING          reduce using rule 5 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 5 (statement_list -> statement_list statement .)
    NULL            reduce using rule 5 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    $end            reduce using rule 5 (statement_list -> statement_list statement .)
    CLOSE_CURLY_BRACKET reduce using rule 5 (statement_list -> statement_list statement .)


state 29

    (17) expression_statement -> expression . SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    SEMICOLON       shift and go to state 54
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 30

    (13) assignment -> VARIABLE . EQUALS expression SEMICOLON
    (14) assignment -> VARIABLE . EQUALS math_expression SEMICOLON
    (15) assignment -> VARIABLE . EQUALS array_structure SEMICOLON
    (16) assignment -> VARIABLE . EQUALS condition SEMICOLON
    (30) expression -> VARIABLE .

    EQUALS          shift and go to state 63
    SEMICOLON       reduce using rule 30 (expression -> VARIABLE .)
    PLUS            reduce using rule 30 (expression -> VARIABLE .)
    MINUS           reduce using rule 30 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 30 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 30 (expression -> VARIABLE .)
    MODULO          reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> VARIABLE .)


state 31

    (31) expression -> NUMBER .

    SEMICOLON       reduce using rule 31 (expression -> NUMBER .)
    PLUS            reduce using rule 31 (expression -> NUMBER .)
    MINUS           reduce using rule 31 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 31 (expression -> NUMBER .)
    DIVIDE          reduce using rule 31 (expression -> NUMBER .)
    MODULO          reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 31 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 31 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    AND             reduce using rule 31 (expression -> NUMBER .)
    OR              reduce using rule 31 (expression -> NUMBER .)
    $end            reduce using rule 31 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 31 (expression -> NUMBER .)
    COMMA           reduce using rule 31 (expression -> NUMBER .)
    EQUALS          reduce using rule 31 (expression -> NUMBER .)
    CLOSE_SQUARE_BRACKET reduce using rule 31 (expression -> NUMBER .)


state 32

    (53) condition -> condition comparison . condition
    (56) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 71
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 70
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 33

    (58) comparison -> DOUBLE_EQUALS .

    OPEN_PARENTHESIS reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    NOT             reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    VARIABLE        reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    NUMBER          reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    STRING          reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    BOOLEAN         reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    NULL            reduce using rule 58 (comparison -> DOUBLE_EQUALS .)
    IDENTIFIER      reduce using rule 58 (comparison -> DOUBLE_EQUALS .)


state 34

    (59) comparison -> NOT_EQUALS .

    OPEN_PARENTHESIS reduce using rule 59 (comparison -> NOT_EQUALS .)
    NOT             reduce using rule 59 (comparison -> NOT_EQUALS .)
    VARIABLE        reduce using rule 59 (comparison -> NOT_EQUALS .)
    NUMBER          reduce using rule 59 (comparison -> NOT_EQUALS .)
    STRING          reduce using rule 59 (comparison -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 59 (comparison -> NOT_EQUALS .)
    NULL            reduce using rule 59 (comparison -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 59 (comparison -> NOT_EQUALS .)


state 35

    (60) comparison -> GREATER_THAN .

    OPEN_PARENTHESIS reduce using rule 60 (comparison -> GREATER_THAN .)
    NOT             reduce using rule 60 (comparison -> GREATER_THAN .)
    VARIABLE        reduce using rule 60 (comparison -> GREATER_THAN .)
    NUMBER          reduce using rule 60 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 60 (comparison -> GREATER_THAN .)
    BOOLEAN         reduce using rule 60 (comparison -> GREATER_THAN .)
    NULL            reduce using rule 60 (comparison -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 60 (comparison -> GREATER_THAN .)


state 36

    (61) comparison -> LESS_THAN .

    OPEN_PARENTHESIS reduce using rule 61 (comparison -> LESS_THAN .)
    NOT             reduce using rule 61 (comparison -> LESS_THAN .)
    VARIABLE        reduce using rule 61 (comparison -> LESS_THAN .)
    NUMBER          reduce using rule 61 (comparison -> LESS_THAN .)
    STRING          reduce using rule 61 (comparison -> LESS_THAN .)
    BOOLEAN         reduce using rule 61 (comparison -> LESS_THAN .)
    NULL            reduce using rule 61 (comparison -> LESS_THAN .)
    IDENTIFIER      reduce using rule 61 (comparison -> LESS_THAN .)


state 37

    (62) comparison -> GREATER_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    NOT             reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    STRING          reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    NULL            reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 62 (comparison -> GREATER_THAN_OR_EQUALS .)


state 38

    (63) comparison -> LESS_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    NOT             reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    STRING          reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    NULL            reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 63 (comparison -> LESS_THAN_OR_EQUALS .)


state 39

    (64) comparison -> AND .

    OPEN_PARENTHESIS reduce using rule 64 (comparison -> AND .)
    NOT             reduce using rule 64 (comparison -> AND .)
    VARIABLE        reduce using rule 64 (comparison -> AND .)
    NUMBER          reduce using rule 64 (comparison -> AND .)
    STRING          reduce using rule 64 (comparison -> AND .)
    BOOLEAN         reduce using rule 64 (comparison -> AND .)
    NULL            reduce using rule 64 (comparison -> AND .)
    IDENTIFIER      reduce using rule 64 (comparison -> AND .)


state 40

    (65) comparison -> OR .

    OPEN_PARENTHESIS reduce using rule 65 (comparison -> OR .)
    NOT             reduce using rule 65 (comparison -> OR .)
    VARIABLE        reduce using rule 65 (comparison -> OR .)
    NUMBER          reduce using rule 65 (comparison -> OR .)
    STRING          reduce using rule 65 (comparison -> OR .)
    BOOLEAN         reduce using rule 65 (comparison -> OR .)
    NULL            reduce using rule 65 (comparison -> OR .)
    IDENTIFIER      reduce using rule 65 (comparison -> OR .)


state 41

    (72) math_expression -> math_expression math_operator . math_expression
    (73) math_expression -> math_expression math_operator . VARIABLE
    (77) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 73
    OPEN_PARENTHESIS shift and go to state 74
    NUMBER          shift and go to state 75

    math_expression                shift and go to state 72

state 42

    (66) math_operator -> PLUS .

    VARIABLE        reduce using rule 66 (math_operator -> PLUS .)
    OPEN_PARENTHESIS reduce using rule 66 (math_operator -> PLUS .)
    NUMBER          reduce using rule 66 (math_operator -> PLUS .)


state 43

    (67) math_operator -> DIVIDE .

    VARIABLE        reduce using rule 67 (math_operator -> DIVIDE .)
    OPEN_PARENTHESIS reduce using rule 67 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 67 (math_operator -> DIVIDE .)


state 44

    (68) math_operator -> MINUS .

    VARIABLE        reduce using rule 68 (math_operator -> MINUS .)
    OPEN_PARENTHESIS reduce using rule 68 (math_operator -> MINUS .)
    NUMBER          reduce using rule 68 (math_operator -> MINUS .)


state 45

    (69) math_operator -> MULTIPLY .

    VARIABLE        reduce using rule 69 (math_operator -> MULTIPLY .)
    OPEN_PARENTHESIS reduce using rule 69 (math_operator -> MULTIPLY .)
    NUMBER          reduce using rule 69 (math_operator -> MULTIPLY .)


state 46

    (70) math_operator -> MODULO .

    VARIABLE        reduce using rule 70 (math_operator -> MODULO .)
    OPEN_PARENTHESIS reduce using rule 70 (math_operator -> MODULO .)
    NUMBER          reduce using rule 70 (math_operator -> MODULO .)


state 47

    (36) expression -> expression PLUS . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 76
    function_call                  shift and go to state 21

state 48

    (37) expression -> expression MINUS . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 77
    function_call                  shift and go to state 21

state 49

    (38) expression -> expression MULTIPLY . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 78
    function_call                  shift and go to state 21

state 50

    (39) expression -> expression DIVIDE . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 79
    function_call                  shift and go to state 21

state 51

    (40) expression -> expression MODULO . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 80
    function_call                  shift and go to state 21

state 52

    (41) expression -> expression CONCATENATION . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 81
    function_call                  shift and go to state 21

state 53

    (42) expression -> expression CONCATENATION_ASSIGNMENT . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 82
    function_call                  shift and go to state 21

state 54

    (17) expression_statement -> expression SEMICOLON .

    FUNCTION        reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    VARIABLE        reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 17 (expression_statement -> expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 17 (expression_statement -> expression SEMICOLON .)


state 55

    (54) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 84
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 83

state 56

    (75) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 86
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 85

state 57

    (52) condition -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_PARENTHESIS reduce using rule 52 (condition -> expression .)
    DOUBLE_EQUALS   reduce using rule 52 (condition -> expression .)
    NOT_EQUALS      reduce using rule 52 (condition -> expression .)
    GREATER_THAN    reduce using rule 52 (condition -> expression .)
    LESS_THAN       reduce using rule 52 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    AND             reduce using rule 52 (condition -> expression .)
    OR              reduce using rule 52 (condition -> expression .)
    $end            reduce using rule 52 (condition -> expression .)
    SEMICOLON       reduce using rule 52 (condition -> expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 58

    (74) math_expression -> VARIABLE . math_operator math_expression
    (30) expression -> VARIABLE .
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 30 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 30 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    AND             reduce using rule 30 (expression -> VARIABLE .)
    OR              reduce using rule 30 (expression -> VARIABLE .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 30 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 62

state 59

    (57) condition -> NOT condition .
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 57 (condition -> NOT condition .)
    CLOSE_PARENTHESIS reduce using rule 57 (condition -> NOT condition .)
    SEMICOLON       reduce using rule 57 (condition -> NOT condition .)
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! DOUBLE_EQUALS   [ reduce using rule 57 (condition -> NOT condition .) ]
  ! NOT_EQUALS      [ reduce using rule 57 (condition -> NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 57 (condition -> NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 57 (condition -> NOT condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 57 (condition -> NOT condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 57 (condition -> NOT condition .) ]
  ! AND             [ reduce using rule 57 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 57 (condition -> NOT condition .) ]

    comparison                     shift and go to state 32

state 60

    (54) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 55
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 61

    (30) expression -> VARIABLE .

    PLUS            reduce using rule 30 (expression -> VARIABLE .)
    MINUS           reduce using rule 30 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 30 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 30 (expression -> VARIABLE .)
    MODULO          reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 30 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    AND             reduce using rule 30 (expression -> VARIABLE .)
    OR              reduce using rule 30 (expression -> VARIABLE .)
    $end            reduce using rule 30 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 30 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 30 (expression -> VARIABLE .)
    COMMA           reduce using rule 30 (expression -> VARIABLE .)
    EQUALS          reduce using rule 30 (expression -> VARIABLE .)
    CLOSE_SQUARE_BRACKET reduce using rule 30 (expression -> VARIABLE .)


state 62

    (74) math_expression -> VARIABLE math_operator . math_expression
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 75
    VARIABLE        shift and go to state 87
    OPEN_PARENTHESIS shift and go to state 89

    math_expression                shift and go to state 88

state 63

    (13) assignment -> VARIABLE EQUALS . expression SEMICOLON
    (14) assignment -> VARIABLE EQUALS . math_expression SEMICOLON
    (15) assignment -> VARIABLE EQUALS . array_structure SEMICOLON
    (16) assignment -> VARIABLE EQUALS . condition SEMICOLON
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (78) array_structure -> . OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 90
    NUMBER          shift and go to state 95
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    OPEN_PARENTHESIS shift and go to state 96
    OPEN_SQUARE_BRACKET shift and go to state 97
    NOT             shift and go to state 8
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 91
    math_expression                shift and go to state 92
    array_structure                shift and go to state 93
    condition                      shift and go to state 94
    function_call                  shift and go to state 21

state 64

    (18) function_declaration -> FUNCTION IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 98


state 65

    (43) function_call -> IDENTIFIER OPEN_PARENTHESIS . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 99


state 66

    (44) if_statement -> IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 100
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 67

    (50) while_statement -> WHILE OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 101
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 68

    (45) for_statement -> FOR OPEN_PARENTHESIS . for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (46) for_initialization -> . assignment
    (47) for_initialization -> . empty
    (13) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (14) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (15) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (16) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (29) empty -> .

    VARIABLE        shift and go to state 105
    SEMICOLON       reduce using rule 29 (empty -> .)

    for_initialization             shift and go to state 102
    assignment                     shift and go to state 103
    empty                          shift and go to state 104

state 69

    (51) impresion -> ECHO OPEN_PARENTHESIS . value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (25) value_parameter_list -> . value_parameter
    (26) value_parameter_list -> . value_parameter_list COMMA value_parameter
    (27) value_parameter_list -> . empty
    (28) value_parameter -> . expression
    (29) empty -> .
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    value_parameter_list           shift and go to state 106
    value_parameter                shift and go to state 107
    empty                          shift and go to state 108
    expression                     shift and go to state 109
    function_call                  shift and go to state 21

state 70

    (53) condition -> condition comparison condition .
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 53 (condition -> condition comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 53 (condition -> condition comparison condition .)
    SEMICOLON       reduce using rule 53 (condition -> condition comparison condition .)
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! DOUBLE_EQUALS   [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 53 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 32

state 71

    (56) condition -> condition comparison OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS
    (54) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 110
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 72

    (72) math_expression -> math_expression math_operator math_expression .
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 72 (math_expression -> math_expression math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 72 (math_expression -> math_expression math_operator math_expression .)
    SEMICOLON       reduce using rule 72 (math_expression -> math_expression math_operator math_expression .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 41

state 73

    (73) math_expression -> math_expression math_operator VARIABLE .
    (74) math_expression -> VARIABLE . math_operator math_expression
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .)
    SEMICOLON       reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MINUS           [ reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MODULO          [ reduce using rule 73 (math_expression -> math_expression math_operator VARIABLE .) ]

    math_operator                  shift and go to state 62

state 74

    (77) math_expression -> math_expression math_operator OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS
    (75) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 75
    VARIABLE        shift and go to state 87
    OPEN_PARENTHESIS shift and go to state 89

    math_expression                shift and go to state 111

state 75

    (71) math_expression -> NUMBER .

    PLUS            reduce using rule 71 (math_expression -> NUMBER .)
    DIVIDE          reduce using rule 71 (math_expression -> NUMBER .)
    MINUS           reduce using rule 71 (math_expression -> NUMBER .)
    MULTIPLY        reduce using rule 71 (math_expression -> NUMBER .)
    MODULO          reduce using rule 71 (math_expression -> NUMBER .)
    $end            reduce using rule 71 (math_expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 71 (math_expression -> NUMBER .)
    SEMICOLON       reduce using rule 71 (math_expression -> NUMBER .)


state 76

    (36) expression -> expression PLUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 36 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 36 (expression -> expression PLUS expression .)
    CONCATENATION   reduce using rule 36 (expression -> expression PLUS expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 36 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression PLUS expression .)
    DOUBLE_EQUALS   reduce using rule 36 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 36 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 36 (expression -> expression PLUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 36 (expression -> expression PLUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 36 (expression -> expression PLUS expression .)
    AND             reduce using rule 36 (expression -> expression PLUS expression .)
    OR              reduce using rule 36 (expression -> expression PLUS expression .)
    $end            reduce using rule 36 (expression -> expression PLUS expression .)
    CLOSE_PARENTHESIS reduce using rule 36 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 36 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 36 (expression -> expression PLUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 36 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51

  ! MULTIPLY        [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 77

    (37) expression -> expression MINUS expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 37 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 37 (expression -> expression MINUS expression .)
    CONCATENATION   reduce using rule 37 (expression -> expression MINUS expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 37 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 37 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 37 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 37 (expression -> expression MINUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 37 (expression -> expression MINUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 37 (expression -> expression MINUS expression .)
    AND             reduce using rule 37 (expression -> expression MINUS expression .)
    OR              reduce using rule 37 (expression -> expression MINUS expression .)
    $end            reduce using rule 37 (expression -> expression MINUS expression .)
    CLOSE_PARENTHESIS reduce using rule 37 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 37 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 37 (expression -> expression MINUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 37 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51

  ! MULTIPLY        [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 78

    (38) expression -> expression MULTIPLY expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 38 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 38 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 38 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 38 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 38 (expression -> expression MULTIPLY expression .)
    CONCATENATION   reduce using rule 38 (expression -> expression MULTIPLY expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 38 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression MULTIPLY expression .)
    DOUBLE_EQUALS   reduce using rule 38 (expression -> expression MULTIPLY expression .)
    NOT_EQUALS      reduce using rule 38 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 38 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 38 (expression -> expression MULTIPLY expression .)
    LESS_THAN_OR_EQUALS reduce using rule 38 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 38 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 38 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 38 (expression -> expression MULTIPLY expression .)
    CLOSE_PARENTHESIS reduce using rule 38 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 38 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 38 (expression -> expression MULTIPLY expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 38 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MULTIPLY        [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 79

    (39) expression -> expression DIVIDE expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 39 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 39 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 39 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 39 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 39 (expression -> expression DIVIDE expression .)
    CONCATENATION   reduce using rule 39 (expression -> expression DIVIDE expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 39 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression DIVIDE expression .)
    DOUBLE_EQUALS   reduce using rule 39 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 39 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 39 (expression -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 39 (expression -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUALS reduce using rule 39 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 39 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 39 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 39 (expression -> expression DIVIDE expression .)
    CLOSE_PARENTHESIS reduce using rule 39 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 39 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 39 (expression -> expression DIVIDE expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 39 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MULTIPLY        [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 80

    (40) expression -> expression MODULO expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    PLUS            reduce using rule 40 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 40 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 40 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 40 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 40 (expression -> expression MODULO expression .)
    CONCATENATION   reduce using rule 40 (expression -> expression MODULO expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 40 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression MODULO expression .)
    DOUBLE_EQUALS   reduce using rule 40 (expression -> expression MODULO expression .)
    NOT_EQUALS      reduce using rule 40 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 40 (expression -> expression MODULO expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 40 (expression -> expression MODULO expression .)
    LESS_THAN_OR_EQUALS reduce using rule 40 (expression -> expression MODULO expression .)
    AND             reduce using rule 40 (expression -> expression MODULO expression .)
    OR              reduce using rule 40 (expression -> expression MODULO expression .)
    $end            reduce using rule 40 (expression -> expression MODULO expression .)
    CLOSE_PARENTHESIS reduce using rule 40 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 40 (expression -> expression MODULO expression .)
    EQUALS          reduce using rule 40 (expression -> expression MODULO expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 40 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 47 ]
  ! MINUS           [ shift and go to state 48 ]
  ! MULTIPLY        [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! MODULO          [ shift and go to state 51 ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 81

    (41) expression -> expression CONCATENATION expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CONCATENATION   reduce using rule 41 (expression -> expression CONCATENATION expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 41 (expression -> expression CONCATENATION expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression CONCATENATION expression .)
    DOUBLE_EQUALS   reduce using rule 41 (expression -> expression CONCATENATION expression .)
    NOT_EQUALS      reduce using rule 41 (expression -> expression CONCATENATION expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression CONCATENATION expression .)
    LESS_THAN       reduce using rule 41 (expression -> expression CONCATENATION expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 41 (expression -> expression CONCATENATION expression .)
    LESS_THAN_OR_EQUALS reduce using rule 41 (expression -> expression CONCATENATION expression .)
    AND             reduce using rule 41 (expression -> expression CONCATENATION expression .)
    OR              reduce using rule 41 (expression -> expression CONCATENATION expression .)
    $end            reduce using rule 41 (expression -> expression CONCATENATION expression .)
    CLOSE_PARENTHESIS reduce using rule 41 (expression -> expression CONCATENATION expression .)
    COMMA           reduce using rule 41 (expression -> expression CONCATENATION expression .)
    EQUALS          reduce using rule 41 (expression -> expression CONCATENATION expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 41 (expression -> expression CONCATENATION expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51

  ! PLUS            [ reduce using rule 41 (expression -> expression CONCATENATION expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression CONCATENATION expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression CONCATENATION expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression CONCATENATION expression .) ]
  ! MODULO          [ reduce using rule 41 (expression -> expression CONCATENATION expression .) ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 82

    (42) expression -> expression CONCATENATION_ASSIGNMENT expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CONCATENATION   reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CONCATENATION_ASSIGNMENT reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    DOUBLE_EQUALS   reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    NOT_EQUALS      reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    LESS_THAN_OR_EQUALS reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    AND             reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    OR              reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    $end            reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CLOSE_PARENTHESIS reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    COMMA           reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    EQUALS          reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51

  ! PLUS            [ reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! MODULO          [ reduce using rule 42 (expression -> expression CONCATENATION_ASSIGNMENT expression .) ]
  ! CONCATENATION   [ shift and go to state 52 ]
  ! CONCATENATION_ASSIGNMENT [ shift and go to state 53 ]


state 83

    (54) condition -> OPEN_PARENTHESIS condition comparison . condition CLOSE_PARENTHESIS
    (53) condition -> condition comparison . condition
    (56) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 71
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 112
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 84

    (55) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 113

state 85

    (75) math_expression -> OPEN_PARENTHESIS math_expression math_operator . math_expression CLOSE_PARENTHESIS
    (72) math_expression -> math_expression math_operator . math_expression
    (73) math_expression -> math_expression math_operator . VARIABLE
    (77) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 73
    OPEN_PARENTHESIS shift and go to state 74
    NUMBER          shift and go to state 75

    math_expression                shift and go to state 114

state 86

    (76) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 115

state 87

    (74) math_expression -> VARIABLE . math_operator math_expression
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 62

state 88

    (74) math_expression -> VARIABLE math_operator math_expression .
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .)
    SEMICOLON       reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 74 (math_expression -> VARIABLE math_operator math_expression .) ]

    math_operator                  shift and go to state 41

state 89

    (75) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 75
    VARIABLE        shift and go to state 87
    OPEN_PARENTHESIS shift and go to state 89

    math_expression                shift and go to state 56

state 90

    (30) expression -> VARIABLE .
    (74) math_expression -> VARIABLE . math_operator math_expression
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    SEMICOLON       reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 30 (expression -> VARIABLE .)
    CONCATENATION_ASSIGNMENT reduce using rule 30 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 30 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 30 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 30 (expression -> VARIABLE .)
    AND             reduce using rule 30 (expression -> VARIABLE .)
    OR              reduce using rule 30 (expression -> VARIABLE .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 30 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 62

state 91

    (13) assignment -> VARIABLE EQUALS expression . SEMICOLON
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression
    (52) condition -> expression .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 116
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53
    DOUBLE_EQUALS   reduce using rule 52 (condition -> expression .)
    NOT_EQUALS      reduce using rule 52 (condition -> expression .)
    GREATER_THAN    reduce using rule 52 (condition -> expression .)
    LESS_THAN       reduce using rule 52 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 52 (condition -> expression .)
    AND             reduce using rule 52 (condition -> expression .)
    OR              reduce using rule 52 (condition -> expression .)

  ! SEMICOLON       [ reduce using rule 52 (condition -> expression .) ]


state 92

    (14) assignment -> VARIABLE EQUALS math_expression . SEMICOLON
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    SEMICOLON       shift and go to state 117
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 41

state 93

    (15) assignment -> VARIABLE EQUALS array_structure . SEMICOLON

    SEMICOLON       shift and go to state 118


state 94

    (16) assignment -> VARIABLE EQUALS condition . SEMICOLON
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    SEMICOLON       shift and go to state 119
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 32

state 95

    (31) expression -> NUMBER .
    (71) math_expression -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 31 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 31 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 31 (expression -> NUMBER .)
    PLUS            reduce using rule 31 (expression -> NUMBER .)
    MINUS           reduce using rule 31 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 31 (expression -> NUMBER .)
    DIVIDE          reduce using rule 31 (expression -> NUMBER .)
    MODULO          reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 31 (expression -> NUMBER .)
    CONCATENATION_ASSIGNMENT reduce using rule 31 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 31 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 31 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 31 (expression -> NUMBER .)
    AND             reduce using rule 31 (expression -> NUMBER .)
    OR              reduce using rule 31 (expression -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! PLUS            [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 71 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 71 (math_expression -> NUMBER .) ]


state 96

    (75) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (54) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 58
    OPEN_PARENTHESIS shift and go to state 96
    NOT             shift and go to state 8
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    math_expression                shift and go to state 56
    condition                      shift and go to state 55
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 97

    (78) array_structure -> OPEN_SQUARE_BRACKET . key_declaration CLOSE_SQUARE_BRACKET
    (79) key_declaration -> . expression EQUALS GREATER_THAN expression
    (80) key_declaration -> . key_declaration COMMA key_declaration
    (81) key_declaration -> . empty
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (29) empty -> .
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    CLOSE_SQUARE_BRACKET reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)
    IDENTIFIER      shift and go to state 23

    key_declaration                shift and go to state 120
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    function_call                  shift and go to state 21

state 98

    (18) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS body_statement_list
    (21) parameter_list -> . parameter
    (22) parameter_list -> . parameter_list COMMA parameter
    (23) parameter_list -> . empty
    (24) parameter -> . VARIABLE
    (29) empty -> .

    VARIABLE        shift and go to state 126
    CLOSE_PARENTHESIS reduce using rule 29 (empty -> .)
    COMMA           reduce using rule 29 (empty -> .)

    parameter_list                 shift and go to state 123
    parameter                      shift and go to state 124
    empty                          shift and go to state 125

state 99

    (43) function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .

    PLUS            reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CONCATENATION   reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CONCATENATION_ASSIGNMENT reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    AND             reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    OR              reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    $end            reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    EQUALS          reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)
    CLOSE_SQUARE_BRACKET reduce using rule 43 (function_call -> IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .)


state 100

    (44) if_statement -> IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 127
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 32

state 101

    (50) while_statement -> WHILE OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 128
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 32

state 102

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization . SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    SEMICOLON       shift and go to state 129


state 103

    (46) for_initialization -> assignment .

    SEMICOLON       reduce using rule 46 (for_initialization -> assignment .)


state 104

    (47) for_initialization -> empty .

    SEMICOLON       reduce using rule 47 (for_initialization -> empty .)


state 105

    (13) assignment -> VARIABLE . EQUALS expression SEMICOLON
    (14) assignment -> VARIABLE . EQUALS math_expression SEMICOLON
    (15) assignment -> VARIABLE . EQUALS array_structure SEMICOLON
    (16) assignment -> VARIABLE . EQUALS condition SEMICOLON

    EQUALS          shift and go to state 63


state 106

    (51) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list . CLOSE_PARENTHESIS SEMICOLON
    (26) value_parameter_list -> value_parameter_list . COMMA value_parameter

    CLOSE_PARENTHESIS shift and go to state 130
    COMMA           shift and go to state 131


state 107

    (25) value_parameter_list -> value_parameter .

    CLOSE_PARENTHESIS reduce using rule 25 (value_parameter_list -> value_parameter .)
    COMMA           reduce using rule 25 (value_parameter_list -> value_parameter .)


state 108

    (27) value_parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 27 (value_parameter_list -> empty .)
    COMMA           reduce using rule 27 (value_parameter_list -> empty .)


state 109

    (28) value_parameter -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_PARENTHESIS reduce using rule 28 (value_parameter -> expression .)
    COMMA           reduce using rule 28 (value_parameter -> expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 110

    (56) condition -> condition comparison OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS
    (54) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (55) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 132
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 83

state 111

    (77) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS
    (75) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 133
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

    math_operator                  shift and go to state 85

state 112

    (54) condition -> OPEN_PARENTHESIS condition comparison condition . CLOSE_PARENTHESIS
    (53) condition -> condition comparison condition .
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS shift and go to state 134
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! CLOSE_PARENTHESIS [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 53 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 53 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 32

state 113

    (55) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison . condition
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 135
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 114

    (75) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression . CLOSE_PARENTHESIS
    (72) math_expression -> math_expression math_operator math_expression .
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CLOSE_PARENTHESIS shift and go to state 136
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! CLOSE_PARENTHESIS [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! PLUS            [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 72 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 41

state 115

    (76) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator . math_expression
    (71) math_expression -> . NUMBER
    (72) math_expression -> . math_expression math_operator math_expression
    (73) math_expression -> . math_expression math_operator VARIABLE
    (74) math_expression -> . VARIABLE math_operator math_expression
    (75) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (76) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (77) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 75
    VARIABLE        shift and go to state 87
    OPEN_PARENTHESIS shift and go to state 89

    math_expression                shift and go to state 137

state 116

    (13) assignment -> VARIABLE EQUALS expression SEMICOLON .

    FUNCTION        reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    IF              reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    FOR             reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    ECHO            reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    STRING          reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    BOOLEAN         reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NULL            reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    SEMICOLON       reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 13 (assignment -> VARIABLE EQUALS expression SEMICOLON .)


state 117

    (14) assignment -> VARIABLE EQUALS math_expression SEMICOLON .

    FUNCTION        reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    VARIABLE        reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    IF              reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    WHILE           reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    FOR             reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    ECHO            reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    NUMBER          reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    STRING          reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    BOOLEAN         reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    NULL            reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    IDENTIFIER      reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    $end            reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    SEMICOLON       reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 14 (assignment -> VARIABLE EQUALS math_expression SEMICOLON .)


state 118

    (15) assignment -> VARIABLE EQUALS array_structure SEMICOLON .

    FUNCTION        reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    VARIABLE        reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    IF              reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    WHILE           reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    FOR             reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    ECHO            reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    NUMBER          reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    STRING          reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    BOOLEAN         reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    NULL            reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    IDENTIFIER      reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    $end            reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    SEMICOLON       reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 15 (assignment -> VARIABLE EQUALS array_structure SEMICOLON .)


state 119

    (16) assignment -> VARIABLE EQUALS condition SEMICOLON .

    FUNCTION        reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    VARIABLE        reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    IF              reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    WHILE           reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    FOR             reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    ECHO            reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    NUMBER          reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    STRING          reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    BOOLEAN         reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    NULL            reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    $end            reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    SEMICOLON       reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 16 (assignment -> VARIABLE EQUALS condition SEMICOLON .)


state 120

    (78) array_structure -> OPEN_SQUARE_BRACKET key_declaration . CLOSE_SQUARE_BRACKET
    (80) key_declaration -> key_declaration . COMMA key_declaration

    CLOSE_SQUARE_BRACKET shift and go to state 138
    COMMA           shift and go to state 139


state 121

    (79) key_declaration -> expression . EQUALS GREATER_THAN expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    EQUALS          shift and go to state 140
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 122

    (81) key_declaration -> empty .

    CLOSE_SQUARE_BRACKET reduce using rule 81 (key_declaration -> empty .)
    COMMA           reduce using rule 81 (key_declaration -> empty .)


state 123

    (18) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS body_statement_list
    (22) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 141
    COMMA           shift and go to state 142


state 124

    (21) parameter_list -> parameter .

    CLOSE_PARENTHESIS reduce using rule 21 (parameter_list -> parameter .)
    COMMA           reduce using rule 21 (parameter_list -> parameter .)


state 125

    (23) parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 23 (parameter_list -> empty .)
    COMMA           reduce using rule 23 (parameter_list -> empty .)


state 126

    (24) parameter -> VARIABLE .

    CLOSE_PARENTHESIS reduce using rule 24 (parameter -> VARIABLE .)
    COMMA           reduce using rule 24 (parameter -> VARIABLE .)


state 127

    (44) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (19) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (20) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 144

    body_statement_list            shift and go to state 143

state 128

    (50) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (19) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (20) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 144

    body_statement_list            shift and go to state 145

state 129

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON . condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (52) condition -> . expression
    (53) condition -> . condition comparison condition
    (54) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (55) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (56) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (57) condition -> . NOT condition
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 60
    NOT             shift and go to state 8
    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    condition                      shift and go to state 146
    expression                     shift and go to state 57
    function_call                  shift and go to state 21

state 130

    (51) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 147


state 131

    (26) value_parameter_list -> value_parameter_list COMMA . value_parameter
    (28) value_parameter -> . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    value_parameter                shift and go to state 148
    expression                     shift and go to state 109
    function_call                  shift and go to state 21

state 132

    (56) condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .
    (55) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! DOUBLE_EQUALS   [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! NOT_EQUALS      [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN    [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN       [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! AND             [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! OR              [ reduce using rule 56 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]

    comparison                     shift and go to state 113

state 133

    (77) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .
    (76) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! DIVIDE          [ reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MINUS           [ reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MULTIPLY        [ reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MODULO          [ reduce using rule 77 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]

    math_operator                  shift and go to state 115

state 134

    (54) condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .

    DOUBLE_EQUALS   reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    AND             reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    OR              reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    $end            reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 54 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)


state 135

    (55) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    SEMICOLON       reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! DOUBLE_EQUALS   [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! AND             [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! OR              [ reduce using rule 55 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]

    comparison                     shift and go to state 32

state 136

    (75) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .

    PLUS            reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    $end            reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 75 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)


state 137

    (76) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .
    (72) math_expression -> math_expression . math_operator math_expression
    (73) math_expression -> math_expression . math_operator VARIABLE
    (77) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (66) math_operator -> . PLUS
    (67) math_operator -> . DIVIDE
    (68) math_operator -> . MINUS
    (69) math_operator -> . MULTIPLY
    (70) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    SEMICOLON       reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    PLUS            shift and go to state 42
    DIVIDE          shift and go to state 43
    MINUS           shift and go to state 44
    MULTIPLY        shift and go to state 45
    MODULO          shift and go to state 46

  ! PLUS            [ reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 76 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]

    math_operator                  shift and go to state 41

state 138

    (78) array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 78 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)


state 139

    (80) key_declaration -> key_declaration COMMA . key_declaration
    (79) key_declaration -> . expression EQUALS GREATER_THAN expression
    (80) key_declaration -> . key_declaration COMMA key_declaration
    (81) key_declaration -> . empty
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (29) empty -> .
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    COMMA           reduce using rule 29 (empty -> .)
    CLOSE_SQUARE_BRACKET reduce using rule 29 (empty -> .)
    IDENTIFIER      shift and go to state 23

    key_declaration                shift and go to state 149
    expression                     shift and go to state 121
    empty                          shift and go to state 122
    function_call                  shift and go to state 21

state 140

    (79) key_declaration -> expression EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 150


state 141

    (18) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS . body_statement_list
    (19) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (20) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 144

    body_statement_list            shift and go to state 151

state 142

    (22) parameter_list -> parameter_list COMMA . parameter
    (24) parameter -> . VARIABLE

    VARIABLE        shift and go to state 126

    parameter                      shift and go to state 152

state 143

    (44) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 44 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 144

    (19) body_statement_list -> OPEN_CURLY_BRACKET . statement_list CLOSE_CURLY_BRACKET
    (20) body_statement_list -> OPEN_CURLY_BRACKET . empty CLOSE_CURLY_BRACKET
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (29) empty -> .
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . impresion
    (17) expression_statement -> . expression SEMICOLON
    (18) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (13) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (14) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (15) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (16) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (44) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (50) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (45) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (51) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET reduce using rule 29 (empty -> .)
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 30
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    ECHO            shift and go to state 27
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    statement_list                 shift and go to state 153
    empty                          shift and go to state 154
    statement                      shift and go to state 5
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    for_statement                  shift and go to state 16
    impresion                      shift and go to state 17
    expression                     shift and go to state 29
    function_call                  shift and go to state 21

state 145

    (50) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 50 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 146

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition . SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (53) condition -> condition . comparison condition
    (56) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (58) comparison -> . DOUBLE_EQUALS
    (59) comparison -> . NOT_EQUALS
    (60) comparison -> . GREATER_THAN
    (61) comparison -> . LESS_THAN
    (62) comparison -> . GREATER_THAN_OR_EQUALS
    (63) comparison -> . LESS_THAN_OR_EQUALS
    (64) comparison -> . AND
    (65) comparison -> . OR

    SEMICOLON       shift and go to state 155
    DOUBLE_EQUALS   shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    GREATER_THAN    shift and go to state 35
    LESS_THAN       shift and go to state 36
    GREATER_THAN_OR_EQUALS shift and go to state 37
    LESS_THAN_OR_EQUALS shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

    comparison                     shift and go to state 32

state 147

    (51) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .

    FUNCTION        reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NUMBER          reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    BOOLEAN         reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 51 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)


state 148

    (26) value_parameter_list -> value_parameter_list COMMA value_parameter .

    CLOSE_PARENTHESIS reduce using rule 26 (value_parameter_list -> value_parameter_list COMMA value_parameter .)
    COMMA           reduce using rule 26 (value_parameter_list -> value_parameter_list COMMA value_parameter .)


state 149

    (80) key_declaration -> key_declaration COMMA key_declaration .
    (80) key_declaration -> key_declaration . COMMA key_declaration

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSE_SQUARE_BRACKET reduce using rule 80 (key_declaration -> key_declaration COMMA key_declaration .)
    COMMA           shift and go to state 139

  ! COMMA           [ reduce using rule 80 (key_declaration -> key_declaration COMMA key_declaration .) ]


state 150

    (79) key_declaration -> expression EQUALS GREATER_THAN . expression
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    expression                     shift and go to state 156
    function_call                  shift and go to state 21

state 151

    (18) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 18 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)


state 152

    (22) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PARENTHESIS reduce using rule 22 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 22 (parameter_list -> parameter_list COMMA parameter .)


state 153

    (19) body_statement_list -> OPEN_CURLY_BRACKET statement_list . CLOSE_CURLY_BRACKET
    (5) statement_list -> statement_list . statement
    (6) statement -> . expression_statement
    (7) statement -> . function_declaration
    (8) statement -> . assignment
    (9) statement -> . if_statement
    (10) statement -> . while_statement
    (11) statement -> . for_statement
    (12) statement -> . impresion
    (17) expression_statement -> . expression SEMICOLON
    (18) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (13) assignment -> . VARIABLE EQUALS expression SEMICOLON
    (14) assignment -> . VARIABLE EQUALS math_expression SEMICOLON
    (15) assignment -> . VARIABLE EQUALS array_structure SEMICOLON
    (16) assignment -> . VARIABLE EQUALS condition SEMICOLON
    (44) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (50) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (45) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (51) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET shift and go to state 157
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 30
    IF              shift and go to state 24
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    ECHO            shift and go to state 27
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    IDENTIFIER      shift and go to state 23

    statement                      shift and go to state 28
    expression_statement           shift and go to state 11
    function_declaration           shift and go to state 12
    assignment                     shift and go to state 13
    if_statement                   shift and go to state 14
    while_statement                shift and go to state 15
    for_statement                  shift and go to state 16
    impresion                      shift and go to state 17
    expression                     shift and go to state 29
    function_call                  shift and go to state 21

state 154

    (20) body_statement_list -> OPEN_CURLY_BRACKET empty . CLOSE_CURLY_BRACKET

    CLOSE_CURLY_BRACKET shift and go to state 158


state 155

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON . for_update CLOSE_PARENTHESIS body_statement_list
    (48) for_update -> . expression
    (49) for_update -> . empty
    (30) expression -> . VARIABLE
    (31) expression -> . NUMBER
    (32) expression -> . STRING
    (33) expression -> . BOOLEAN
    (34) expression -> . NULL
    (35) expression -> . function_call
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression MULTIPLY expression
    (39) expression -> . expression DIVIDE expression
    (40) expression -> . expression MODULO expression
    (41) expression -> . expression CONCATENATION expression
    (42) expression -> . expression CONCATENATION_ASSIGNMENT expression
    (29) empty -> .
    (43) function_call -> . IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 61
    NUMBER          shift and go to state 31
    STRING          shift and go to state 18
    BOOLEAN         shift and go to state 19
    NULL            shift and go to state 20
    CLOSE_PARENTHESIS reduce using rule 29 (empty -> .)
    IDENTIFIER      shift and go to state 23

    for_update                     shift and go to state 159
    expression                     shift and go to state 160
    empty                          shift and go to state 161
    function_call                  shift and go to state 21

state 156

    (79) key_declaration -> expression EQUALS GREATER_THAN expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_SQUARE_BRACKET reduce using rule 79 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    COMMA           reduce using rule 79 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 157

    (19) body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .

    FUNCTION        reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 19 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)


state 158

    (20) body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .

    FUNCTION        reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    $end            reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 20 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)


state 159

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update . CLOSE_PARENTHESIS body_statement_list

    CLOSE_PARENTHESIS shift and go to state 162


state 160

    (48) for_update -> expression .
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . MULTIPLY expression
    (39) expression -> expression . DIVIDE expression
    (40) expression -> expression . MODULO expression
    (41) expression -> expression . CONCATENATION expression
    (42) expression -> expression . CONCATENATION_ASSIGNMENT expression

    CLOSE_PARENTHESIS reduce using rule 48 (for_update -> expression .)
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    MULTIPLY        shift and go to state 49
    DIVIDE          shift and go to state 50
    MODULO          shift and go to state 51
    CONCATENATION   shift and go to state 52
    CONCATENATION_ASSIGNMENT shift and go to state 53


state 161

    (49) for_update -> empty .

    CLOSE_PARENTHESIS reduce using rule 49 (for_update -> empty .)


state 162

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS . body_statement_list
    (19) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (20) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 144

    body_statement_list            shift and go to state 163

state 163

    (45) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .

    FUNCTION        reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    $end            reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 45 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 10 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 10 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 10 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 10 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 58 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 58 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 90 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 90 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 91 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 112 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 112 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 114 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 114 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 132 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 132 resolved as shift
WARNING: shift/reduce conflict for AND in state 132 resolved as shift
WARNING: shift/reduce conflict for OR in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 133 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 133 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 137 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 9
WARNING: reduce/reduce conflict in state 95 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 95
