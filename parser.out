Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ARRAY
    AS
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    COLON
    COMMENT
    CONST
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    DOUBLE_COLON
    ELSE
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    OPEN_TAG_WITH_ECHO
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statement_list CLOSE_TAG
Rule 2     program -> condition
Rule 3     program -> math_expression
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement_list -> empty
Rule 7     statement -> expression_statement
Rule 8     statement -> function_declaration
Rule 9     statement -> assignment SEMICOLON
Rule 10    statement -> if_statement
Rule 11    statement -> while_statement
Rule 12    statement -> for_statement
Rule 13    statement -> impresion
Rule 14    assignment -> VARIABLE assignment_operator expression
Rule 15    assignment -> VARIABLE EQUALS math_expression
Rule 16    assignment -> VARIABLE EQUALS array_structure
Rule 17    assignment -> VARIABLE EQUALS condition
Rule 18    assignment -> VARIABLE PLUS PLUS
Rule 19    assignment -> VARIABLE EQUALS list_access
Rule 20    assignment -> VARIABLE CONCATENATION_EQUALS list_access
Rule 21    assignment_operator -> PLUS_EQUALS
Rule 22    assignment_operator -> MINUS_EQUALS
Rule 23    assignment_operator -> MULTIPLY_EQUALS
Rule 24    assignment_operator -> DIVIDE_EQUALS
Rule 25    assignment_operator -> MODULO_EQUALS
Rule 26    assignment_operator -> CONCATENATION_EQUALS
Rule 27    assignment_operator -> LEFT_SHIFT_EQUALS
Rule 28    assignment_operator -> RIGHT_SHIFT_EQUALS
Rule 29    assignment_operator -> AND_EQUALS
Rule 30    assignment_operator -> OR_EQUALS
Rule 31    assignment_operator -> XOR_EQUALS
Rule 32    assignment_operator -> EQUALS
Rule 33    expression_statement -> expression SEMICOLON
Rule 34    function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
Rule 35    body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
Rule 36    body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
Rule 37    body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
Rule 38    parameter_list -> parameter
Rule 39    parameter_list -> parameter_list COMMA parameter
Rule 40    parameter_list -> empty
Rule 41    parameter -> VARIABLE
Rule 42    parameter -> assignment
Rule 43    parameter -> expression
Rule 44    value_parameter_list -> value_parameter
Rule 45    value_parameter_list -> value_parameter_list COMMA value_parameter
Rule 46    value_parameter_list -> empty
Rule 47    value_parameter -> expression
Rule 48    empty -> <empty>
Rule 49    expression -> VARIABLE
Rule 50    expression -> NUMBER
Rule 51    expression -> STRING
Rule 52    expression -> BOOLEAN
Rule 53    expression -> NULL
Rule 54    expression -> function_call
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression MULTIPLY expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> expression MODULO expression
Rule 60    expression -> expression CONCATENATION expression
Rule 61    expression -> expression CONCATENATION_EQUALS expression
Rule 62    function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS
Rule 63    if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 64    for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
Rule 65    for_initialization -> assignment
Rule 66    for_initialization -> empty
Rule 67    for_update -> assignment
Rule 68    for_update -> empty
Rule 69    while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 70    impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
Rule 71    condition -> expression
Rule 72    condition -> condition comparison condition
Rule 73    condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
Rule 74    condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
Rule 75    condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
Rule 76    condition -> NOT condition
Rule 77    comparison -> DOUBLE_EQUALS
Rule 78    comparison -> NOT_EQUALS
Rule 79    comparison -> GREATER_THAN
Rule 80    comparison -> LESS_THAN
Rule 81    comparison -> GREATER_THAN_OR_EQUALS
Rule 82    comparison -> LESS_THAN_OR_EQUALS
Rule 83    comparison -> AND
Rule 84    comparison -> OR
Rule 85    math_operator -> PLUS
Rule 86    math_operator -> DIVIDE
Rule 87    math_operator -> MINUS
Rule 88    math_operator -> MULTIPLY
Rule 89    math_operator -> MODULO
Rule 90    math_expression -> NUMBER
Rule 91    math_expression -> math_expression math_operator math_expression
Rule 92    math_expression -> math_expression math_operator VARIABLE
Rule 93    math_expression -> VARIABLE math_operator math_expression
Rule 94    math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
Rule 95    math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
Rule 96    math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
Rule 97    array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
Rule 98    key_declaration -> expression EQUALS GREATER_THAN expression
Rule 99    key_declaration -> key_declaration COMMA key_declaration
Rule 100   key_declaration -> empty
Rule 101   list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 83
AND_EQUALS           : 29
ARRAY                : 
AS                   : 
BOOLEAN              : 52
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSE_CURLY_BRACKET  : 35 36 37
CLOSE_PARENTHESIS    : 34 62 63 64 69 70 73 74 75 94 95 96
CLOSE_SQUARE_BRACKET : 97 101
CLOSE_TAG            : 1
COLON                : 
COMMA                : 39 45 99
COMMENT              : 
CONCATENATION        : 60
CONCATENATION_EQUALS : 20 26 61
CONST                : 
CONTINUE             : 
DECLARE              : 
DEFAULT              : 
DIE                  : 
DIVIDE               : 58 86
DIVIDE_EQUALS        : 24
DO                   : 
DOUBLE_COLON         : 
DOUBLE_EQUALS        : 77
ECHO                 : 70
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 15 16 17 19 32 98
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FOR                  : 64
FUNCTION             : 34
GREATER_THAN         : 79 98
GREATER_THAN_OR_EQUALS : 81
IDENTIFIER           : 34 62
IF                   : 63
LEFT_SHIFT_EQUALS    : 27
LESS_THAN            : 80
LESS_THAN_OR_EQUALS  : 82
MINUS                : 56 87
MINUS_EQUALS         : 22
MODULO               : 59 89
MODULO_EQUALS        : 25
MULTIPLY             : 57 88
MULTIPLY_EQUALS      : 23
NOT                  : 76
NOT_EQUALS           : 78
NULL                 : 53
NUMBER               : 50 90
OPEN_CURLY_BRACKET   : 35 36 37
OPEN_PARENTHESIS     : 34 62 63 64 69 70 73 74 75 94 95 96
OPEN_SQUARE_BRACKET  : 97 101
OPEN_TAG             : 1
OPEN_TAG_WITH_ECHO   : 
OR                   : 84
OR_EQUALS            : 30
PLUS                 : 18 18 55 85
PLUS_EQUALS          : 21
RETURN               : 37
RIGHT_SHIFT_EQUALS   : 28
SEMICOLON            : 9 33 37 64 64 70
STRING               : 51
VARIABLE             : 14 15 16 17 18 19 20 41 49 92 93 101
WHILE                : 69
WHITESPACE           : 
XOR_EQUALS           : 31
error                : 

Nonterminals, with rules where they appear

array_structure      : 16
assignment           : 9 42 65 67
assignment_operator  : 14
body_statement_list  : 34 63 64 69
comparison           : 72 73 74 75
condition            : 2 17 63 64 69 72 72 73 73 74 74 75 75 76
empty                : 6 36 40 46 66 68 100
expression           : 14 33 37 43 47 55 55 56 56 57 57 58 58 59 59 60 60 61 61 71 98 98 101
expression_statement : 7
for_initialization   : 64
for_statement        : 12
for_update           : 64
function_call        : 54
function_declaration : 8
if_statement         : 10
impresion            : 13
key_declaration      : 97 99 99
list_access          : 19 20
math_expression      : 3 15 91 91 92 93 94 94 95 95 96 96
math_operator        : 91 92 93 94 95 96
parameter            : 38 39
parameter_list       : 34 39 62
program              : 0
statement            : 4 5
statement_list       : 1 5 35 37
value_parameter      : 44 45
value_parameter_list : 45 70
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statement_list CLOSE_TAG
    (2) program -> . condition
    (3) program -> . math_expression
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_TAG        shift and go to state 2
    OPEN_PARENTHESIS shift and go to state 6
    NOT             shift and go to state 7
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    program                        shift and go to state 1
    condition                      shift and go to state 3
    math_expression                shift and go to state 4
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statement_list CLOSE_TAG
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement_list -> . empty
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (48) empty -> .
    (33) expression_statement -> . expression SEMICOLON
    (34) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (63) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (69) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (64) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (70) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    CLOSE_TAG       reduce using rule 48 (empty -> .)
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! FOR             [ reduce using rule 48 (empty -> .) ]
  ! ECHO            [ reduce using rule 48 (empty -> .) ]
  ! NUMBER          [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 48 (empty -> .) ]
  ! NULL            [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]

    statement_list                 shift and go to state 15
    statement                      shift and go to state 16
    empty                          shift and go to state 17
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    expression                     shift and go to state 25
    function_call                  shift and go to state 13

state 3

    (2) program -> condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    $end            reduce using rule 2 (program -> condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 4

    (3) program -> math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    $end            reduce using rule 3 (program -> math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 42

state 5

    (71) condition -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    DOUBLE_EQUALS   reduce using rule 71 (condition -> expression .)
    NOT_EQUALS      reduce using rule 71 (condition -> expression .)
    GREATER_THAN    reduce using rule 71 (condition -> expression .)
    LESS_THAN       reduce using rule 71 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 71 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 71 (condition -> expression .)
    AND             reduce using rule 71 (condition -> expression .)
    OR              reduce using rule 71 (condition -> expression .)
    $end            reduce using rule 71 (condition -> expression .)
    CLOSE_PARENTHESIS reduce using rule 71 (condition -> expression .)
    SEMICOLON       reduce using rule 71 (condition -> expression .)
    COMMA           reduce using rule 71 (condition -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 6

    (73) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (94) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 6
    NOT             shift and go to state 7
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 55
    math_expression                shift and go to state 56
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 7

    (76) condition -> NOT . condition
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 57
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 8

    (90) math_expression -> NUMBER .
    (50) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 50 (expression -> NUMBER .)
    PLUS            reduce using rule 50 (expression -> NUMBER .)
    MINUS           reduce using rule 50 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 50 (expression -> NUMBER .)
    DIVIDE          reduce using rule 50 (expression -> NUMBER .)
    MODULO          reduce using rule 50 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 50 (expression -> NUMBER .)
    CONCATENATION_EQUALS reduce using rule 50 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 50 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 50 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 50 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 50 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 50 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 50 (expression -> NUMBER .)
    AND             reduce using rule 50 (expression -> NUMBER .)
    OR              reduce using rule 50 (expression -> NUMBER .)
    $end            reduce using rule 50 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 50 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 50 (expression -> NUMBER .)
    COMMA           reduce using rule 50 (expression -> NUMBER .)

  ! PLUS            [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! $end            [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 90 (math_expression -> NUMBER .) ]
  ! COMMA           [ reduce using rule 90 (math_expression -> NUMBER .) ]


state 9

    (93) math_expression -> VARIABLE . math_operator math_expression
    (49) expression -> VARIABLE .
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 49 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    AND             reduce using rule 49 (expression -> VARIABLE .)
    OR              reduce using rule 49 (expression -> VARIABLE .)
    $end            reduce using rule 49 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 49 (expression -> VARIABLE .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 49 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 60

state 10

    (51) expression -> STRING .

    PLUS            reduce using rule 51 (expression -> STRING .)
    MINUS           reduce using rule 51 (expression -> STRING .)
    MULTIPLY        reduce using rule 51 (expression -> STRING .)
    DIVIDE          reduce using rule 51 (expression -> STRING .)
    MODULO          reduce using rule 51 (expression -> STRING .)
    CONCATENATION   reduce using rule 51 (expression -> STRING .)
    CONCATENATION_EQUALS reduce using rule 51 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 51 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 51 (expression -> STRING .)
    GREATER_THAN    reduce using rule 51 (expression -> STRING .)
    LESS_THAN       reduce using rule 51 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 51 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 51 (expression -> STRING .)
    AND             reduce using rule 51 (expression -> STRING .)
    OR              reduce using rule 51 (expression -> STRING .)
    $end            reduce using rule 51 (expression -> STRING .)
    SEMICOLON       reduce using rule 51 (expression -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 51 (expression -> STRING .)
    COMMA           reduce using rule 51 (expression -> STRING .)
    EQUALS          reduce using rule 51 (expression -> STRING .)
    CLOSE_SQUARE_BRACKET reduce using rule 51 (expression -> STRING .)


state 11

    (52) expression -> BOOLEAN .

    PLUS            reduce using rule 52 (expression -> BOOLEAN .)
    MINUS           reduce using rule 52 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 52 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 52 (expression -> BOOLEAN .)
    MODULO          reduce using rule 52 (expression -> BOOLEAN .)
    CONCATENATION   reduce using rule 52 (expression -> BOOLEAN .)
    CONCATENATION_EQUALS reduce using rule 52 (expression -> BOOLEAN .)
    DOUBLE_EQUALS   reduce using rule 52 (expression -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 52 (expression -> BOOLEAN .)
    GREATER_THAN    reduce using rule 52 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 52 (expression -> BOOLEAN .)
    GREATER_THAN_OR_EQUALS reduce using rule 52 (expression -> BOOLEAN .)
    LESS_THAN_OR_EQUALS reduce using rule 52 (expression -> BOOLEAN .)
    AND             reduce using rule 52 (expression -> BOOLEAN .)
    OR              reduce using rule 52 (expression -> BOOLEAN .)
    $end            reduce using rule 52 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 52 (expression -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 52 (expression -> BOOLEAN .)
    COMMA           reduce using rule 52 (expression -> BOOLEAN .)
    EQUALS          reduce using rule 52 (expression -> BOOLEAN .)
    CLOSE_SQUARE_BRACKET reduce using rule 52 (expression -> BOOLEAN .)


state 12

    (53) expression -> NULL .

    PLUS            reduce using rule 53 (expression -> NULL .)
    MINUS           reduce using rule 53 (expression -> NULL .)
    MULTIPLY        reduce using rule 53 (expression -> NULL .)
    DIVIDE          reduce using rule 53 (expression -> NULL .)
    MODULO          reduce using rule 53 (expression -> NULL .)
    CONCATENATION   reduce using rule 53 (expression -> NULL .)
    CONCATENATION_EQUALS reduce using rule 53 (expression -> NULL .)
    DOUBLE_EQUALS   reduce using rule 53 (expression -> NULL .)
    NOT_EQUALS      reduce using rule 53 (expression -> NULL .)
    GREATER_THAN    reduce using rule 53 (expression -> NULL .)
    LESS_THAN       reduce using rule 53 (expression -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 53 (expression -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 53 (expression -> NULL .)
    AND             reduce using rule 53 (expression -> NULL .)
    OR              reduce using rule 53 (expression -> NULL .)
    $end            reduce using rule 53 (expression -> NULL .)
    SEMICOLON       reduce using rule 53 (expression -> NULL .)
    CLOSE_PARENTHESIS reduce using rule 53 (expression -> NULL .)
    COMMA           reduce using rule 53 (expression -> NULL .)
    EQUALS          reduce using rule 53 (expression -> NULL .)
    CLOSE_SQUARE_BRACKET reduce using rule 53 (expression -> NULL .)


state 13

    (54) expression -> function_call .

    PLUS            reduce using rule 54 (expression -> function_call .)
    MINUS           reduce using rule 54 (expression -> function_call .)
    MULTIPLY        reduce using rule 54 (expression -> function_call .)
    DIVIDE          reduce using rule 54 (expression -> function_call .)
    MODULO          reduce using rule 54 (expression -> function_call .)
    CONCATENATION   reduce using rule 54 (expression -> function_call .)
    CONCATENATION_EQUALS reduce using rule 54 (expression -> function_call .)
    DOUBLE_EQUALS   reduce using rule 54 (expression -> function_call .)
    NOT_EQUALS      reduce using rule 54 (expression -> function_call .)
    GREATER_THAN    reduce using rule 54 (expression -> function_call .)
    LESS_THAN       reduce using rule 54 (expression -> function_call .)
    GREATER_THAN_OR_EQUALS reduce using rule 54 (expression -> function_call .)
    LESS_THAN_OR_EQUALS reduce using rule 54 (expression -> function_call .)
    AND             reduce using rule 54 (expression -> function_call .)
    OR              reduce using rule 54 (expression -> function_call .)
    $end            reduce using rule 54 (expression -> function_call .)
    SEMICOLON       reduce using rule 54 (expression -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 54 (expression -> function_call .)
    COMMA           reduce using rule 54 (expression -> function_call .)
    EQUALS          reduce using rule 54 (expression -> function_call .)
    CLOSE_SQUARE_BRACKET reduce using rule 54 (expression -> function_call .)


state 14

    (62) function_call -> IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 61


state 15

    (1) program -> OPEN_TAG statement_list . CLOSE_TAG
    (5) statement_list -> statement_list . statement
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (33) expression_statement -> . expression SEMICOLON
    (34) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (63) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (69) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (64) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (70) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    CLOSE_TAG       shift and go to state 62
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    statement                      shift and go to state 63
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    expression                     shift and go to state 25
    function_call                  shift and go to state 13

state 16

    (4) statement_list -> statement .

    CLOSE_TAG       reduce using rule 4 (statement_list -> statement .)
    FUNCTION        reduce using rule 4 (statement_list -> statement .)
    VARIABLE        reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    ECHO            reduce using rule 4 (statement_list -> statement .)
    NUMBER          reduce using rule 4 (statement_list -> statement .)
    STRING          reduce using rule 4 (statement_list -> statement .)
    BOOLEAN         reduce using rule 4 (statement_list -> statement .)
    NULL            reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    CLOSE_CURLY_BRACKET reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 17

    (6) statement_list -> empty .

    CLOSE_TAG       reduce using rule 6 (statement_list -> empty .)
    FUNCTION        reduce using rule 6 (statement_list -> empty .)
    VARIABLE        reduce using rule 6 (statement_list -> empty .)
    IF              reduce using rule 6 (statement_list -> empty .)
    WHILE           reduce using rule 6 (statement_list -> empty .)
    FOR             reduce using rule 6 (statement_list -> empty .)
    ECHO            reduce using rule 6 (statement_list -> empty .)
    NUMBER          reduce using rule 6 (statement_list -> empty .)
    STRING          reduce using rule 6 (statement_list -> empty .)
    BOOLEAN         reduce using rule 6 (statement_list -> empty .)
    NULL            reduce using rule 6 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 6 (statement_list -> empty .)


state 18

    (7) statement -> expression_statement .

    CLOSE_TAG       reduce using rule 7 (statement -> expression_statement .)
    FUNCTION        reduce using rule 7 (statement -> expression_statement .)
    VARIABLE        reduce using rule 7 (statement -> expression_statement .)
    IF              reduce using rule 7 (statement -> expression_statement .)
    WHILE           reduce using rule 7 (statement -> expression_statement .)
    FOR             reduce using rule 7 (statement -> expression_statement .)
    ECHO            reduce using rule 7 (statement -> expression_statement .)
    NUMBER          reduce using rule 7 (statement -> expression_statement .)
    STRING          reduce using rule 7 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 7 (statement -> expression_statement .)
    NULL            reduce using rule 7 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> expression_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 7 (statement -> expression_statement .)
    RETURN          reduce using rule 7 (statement -> expression_statement .)


state 19

    (8) statement -> function_declaration .

    CLOSE_TAG       reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    VARIABLE        reduce using rule 8 (statement -> function_declaration .)
    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    FOR             reduce using rule 8 (statement -> function_declaration .)
    ECHO            reduce using rule 8 (statement -> function_declaration .)
    NUMBER          reduce using rule 8 (statement -> function_declaration .)
    STRING          reduce using rule 8 (statement -> function_declaration .)
    BOOLEAN         reduce using rule 8 (statement -> function_declaration .)
    NULL            reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    CLOSE_CURLY_BRACKET reduce using rule 8 (statement -> function_declaration .)
    RETURN          reduce using rule 8 (statement -> function_declaration .)


state 20

    (9) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 64


state 21

    (10) statement -> if_statement .

    CLOSE_TAG       reduce using rule 10 (statement -> if_statement .)
    FUNCTION        reduce using rule 10 (statement -> if_statement .)
    VARIABLE        reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    WHILE           reduce using rule 10 (statement -> if_statement .)
    FOR             reduce using rule 10 (statement -> if_statement .)
    ECHO            reduce using rule 10 (statement -> if_statement .)
    NUMBER          reduce using rule 10 (statement -> if_statement .)
    STRING          reduce using rule 10 (statement -> if_statement .)
    BOOLEAN         reduce using rule 10 (statement -> if_statement .)
    NULL            reduce using rule 10 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> if_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)


state 22

    (11) statement -> while_statement .

    CLOSE_TAG       reduce using rule 11 (statement -> while_statement .)
    FUNCTION        reduce using rule 11 (statement -> while_statement .)
    VARIABLE        reduce using rule 11 (statement -> while_statement .)
    IF              reduce using rule 11 (statement -> while_statement .)
    WHILE           reduce using rule 11 (statement -> while_statement .)
    FOR             reduce using rule 11 (statement -> while_statement .)
    ECHO            reduce using rule 11 (statement -> while_statement .)
    NUMBER          reduce using rule 11 (statement -> while_statement .)
    STRING          reduce using rule 11 (statement -> while_statement .)
    BOOLEAN         reduce using rule 11 (statement -> while_statement .)
    NULL            reduce using rule 11 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> while_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 11 (statement -> while_statement .)
    RETURN          reduce using rule 11 (statement -> while_statement .)


state 23

    (12) statement -> for_statement .

    CLOSE_TAG       reduce using rule 12 (statement -> for_statement .)
    FUNCTION        reduce using rule 12 (statement -> for_statement .)
    VARIABLE        reduce using rule 12 (statement -> for_statement .)
    IF              reduce using rule 12 (statement -> for_statement .)
    WHILE           reduce using rule 12 (statement -> for_statement .)
    FOR             reduce using rule 12 (statement -> for_statement .)
    ECHO            reduce using rule 12 (statement -> for_statement .)
    NUMBER          reduce using rule 12 (statement -> for_statement .)
    STRING          reduce using rule 12 (statement -> for_statement .)
    BOOLEAN         reduce using rule 12 (statement -> for_statement .)
    NULL            reduce using rule 12 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> for_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 12 (statement -> for_statement .)
    RETURN          reduce using rule 12 (statement -> for_statement .)


state 24

    (13) statement -> impresion .

    CLOSE_TAG       reduce using rule 13 (statement -> impresion .)
    FUNCTION        reduce using rule 13 (statement -> impresion .)
    VARIABLE        reduce using rule 13 (statement -> impresion .)
    IF              reduce using rule 13 (statement -> impresion .)
    WHILE           reduce using rule 13 (statement -> impresion .)
    FOR             reduce using rule 13 (statement -> impresion .)
    ECHO            reduce using rule 13 (statement -> impresion .)
    NUMBER          reduce using rule 13 (statement -> impresion .)
    STRING          reduce using rule 13 (statement -> impresion .)
    BOOLEAN         reduce using rule 13 (statement -> impresion .)
    NULL            reduce using rule 13 (statement -> impresion .)
    IDENTIFIER      reduce using rule 13 (statement -> impresion .)
    CLOSE_CURLY_BRACKET reduce using rule 13 (statement -> impresion .)
    RETURN          reduce using rule 13 (statement -> impresion .)


state 25

    (33) expression_statement -> expression . SEMICOLON
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       shift and go to state 65
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 26

    (34) function_declaration -> FUNCTION . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    IDENTIFIER      shift and go to state 66


state 27

    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . EQUALS list_access
    (20) assignment -> VARIABLE . CONCATENATION_EQUALS list_access
    (49) expression -> VARIABLE .
    (21) assignment_operator -> . PLUS_EQUALS
    (22) assignment_operator -> . MINUS_EQUALS
    (23) assignment_operator -> . MULTIPLY_EQUALS
    (24) assignment_operator -> . DIVIDE_EQUALS
    (25) assignment_operator -> . MODULO_EQUALS
    (26) assignment_operator -> . CONCATENATION_EQUALS
    (27) assignment_operator -> . LEFT_SHIFT_EQUALS
    (28) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (29) assignment_operator -> . AND_EQUALS
    (30) assignment_operator -> . OR_EQUALS
    (31) assignment_operator -> . XOR_EQUALS
    (32) assignment_operator -> . EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for CONCATENATION_EQUALS resolved as shift
    EQUALS          shift and go to state 68
    PLUS            shift and go to state 69
    CONCATENATION_EQUALS shift and go to state 70
    SEMICOLON       reduce using rule 49 (expression -> VARIABLE .)
    MINUS           reduce using rule 49 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 49 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 49 (expression -> VARIABLE .)
    MODULO          reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 49 (expression -> VARIABLE .)
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    LEFT_SHIFT_EQUALS shift and go to state 76
    RIGHT_SHIFT_EQUALS shift and go to state 77
    AND_EQUALS      shift and go to state 78
    OR_EQUALS       shift and go to state 79
    XOR_EQUALS      shift and go to state 80

  ! PLUS            [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! CONCATENATION_EQUALS [ reduce using rule 49 (expression -> VARIABLE .) ]

    assignment_operator            shift and go to state 67

state 28

    (63) if_statement -> IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 81


state 29

    (69) while_statement -> WHILE . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 82


state 30

    (64) for_statement -> FOR . OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 83


state 31

    (70) impresion -> ECHO . OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON

    OPEN_PARENTHESIS shift and go to state 84


state 32

    (50) expression -> NUMBER .

    SEMICOLON       reduce using rule 50 (expression -> NUMBER .)
    PLUS            reduce using rule 50 (expression -> NUMBER .)
    MINUS           reduce using rule 50 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 50 (expression -> NUMBER .)
    DIVIDE          reduce using rule 50 (expression -> NUMBER .)
    MODULO          reduce using rule 50 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 50 (expression -> NUMBER .)
    CONCATENATION_EQUALS reduce using rule 50 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 50 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 50 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 50 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 50 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 50 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 50 (expression -> NUMBER .)
    AND             reduce using rule 50 (expression -> NUMBER .)
    OR              reduce using rule 50 (expression -> NUMBER .)
    $end            reduce using rule 50 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 50 (expression -> NUMBER .)
    COMMA           reduce using rule 50 (expression -> NUMBER .)
    EQUALS          reduce using rule 50 (expression -> NUMBER .)
    CLOSE_SQUARE_BRACKET reduce using rule 50 (expression -> NUMBER .)


state 33

    (72) condition -> condition comparison . condition
    (75) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 86
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 85
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 34

    (77) comparison -> DOUBLE_EQUALS .

    OPEN_PARENTHESIS reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    NOT             reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    VARIABLE        reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    NUMBER          reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    STRING          reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    BOOLEAN         reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    NULL            reduce using rule 77 (comparison -> DOUBLE_EQUALS .)
    IDENTIFIER      reduce using rule 77 (comparison -> DOUBLE_EQUALS .)


state 35

    (78) comparison -> NOT_EQUALS .

    OPEN_PARENTHESIS reduce using rule 78 (comparison -> NOT_EQUALS .)
    NOT             reduce using rule 78 (comparison -> NOT_EQUALS .)
    VARIABLE        reduce using rule 78 (comparison -> NOT_EQUALS .)
    NUMBER          reduce using rule 78 (comparison -> NOT_EQUALS .)
    STRING          reduce using rule 78 (comparison -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 78 (comparison -> NOT_EQUALS .)
    NULL            reduce using rule 78 (comparison -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 78 (comparison -> NOT_EQUALS .)


state 36

    (79) comparison -> GREATER_THAN .

    OPEN_PARENTHESIS reduce using rule 79 (comparison -> GREATER_THAN .)
    NOT             reduce using rule 79 (comparison -> GREATER_THAN .)
    VARIABLE        reduce using rule 79 (comparison -> GREATER_THAN .)
    NUMBER          reduce using rule 79 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 79 (comparison -> GREATER_THAN .)
    BOOLEAN         reduce using rule 79 (comparison -> GREATER_THAN .)
    NULL            reduce using rule 79 (comparison -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 79 (comparison -> GREATER_THAN .)


state 37

    (80) comparison -> LESS_THAN .

    OPEN_PARENTHESIS reduce using rule 80 (comparison -> LESS_THAN .)
    NOT             reduce using rule 80 (comparison -> LESS_THAN .)
    VARIABLE        reduce using rule 80 (comparison -> LESS_THAN .)
    NUMBER          reduce using rule 80 (comparison -> LESS_THAN .)
    STRING          reduce using rule 80 (comparison -> LESS_THAN .)
    BOOLEAN         reduce using rule 80 (comparison -> LESS_THAN .)
    NULL            reduce using rule 80 (comparison -> LESS_THAN .)
    IDENTIFIER      reduce using rule 80 (comparison -> LESS_THAN .)


state 38

    (81) comparison -> GREATER_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    NOT             reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    STRING          reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    NULL            reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 81 (comparison -> GREATER_THAN_OR_EQUALS .)


state 39

    (82) comparison -> LESS_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    NOT             reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    STRING          reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    NULL            reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 82 (comparison -> LESS_THAN_OR_EQUALS .)


state 40

    (83) comparison -> AND .

    OPEN_PARENTHESIS reduce using rule 83 (comparison -> AND .)
    NOT             reduce using rule 83 (comparison -> AND .)
    VARIABLE        reduce using rule 83 (comparison -> AND .)
    NUMBER          reduce using rule 83 (comparison -> AND .)
    STRING          reduce using rule 83 (comparison -> AND .)
    BOOLEAN         reduce using rule 83 (comparison -> AND .)
    NULL            reduce using rule 83 (comparison -> AND .)
    IDENTIFIER      reduce using rule 83 (comparison -> AND .)


state 41

    (84) comparison -> OR .

    OPEN_PARENTHESIS reduce using rule 84 (comparison -> OR .)
    NOT             reduce using rule 84 (comparison -> OR .)
    VARIABLE        reduce using rule 84 (comparison -> OR .)
    NUMBER          reduce using rule 84 (comparison -> OR .)
    STRING          reduce using rule 84 (comparison -> OR .)
    BOOLEAN         reduce using rule 84 (comparison -> OR .)
    NULL            reduce using rule 84 (comparison -> OR .)
    IDENTIFIER      reduce using rule 84 (comparison -> OR .)


state 42

    (91) math_expression -> math_expression math_operator . math_expression
    (92) math_expression -> math_expression math_operator . VARIABLE
    (96) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 88
    OPEN_PARENTHESIS shift and go to state 89
    NUMBER          shift and go to state 90

    math_expression                shift and go to state 87

state 43

    (85) math_operator -> PLUS .

    VARIABLE        reduce using rule 85 (math_operator -> PLUS .)
    OPEN_PARENTHESIS reduce using rule 85 (math_operator -> PLUS .)
    NUMBER          reduce using rule 85 (math_operator -> PLUS .)


state 44

    (86) math_operator -> DIVIDE .

    VARIABLE        reduce using rule 86 (math_operator -> DIVIDE .)
    OPEN_PARENTHESIS reduce using rule 86 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 86 (math_operator -> DIVIDE .)


state 45

    (87) math_operator -> MINUS .

    VARIABLE        reduce using rule 87 (math_operator -> MINUS .)
    OPEN_PARENTHESIS reduce using rule 87 (math_operator -> MINUS .)
    NUMBER          reduce using rule 87 (math_operator -> MINUS .)


state 46

    (88) math_operator -> MULTIPLY .

    VARIABLE        reduce using rule 88 (math_operator -> MULTIPLY .)
    OPEN_PARENTHESIS reduce using rule 88 (math_operator -> MULTIPLY .)
    NUMBER          reduce using rule 88 (math_operator -> MULTIPLY .)


state 47

    (89) math_operator -> MODULO .

    VARIABLE        reduce using rule 89 (math_operator -> MODULO .)
    OPEN_PARENTHESIS reduce using rule 89 (math_operator -> MODULO .)
    NUMBER          reduce using rule 89 (math_operator -> MODULO .)


state 48

    (55) expression -> expression PLUS . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 91
    function_call                  shift and go to state 13

state 49

    (56) expression -> expression MINUS . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 92
    function_call                  shift and go to state 13

state 50

    (57) expression -> expression MULTIPLY . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 93
    function_call                  shift and go to state 13

state 51

    (58) expression -> expression DIVIDE . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 94
    function_call                  shift and go to state 13

state 52

    (59) expression -> expression MODULO . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 95
    function_call                  shift and go to state 13

state 53

    (60) expression -> expression CONCATENATION . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 96
    function_call                  shift and go to state 13

state 54

    (61) expression -> expression CONCATENATION_EQUALS . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 97
    function_call                  shift and go to state 13

state 55

    (73) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 99
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 98

state 56

    (94) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 101
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 100

state 57

    (76) condition -> NOT condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 76 (condition -> NOT condition .)
    CLOSE_PARENTHESIS reduce using rule 76 (condition -> NOT condition .)
    SEMICOLON       reduce using rule 76 (condition -> NOT condition .)
    COMMA           reduce using rule 76 (condition -> NOT condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 76 (condition -> NOT condition .) ]
  ! NOT_EQUALS      [ reduce using rule 76 (condition -> NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 76 (condition -> NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 76 (condition -> NOT condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 76 (condition -> NOT condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 76 (condition -> NOT condition .) ]
  ! AND             [ reduce using rule 76 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 76 (condition -> NOT condition .) ]

    comparison                     shift and go to state 33

state 58

    (73) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 55
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 59

    (49) expression -> VARIABLE .

    PLUS            reduce using rule 49 (expression -> VARIABLE .)
    MINUS           reduce using rule 49 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 49 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 49 (expression -> VARIABLE .)
    MODULO          reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 49 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    AND             reduce using rule 49 (expression -> VARIABLE .)
    OR              reduce using rule 49 (expression -> VARIABLE .)
    $end            reduce using rule 49 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 49 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 49 (expression -> VARIABLE .)
    COMMA           reduce using rule 49 (expression -> VARIABLE .)
    EQUALS          reduce using rule 49 (expression -> VARIABLE .)
    CLOSE_SQUARE_BRACKET reduce using rule 49 (expression -> VARIABLE .)


state 60

    (93) math_expression -> VARIABLE math_operator . math_expression
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 90
    VARIABLE        shift and go to state 102
    OPEN_PARENTHESIS shift and go to state 104

    math_expression                shift and go to state 103

state 61

    (62) function_call -> IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS
    (38) parameter_list -> . parameter
    (39) parameter_list -> . parameter_list COMMA parameter
    (40) parameter_list -> . empty
    (41) parameter -> . VARIABLE
    (42) parameter -> . assignment
    (43) parameter -> . expression
    (48) empty -> .
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 108
    CLOSE_PARENTHESIS reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter_list                 shift and go to state 105
    parameter                      shift and go to state 106
    empty                          shift and go to state 107
    assignment                     shift and go to state 109
    expression                     shift and go to state 110
    function_call                  shift and go to state 13

state 62

    (1) program -> OPEN_TAG statement_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statement_list CLOSE_TAG .)


state 63

    (5) statement_list -> statement_list statement .

    CLOSE_TAG       reduce using rule 5 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 5 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 5 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 5 (statement_list -> statement_list statement .)
    STRING          reduce using rule 5 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 5 (statement_list -> statement_list statement .)
    NULL            reduce using rule 5 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    CLOSE_CURLY_BRACKET reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 64

    (9) statement -> assignment SEMICOLON .

    CLOSE_TAG       reduce using rule 9 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 9 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 9 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 9 (statement -> assignment SEMICOLON .)
    ECHO            reduce using rule 9 (statement -> assignment SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> assignment SEMICOLON .)
    STRING          reduce using rule 9 (statement -> assignment SEMICOLON .)
    BOOLEAN         reduce using rule 9 (statement -> assignment SEMICOLON .)
    NULL            reduce using rule 9 (statement -> assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (statement -> assignment SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 9 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> assignment SEMICOLON .)


state 65

    (33) expression_statement -> expression SEMICOLON .

    CLOSE_TAG       reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    VARIABLE        reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 33 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 33 (expression_statement -> expression SEMICOLON .)


state 66

    (34) function_declaration -> FUNCTION IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 111


state 67

    (14) assignment -> VARIABLE assignment_operator . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 112
    function_call                  shift and go to state 13

state 68

    (15) assignment -> VARIABLE EQUALS . math_expression
    (16) assignment -> VARIABLE EQUALS . array_structure
    (17) assignment -> VARIABLE EQUALS . condition
    (19) assignment -> VARIABLE EQUALS . list_access
    (32) assignment_operator -> EQUALS .
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (97) array_structure -> . OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (101) list_access -> . VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 113
    OPEN_PARENTHESIS shift and go to state 118
    OPEN_SQUARE_BRACKET shift and go to state 119
    NOT             shift and go to state 7
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! VARIABLE        [ reduce using rule 32 (assignment_operator -> EQUALS .) ]
  ! NUMBER          [ reduce using rule 32 (assignment_operator -> EQUALS .) ]
  ! STRING          [ reduce using rule 32 (assignment_operator -> EQUALS .) ]
  ! BOOLEAN         [ reduce using rule 32 (assignment_operator -> EQUALS .) ]
  ! NULL            [ reduce using rule 32 (assignment_operator -> EQUALS .) ]
  ! IDENTIFIER      [ reduce using rule 32 (assignment_operator -> EQUALS .) ]

    math_expression                shift and go to state 114
    array_structure                shift and go to state 115
    condition                      shift and go to state 116
    list_access                    shift and go to state 117
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 69

    (18) assignment -> VARIABLE PLUS . PLUS

    PLUS            shift and go to state 120


state 70

    (20) assignment -> VARIABLE CONCATENATION_EQUALS . list_access
    (26) assignment_operator -> CONCATENATION_EQUALS .
    (101) list_access -> . VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET

    VARIABLE        reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)
    NUMBER          reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)
    STRING          reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)
    BOOLEAN         reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)
    NULL            reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)
    IDENTIFIER      reduce using rule 26 (assignment_operator -> CONCATENATION_EQUALS .)

  ! VARIABLE        [ shift and go to state 121 ]

    list_access                    shift and go to state 122

state 71

    (21) assignment_operator -> PLUS_EQUALS .

    VARIABLE        reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)
    NUMBER          reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)
    BOOLEAN         reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 21 (assignment_operator -> PLUS_EQUALS .)


state 72

    (22) assignment_operator -> MINUS_EQUALS .

    VARIABLE        reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)
    NUMBER          reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)
    STRING          reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)
    BOOLEAN         reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)
    NULL            reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 22 (assignment_operator -> MINUS_EQUALS .)


state 73

    (23) assignment_operator -> MULTIPLY_EQUALS .

    VARIABLE        reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING          reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)
    BOOLEAN         reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)
    NULL            reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)
    IDENTIFIER      reduce using rule 23 (assignment_operator -> MULTIPLY_EQUALS .)


state 74

    (24) assignment_operator -> DIVIDE_EQUALS .

    VARIABLE        reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)
    STRING          reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)
    BOOLEAN         reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)
    NULL            reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 24 (assignment_operator -> DIVIDE_EQUALS .)


state 75

    (25) assignment_operator -> MODULO_EQUALS .

    VARIABLE        reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)
    NUMBER          reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)
    STRING          reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)
    BOOLEAN         reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)
    NULL            reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)
    IDENTIFIER      reduce using rule 25 (assignment_operator -> MODULO_EQUALS .)


state 76

    (27) assignment_operator -> LEFT_SHIFT_EQUALS .

    VARIABLE        reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING          reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    BOOLEAN         reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NULL            reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 27 (assignment_operator -> LEFT_SHIFT_EQUALS .)


state 77

    (28) assignment_operator -> RIGHT_SHIFT_EQUALS .

    VARIABLE        reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING          reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    BOOLEAN         reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NULL            reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 28 (assignment_operator -> RIGHT_SHIFT_EQUALS .)


state 78

    (29) assignment_operator -> AND_EQUALS .

    VARIABLE        reduce using rule 29 (assignment_operator -> AND_EQUALS .)
    NUMBER          reduce using rule 29 (assignment_operator -> AND_EQUALS .)
    STRING          reduce using rule 29 (assignment_operator -> AND_EQUALS .)
    BOOLEAN         reduce using rule 29 (assignment_operator -> AND_EQUALS .)
    NULL            reduce using rule 29 (assignment_operator -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 29 (assignment_operator -> AND_EQUALS .)


state 79

    (30) assignment_operator -> OR_EQUALS .

    VARIABLE        reduce using rule 30 (assignment_operator -> OR_EQUALS .)
    NUMBER          reduce using rule 30 (assignment_operator -> OR_EQUALS .)
    STRING          reduce using rule 30 (assignment_operator -> OR_EQUALS .)
    BOOLEAN         reduce using rule 30 (assignment_operator -> OR_EQUALS .)
    NULL            reduce using rule 30 (assignment_operator -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 30 (assignment_operator -> OR_EQUALS .)


state 80

    (31) assignment_operator -> XOR_EQUALS .

    VARIABLE        reduce using rule 31 (assignment_operator -> XOR_EQUALS .)
    NUMBER          reduce using rule 31 (assignment_operator -> XOR_EQUALS .)
    STRING          reduce using rule 31 (assignment_operator -> XOR_EQUALS .)
    BOOLEAN         reduce using rule 31 (assignment_operator -> XOR_EQUALS .)
    NULL            reduce using rule 31 (assignment_operator -> XOR_EQUALS .)
    IDENTIFIER      reduce using rule 31 (assignment_operator -> XOR_EQUALS .)


state 81

    (63) if_statement -> IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 123
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 82

    (69) while_statement -> WHILE OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 124
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 83

    (64) for_statement -> FOR OPEN_PARENTHESIS . for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (65) for_initialization -> . assignment
    (66) for_initialization -> . empty
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (48) empty -> .

    VARIABLE        shift and go to state 128
    SEMICOLON       reduce using rule 48 (empty -> .)

    for_initialization             shift and go to state 125
    assignment                     shift and go to state 126
    empty                          shift and go to state 127

state 84

    (70) impresion -> ECHO OPEN_PARENTHESIS . value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (44) value_parameter_list -> . value_parameter
    (45) value_parameter_list -> . value_parameter_list COMMA value_parameter
    (46) value_parameter_list -> . empty
    (47) value_parameter -> . expression
    (48) empty -> .
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    value_parameter_list           shift and go to state 129
    value_parameter                shift and go to state 130
    empty                          shift and go to state 131
    expression                     shift and go to state 132
    function_call                  shift and go to state 13

state 85

    (72) condition -> condition comparison condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 72 (condition -> condition comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 72 (condition -> condition comparison condition .)
    SEMICOLON       reduce using rule 72 (condition -> condition comparison condition .)
    COMMA           reduce using rule 72 (condition -> condition comparison condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 72 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 33

state 86

    (75) condition -> condition comparison OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS
    (73) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 133
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 87

    (91) math_expression -> math_expression math_operator math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 91 (math_expression -> math_expression math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 91 (math_expression -> math_expression math_operator math_expression .)
    SEMICOLON       reduce using rule 91 (math_expression -> math_expression math_operator math_expression .)
    COMMA           reduce using rule 91 (math_expression -> math_expression math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 88

    (92) math_expression -> math_expression math_operator VARIABLE .
    (93) math_expression -> VARIABLE . math_operator math_expression
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .)
    SEMICOLON       reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .)
    COMMA           reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MINUS           [ reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MODULO          [ reduce using rule 92 (math_expression -> math_expression math_operator VARIABLE .) ]

    math_operator                  shift and go to state 60

state 89

    (96) math_expression -> math_expression math_operator OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS
    (94) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 90
    VARIABLE        shift and go to state 102
    OPEN_PARENTHESIS shift and go to state 104

    math_expression                shift and go to state 134

state 90

    (90) math_expression -> NUMBER .

    PLUS            reduce using rule 90 (math_expression -> NUMBER .)
    DIVIDE          reduce using rule 90 (math_expression -> NUMBER .)
    MINUS           reduce using rule 90 (math_expression -> NUMBER .)
    MULTIPLY        reduce using rule 90 (math_expression -> NUMBER .)
    MODULO          reduce using rule 90 (math_expression -> NUMBER .)
    $end            reduce using rule 90 (math_expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 90 (math_expression -> NUMBER .)
    SEMICOLON       reduce using rule 90 (math_expression -> NUMBER .)
    COMMA           reduce using rule 90 (math_expression -> NUMBER .)


state 91

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 55 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 55 (expression -> expression PLUS expression .)
    CONCATENATION   reduce using rule 55 (expression -> expression PLUS expression .)
    CONCATENATION_EQUALS reduce using rule 55 (expression -> expression PLUS expression .)
    DOUBLE_EQUALS   reduce using rule 55 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 55 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 55 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 55 (expression -> expression PLUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 55 (expression -> expression PLUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 55 (expression -> expression PLUS expression .)
    AND             reduce using rule 55 (expression -> expression PLUS expression .)
    OR              reduce using rule 55 (expression -> expression PLUS expression .)
    $end            reduce using rule 55 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression PLUS expression .)
    CLOSE_PARENTHESIS reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 55 (expression -> expression PLUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 55 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 92

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 56 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 56 (expression -> expression MINUS expression .)
    CONCATENATION   reduce using rule 56 (expression -> expression MINUS expression .)
    CONCATENATION_EQUALS reduce using rule 56 (expression -> expression MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 56 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 56 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 56 (expression -> expression MINUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 56 (expression -> expression MINUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 56 (expression -> expression MINUS expression .)
    AND             reduce using rule 56 (expression -> expression MINUS expression .)
    OR              reduce using rule 56 (expression -> expression MINUS expression .)
    $end            reduce using rule 56 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression MINUS expression .)
    CLOSE_PARENTHESIS reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 56 (expression -> expression MINUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 56 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 93

    (57) expression -> expression MULTIPLY expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 57 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 57 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 57 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 57 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 57 (expression -> expression MULTIPLY expression .)
    CONCATENATION   reduce using rule 57 (expression -> expression MULTIPLY expression .)
    CONCATENATION_EQUALS reduce using rule 57 (expression -> expression MULTIPLY expression .)
    DOUBLE_EQUALS   reduce using rule 57 (expression -> expression MULTIPLY expression .)
    NOT_EQUALS      reduce using rule 57 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 57 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 57 (expression -> expression MULTIPLY expression .)
    LESS_THAN_OR_EQUALS reduce using rule 57 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 57 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 57 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 57 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression MULTIPLY expression .)
    CLOSE_PARENTHESIS reduce using rule 57 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 57 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 57 (expression -> expression MULTIPLY expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 57 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 94

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 58 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 58 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 58 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 58 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 58 (expression -> expression DIVIDE expression .)
    CONCATENATION   reduce using rule 58 (expression -> expression DIVIDE expression .)
    CONCATENATION_EQUALS reduce using rule 58 (expression -> expression DIVIDE expression .)
    DOUBLE_EQUALS   reduce using rule 58 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 58 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 58 (expression -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 58 (expression -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUALS reduce using rule 58 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 58 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 58 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 58 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression DIVIDE expression .)
    CLOSE_PARENTHESIS reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 58 (expression -> expression DIVIDE expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 58 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 95

    (59) expression -> expression MODULO expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 59 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 59 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 59 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 59 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 59 (expression -> expression MODULO expression .)
    CONCATENATION   reduce using rule 59 (expression -> expression MODULO expression .)
    CONCATENATION_EQUALS reduce using rule 59 (expression -> expression MODULO expression .)
    DOUBLE_EQUALS   reduce using rule 59 (expression -> expression MODULO expression .)
    NOT_EQUALS      reduce using rule 59 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 59 (expression -> expression MODULO expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 59 (expression -> expression MODULO expression .)
    LESS_THAN_OR_EQUALS reduce using rule 59 (expression -> expression MODULO expression .)
    AND             reduce using rule 59 (expression -> expression MODULO expression .)
    OR              reduce using rule 59 (expression -> expression MODULO expression .)
    $end            reduce using rule 59 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression MODULO expression .)
    CLOSE_PARENTHESIS reduce using rule 59 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 59 (expression -> expression MODULO expression .)
    EQUALS          reduce using rule 59 (expression -> expression MODULO expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 59 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 96

    (60) expression -> expression CONCATENATION expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CONCATENATION   reduce using rule 60 (expression -> expression CONCATENATION expression .)
    CONCATENATION_EQUALS reduce using rule 60 (expression -> expression CONCATENATION expression .)
    DOUBLE_EQUALS   reduce using rule 60 (expression -> expression CONCATENATION expression .)
    NOT_EQUALS      reduce using rule 60 (expression -> expression CONCATENATION expression .)
    GREATER_THAN    reduce using rule 60 (expression -> expression CONCATENATION expression .)
    LESS_THAN       reduce using rule 60 (expression -> expression CONCATENATION expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 60 (expression -> expression CONCATENATION expression .)
    LESS_THAN_OR_EQUALS reduce using rule 60 (expression -> expression CONCATENATION expression .)
    AND             reduce using rule 60 (expression -> expression CONCATENATION expression .)
    OR              reduce using rule 60 (expression -> expression CONCATENATION expression .)
    $end            reduce using rule 60 (expression -> expression CONCATENATION expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression CONCATENATION expression .)
    CLOSE_PARENTHESIS reduce using rule 60 (expression -> expression CONCATENATION expression .)
    COMMA           reduce using rule 60 (expression -> expression CONCATENATION expression .)
    EQUALS          reduce using rule 60 (expression -> expression CONCATENATION expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 60 (expression -> expression CONCATENATION expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 60 (expression -> expression CONCATENATION expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression CONCATENATION expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression CONCATENATION expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression CONCATENATION expression .) ]
  ! MODULO          [ reduce using rule 60 (expression -> expression CONCATENATION expression .) ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 97

    (61) expression -> expression CONCATENATION_EQUALS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CONCATENATION   reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    CONCATENATION_EQUALS reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    DOUBLE_EQUALS   reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    NOT_EQUALS      reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    GREATER_THAN    reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    LESS_THAN       reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    AND             reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    OR              reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    $end            reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    CLOSE_PARENTHESIS reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    COMMA           reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    EQUALS          reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MODULO          [ reduce using rule 61 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 98

    (73) condition -> OPEN_PARENTHESIS condition comparison . condition CLOSE_PARENTHESIS
    (72) condition -> condition comparison . condition
    (75) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 86
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 135
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 99

    (74) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 136

state 100

    (94) math_expression -> OPEN_PARENTHESIS math_expression math_operator . math_expression CLOSE_PARENTHESIS
    (91) math_expression -> math_expression math_operator . math_expression
    (92) math_expression -> math_expression math_operator . VARIABLE
    (96) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 88
    OPEN_PARENTHESIS shift and go to state 89
    NUMBER          shift and go to state 90

    math_expression                shift and go to state 137

state 101

    (95) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 138

state 102

    (93) math_expression -> VARIABLE . math_operator math_expression
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 60

state 103

    (93) math_expression -> VARIABLE math_operator math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .)
    SEMICOLON       reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .)
    COMMA           reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 93 (math_expression -> VARIABLE math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 104

    (94) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 90
    VARIABLE        shift and go to state 102
    OPEN_PARENTHESIS shift and go to state 104

    math_expression                shift and go to state 56

state 105

    (62) function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS
    (39) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 139
    COMMA           shift and go to state 140


state 106

    (38) parameter_list -> parameter .

    CLOSE_PARENTHESIS reduce using rule 38 (parameter_list -> parameter .)
    COMMA           reduce using rule 38 (parameter_list -> parameter .)


state 107

    (40) parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 40 (parameter_list -> empty .)
    COMMA           reduce using rule 40 (parameter_list -> empty .)


state 108

    (41) parameter -> VARIABLE .
    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . EQUALS list_access
    (20) assignment -> VARIABLE . CONCATENATION_EQUALS list_access
    (49) expression -> VARIABLE .
    (21) assignment_operator -> . PLUS_EQUALS
    (22) assignment_operator -> . MINUS_EQUALS
    (23) assignment_operator -> . MULTIPLY_EQUALS
    (24) assignment_operator -> . DIVIDE_EQUALS
    (25) assignment_operator -> . MODULO_EQUALS
    (26) assignment_operator -> . CONCATENATION_EQUALS
    (27) assignment_operator -> . LEFT_SHIFT_EQUALS
    (28) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (29) assignment_operator -> . AND_EQUALS
    (30) assignment_operator -> . OR_EQUALS
    (31) assignment_operator -> . XOR_EQUALS
    (32) assignment_operator -> . EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for CONCATENATION_EQUALS resolved as shift
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 41 (parameter -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (parameter -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 41 (parameter -> VARIABLE .)
    COMMA           reduce using rule 41 (parameter -> VARIABLE .)
    EQUALS          shift and go to state 68
    PLUS            shift and go to state 69
    CONCATENATION_EQUALS shift and go to state 70
    MINUS           reduce using rule 49 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 49 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 49 (expression -> VARIABLE .)
    MODULO          reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 49 (expression -> VARIABLE .)
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    LEFT_SHIFT_EQUALS shift and go to state 76
    RIGHT_SHIFT_EQUALS shift and go to state 77
    AND_EQUALS      shift and go to state 78
    OR_EQUALS       shift and go to state 79
    XOR_EQUALS      shift and go to state 80

  ! PLUS            [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! CONCATENATION_EQUALS [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 49 (expression -> VARIABLE .) ]

    assignment_operator            shift and go to state 67

state 109

    (42) parameter -> assignment .

    CLOSE_PARENTHESIS reduce using rule 42 (parameter -> assignment .)
    COMMA           reduce using rule 42 (parameter -> assignment .)


state 110

    (43) parameter -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_PARENTHESIS reduce using rule 43 (parameter -> expression .)
    COMMA           reduce using rule 43 (parameter -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 111

    (34) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS body_statement_list
    (38) parameter_list -> . parameter
    (39) parameter_list -> . parameter_list COMMA parameter
    (40) parameter_list -> . empty
    (41) parameter -> . VARIABLE
    (42) parameter -> . assignment
    (43) parameter -> . expression
    (48) empty -> .
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 108
    CLOSE_PARENTHESIS reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter_list                 shift and go to state 141
    parameter                      shift and go to state 106
    empty                          shift and go to state 107
    assignment                     shift and go to state 109
    expression                     shift and go to state 110
    function_call                  shift and go to state 13

state 112

    (14) assignment -> VARIABLE assignment_operator expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    CLOSE_PARENTHESIS reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    COMMA           reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 113

    (93) math_expression -> VARIABLE . math_operator math_expression
    (101) list_access -> VARIABLE . OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET
    (49) expression -> VARIABLE .
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    OPEN_SQUARE_BRACKET shift and go to state 142
    CONCATENATION   reduce using rule 49 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 49 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 49 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 49 (expression -> VARIABLE .)
    AND             reduce using rule 49 (expression -> VARIABLE .)
    OR              reduce using rule 49 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 49 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 49 (expression -> VARIABLE .)
    COMMA           reduce using rule 49 (expression -> VARIABLE .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 49 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 60

state 114

    (15) assignment -> VARIABLE EQUALS math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    SEMICOLON       reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    CLOSE_PARENTHESIS reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    COMMA           reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 42

state 115

    (16) assignment -> VARIABLE EQUALS array_structure .

    SEMICOLON       reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)
    CLOSE_PARENTHESIS reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)
    COMMA           reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)


state 116

    (17) assignment -> VARIABLE EQUALS condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    SEMICOLON       reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    CLOSE_PARENTHESIS reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    COMMA           reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 117

    (19) assignment -> VARIABLE EQUALS list_access .

    SEMICOLON       reduce using rule 19 (assignment -> VARIABLE EQUALS list_access .)
    CLOSE_PARENTHESIS reduce using rule 19 (assignment -> VARIABLE EQUALS list_access .)
    COMMA           reduce using rule 19 (assignment -> VARIABLE EQUALS list_access .)


state 118

    (94) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (73) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    OPEN_PARENTHESIS shift and go to state 118
    NOT             shift and go to state 7
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    math_expression                shift and go to state 56
    condition                      shift and go to state 55
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 119

    (97) array_structure -> OPEN_SQUARE_BRACKET . key_declaration CLOSE_SQUARE_BRACKET
    (98) key_declaration -> . expression EQUALS GREATER_THAN expression
    (99) key_declaration -> . key_declaration COMMA key_declaration
    (100) key_declaration -> . empty
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (48) empty -> .
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    CLOSE_SQUARE_BRACKET reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)
    IDENTIFIER      shift and go to state 14

    key_declaration                shift and go to state 143
    expression                     shift and go to state 144
    empty                          shift and go to state 145
    function_call                  shift and go to state 13

state 120

    (18) assignment -> VARIABLE PLUS PLUS .

    SEMICOLON       reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)
    CLOSE_PARENTHESIS reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)
    COMMA           reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)


state 121

    (101) list_access -> VARIABLE . OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET

    OPEN_SQUARE_BRACKET shift and go to state 142


state 122

    (20) assignment -> VARIABLE CONCATENATION_EQUALS list_access .

    SEMICOLON       reduce using rule 20 (assignment -> VARIABLE CONCATENATION_EQUALS list_access .)
    CLOSE_PARENTHESIS reduce using rule 20 (assignment -> VARIABLE CONCATENATION_EQUALS list_access .)
    COMMA           reduce using rule 20 (assignment -> VARIABLE CONCATENATION_EQUALS list_access .)


state 123

    (63) if_statement -> IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 146
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 124

    (69) while_statement -> WHILE OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 147
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 125

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization . SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    SEMICOLON       shift and go to state 148


state 126

    (65) for_initialization -> assignment .

    SEMICOLON       reduce using rule 65 (for_initialization -> assignment .)


state 127

    (66) for_initialization -> empty .

    SEMICOLON       reduce using rule 66 (for_initialization -> empty .)


state 128

    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . EQUALS list_access
    (20) assignment -> VARIABLE . CONCATENATION_EQUALS list_access
    (21) assignment_operator -> . PLUS_EQUALS
    (22) assignment_operator -> . MINUS_EQUALS
    (23) assignment_operator -> . MULTIPLY_EQUALS
    (24) assignment_operator -> . DIVIDE_EQUALS
    (25) assignment_operator -> . MODULO_EQUALS
    (26) assignment_operator -> . CONCATENATION_EQUALS
    (27) assignment_operator -> . LEFT_SHIFT_EQUALS
    (28) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (29) assignment_operator -> . AND_EQUALS
    (30) assignment_operator -> . OR_EQUALS
    (31) assignment_operator -> . XOR_EQUALS
    (32) assignment_operator -> . EQUALS

    EQUALS          shift and go to state 68
    PLUS            shift and go to state 69
    CONCATENATION_EQUALS shift and go to state 70
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    LEFT_SHIFT_EQUALS shift and go to state 76
    RIGHT_SHIFT_EQUALS shift and go to state 77
    AND_EQUALS      shift and go to state 78
    OR_EQUALS       shift and go to state 79
    XOR_EQUALS      shift and go to state 80

    assignment_operator            shift and go to state 67

state 129

    (70) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list . CLOSE_PARENTHESIS SEMICOLON
    (45) value_parameter_list -> value_parameter_list . COMMA value_parameter

    CLOSE_PARENTHESIS shift and go to state 149
    COMMA           shift and go to state 150


state 130

    (44) value_parameter_list -> value_parameter .

    CLOSE_PARENTHESIS reduce using rule 44 (value_parameter_list -> value_parameter .)
    COMMA           reduce using rule 44 (value_parameter_list -> value_parameter .)


state 131

    (46) value_parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 46 (value_parameter_list -> empty .)
    COMMA           reduce using rule 46 (value_parameter_list -> empty .)


state 132

    (47) value_parameter -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_PARENTHESIS reduce using rule 47 (value_parameter -> expression .)
    COMMA           reduce using rule 47 (value_parameter -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 133

    (75) condition -> condition comparison OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS
    (73) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (74) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 151
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 98

state 134

    (96) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS
    (94) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 152
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 100

state 135

    (73) condition -> OPEN_PARENTHESIS condition comparison condition . CLOSE_PARENTHESIS
    (72) condition -> condition comparison condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS shift and go to state 153
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! CLOSE_PARENTHESIS [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 72 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 72 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 33

state 136

    (74) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison . condition
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 154
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 137

    (94) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression . CLOSE_PARENTHESIS
    (91) math_expression -> math_expression math_operator math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CLOSE_PARENTHESIS shift and go to state 155
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! CLOSE_PARENTHESIS [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! PLUS            [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 91 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 138

    (95) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator . math_expression
    (90) math_expression -> . NUMBER
    (91) math_expression -> . math_expression math_operator math_expression
    (92) math_expression -> . math_expression math_operator VARIABLE
    (93) math_expression -> . VARIABLE math_operator math_expression
    (94) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (95) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (96) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 90
    VARIABLE        shift and go to state 102
    OPEN_PARENTHESIS shift and go to state 104

    math_expression                shift and go to state 156

state 139

    (62) function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .

    PLUS            reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CONCATENATION   reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CONCATENATION_EQUALS reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    AND             reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    OR              reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    $end            reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    EQUALS          reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CLOSE_SQUARE_BRACKET reduce using rule 62 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)


state 140

    (39) parameter_list -> parameter_list COMMA . parameter
    (41) parameter -> . VARIABLE
    (42) parameter -> . assignment
    (43) parameter -> . expression
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 108
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter                      shift and go to state 157
    assignment                     shift and go to state 109
    expression                     shift and go to state 110
    function_call                  shift and go to state 13

state 141

    (34) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS body_statement_list
    (39) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 158
    COMMA           shift and go to state 140


state 142

    (101) list_access -> VARIABLE OPEN_SQUARE_BRACKET . expression CLOSE_SQUARE_BRACKET
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 159
    function_call                  shift and go to state 13

state 143

    (97) array_structure -> OPEN_SQUARE_BRACKET key_declaration . CLOSE_SQUARE_BRACKET
    (99) key_declaration -> key_declaration . COMMA key_declaration

    CLOSE_SQUARE_BRACKET shift and go to state 160
    COMMA           shift and go to state 161


state 144

    (98) key_declaration -> expression . EQUALS GREATER_THAN expression
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    EQUALS          shift and go to state 162
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 145

    (100) key_declaration -> empty .

    CLOSE_SQUARE_BRACKET reduce using rule 100 (key_declaration -> empty .)
    COMMA           reduce using rule 100 (key_declaration -> empty .)


state 146

    (63) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (35) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (36) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (37) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 164

    body_statement_list            shift and go to state 163

state 147

    (69) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (35) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (36) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (37) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 164

    body_statement_list            shift and go to state 165

state 148

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON . condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (71) condition -> . expression
    (72) condition -> . condition comparison condition
    (73) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (74) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (75) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (76) condition -> . NOT condition
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 166
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 149

    (70) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 167


state 150

    (45) value_parameter_list -> value_parameter_list COMMA . value_parameter
    (47) value_parameter -> . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    value_parameter                shift and go to state 168
    expression                     shift and go to state 132
    function_call                  shift and go to state 13

state 151

    (75) condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .
    (74) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! NOT_EQUALS      [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN    [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN       [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! AND             [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! OR              [ reduce using rule 75 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]

    comparison                     shift and go to state 136

state 152

    (96) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .
    (95) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! DIVIDE          [ reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MINUS           [ reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MULTIPLY        [ reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MODULO          [ reduce using rule 96 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]

    math_operator                  shift and go to state 138

state 153

    (73) condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .

    DOUBLE_EQUALS   reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    AND             reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    OR              reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    $end            reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 73 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)


state 154

    (74) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    SEMICOLON       reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    COMMA           reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! AND             [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! OR              [ reduce using rule 74 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]

    comparison                     shift and go to state 33

state 155

    (94) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .

    PLUS            reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    $end            reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 94 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)


state 156

    (95) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .
    (91) math_expression -> math_expression . math_operator math_expression
    (92) math_expression -> math_expression . math_operator VARIABLE
    (96) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (85) math_operator -> . PLUS
    (86) math_operator -> . DIVIDE
    (87) math_operator -> . MINUS
    (88) math_operator -> . MULTIPLY
    (89) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    SEMICOLON       reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    COMMA           reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 95 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 157

    (39) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PARENTHESIS reduce using rule 39 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 39 (parameter_list -> parameter_list COMMA parameter .)


state 158

    (34) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS . body_statement_list
    (35) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (36) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (37) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 164

    body_statement_list            shift and go to state 169

state 159

    (101) list_access -> VARIABLE OPEN_SQUARE_BRACKET expression . CLOSE_SQUARE_BRACKET
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_SQUARE_BRACKET shift and go to state 170
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 160

    (97) array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 97 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 97 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)
    COMMA           reduce using rule 97 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)


state 161

    (99) key_declaration -> key_declaration COMMA . key_declaration
    (98) key_declaration -> . expression EQUALS GREATER_THAN expression
    (99) key_declaration -> . key_declaration COMMA key_declaration
    (100) key_declaration -> . empty
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (48) empty -> .
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    COMMA           reduce using rule 48 (empty -> .)
    CLOSE_SQUARE_BRACKET reduce using rule 48 (empty -> .)
    IDENTIFIER      shift and go to state 14

    key_declaration                shift and go to state 171
    expression                     shift and go to state 144
    empty                          shift and go to state 145
    function_call                  shift and go to state 13

state 162

    (98) key_declaration -> expression EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 172


state 163

    (63) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 63 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 164

    (35) body_statement_list -> OPEN_CURLY_BRACKET . statement_list CLOSE_CURLY_BRACKET
    (36) body_statement_list -> OPEN_CURLY_BRACKET . empty CLOSE_CURLY_BRACKET
    (37) body_statement_list -> OPEN_CURLY_BRACKET . statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement_list -> . empty
    (48) empty -> .
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (33) expression_statement -> . expression SEMICOLON
    (34) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (63) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (69) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (64) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (70) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    CLOSE_CURLY_BRACKET reduce using rule 48 (empty -> .)
    RETURN          reduce using rule 48 (empty -> .)
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! FUNCTION        [ reduce using rule 48 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 48 (empty -> .) ]
  ! IF              [ reduce using rule 48 (empty -> .) ]
  ! WHILE           [ reduce using rule 48 (empty -> .) ]
  ! FOR             [ reduce using rule 48 (empty -> .) ]
  ! ECHO            [ reduce using rule 48 (empty -> .) ]
  ! NUMBER          [ reduce using rule 48 (empty -> .) ]
  ! STRING          [ reduce using rule 48 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 48 (empty -> .) ]
  ! NULL            [ reduce using rule 48 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 48 (empty -> .) ]

    statement_list                 shift and go to state 173
    empty                          shift and go to state 174
    expression                     shift and go to state 25
    statement                      shift and go to state 16
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    function_call                  shift and go to state 13

state 165

    (69) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 69 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 166

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition . SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (72) condition -> condition . comparison condition
    (75) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (77) comparison -> . DOUBLE_EQUALS
    (78) comparison -> . NOT_EQUALS
    (79) comparison -> . GREATER_THAN
    (80) comparison -> . LESS_THAN
    (81) comparison -> . GREATER_THAN_OR_EQUALS
    (82) comparison -> . LESS_THAN_OR_EQUALS
    (83) comparison -> . AND
    (84) comparison -> . OR

    SEMICOLON       shift and go to state 175
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 167

    (70) impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .

    CLOSE_TAG       reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    VARIABLE        reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NUMBER          reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    BOOLEAN         reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 70 (impresion -> ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON .)


state 168

    (45) value_parameter_list -> value_parameter_list COMMA value_parameter .

    CLOSE_PARENTHESIS reduce using rule 45 (value_parameter_list -> value_parameter_list COMMA value_parameter .)
    COMMA           reduce using rule 45 (value_parameter_list -> value_parameter_list COMMA value_parameter .)


state 169

    (34) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 34 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)


state 170

    (101) list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 101 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 101 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)
    COMMA           reduce using rule 101 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)


state 171

    (99) key_declaration -> key_declaration COMMA key_declaration .
    (99) key_declaration -> key_declaration . COMMA key_declaration

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSE_SQUARE_BRACKET reduce using rule 99 (key_declaration -> key_declaration COMMA key_declaration .)
    COMMA           shift and go to state 161

  ! COMMA           [ reduce using rule 99 (key_declaration -> key_declaration COMMA key_declaration .) ]


state 172

    (98) key_declaration -> expression EQUALS GREATER_THAN . expression
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 176
    function_call                  shift and go to state 13

state 173

    (35) body_statement_list -> OPEN_CURLY_BRACKET statement_list . CLOSE_CURLY_BRACKET
    (37) body_statement_list -> OPEN_CURLY_BRACKET statement_list . RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
    (5) statement_list -> statement_list . statement
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (33) expression_statement -> . expression SEMICOLON
    (34) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (63) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (69) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (64) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (70) impresion -> . ECHO OPEN_PARENTHESIS value_parameter_list CLOSE_PARENTHESIS SEMICOLON
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET shift and go to state 177
    RETURN          shift and go to state 178
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 25
    statement                      shift and go to state 63
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    function_call                  shift and go to state 13

state 174

    (36) body_statement_list -> OPEN_CURLY_BRACKET empty . CLOSE_CURLY_BRACKET
    (6) statement_list -> empty .

  ! shift/reduce conflict for CLOSE_CURLY_BRACKET resolved as shift
    CLOSE_CURLY_BRACKET shift and go to state 179
    RETURN          reduce using rule 6 (statement_list -> empty .)
    FUNCTION        reduce using rule 6 (statement_list -> empty .)
    VARIABLE        reduce using rule 6 (statement_list -> empty .)
    IF              reduce using rule 6 (statement_list -> empty .)
    WHILE           reduce using rule 6 (statement_list -> empty .)
    FOR             reduce using rule 6 (statement_list -> empty .)
    ECHO            reduce using rule 6 (statement_list -> empty .)
    NUMBER          reduce using rule 6 (statement_list -> empty .)
    STRING          reduce using rule 6 (statement_list -> empty .)
    BOOLEAN         reduce using rule 6 (statement_list -> empty .)
    NULL            reduce using rule 6 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 6 (statement_list -> empty .)

  ! CLOSE_CURLY_BRACKET [ reduce using rule 6 (statement_list -> empty .) ]


state 175

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON . for_update CLOSE_PARENTHESIS body_statement_list
    (67) for_update -> . assignment
    (68) for_update -> . empty
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE EQUALS list_access
    (20) assignment -> . VARIABLE CONCATENATION_EQUALS list_access
    (48) empty -> .

    VARIABLE        shift and go to state 128
    CLOSE_PARENTHESIS reduce using rule 48 (empty -> .)

    for_update                     shift and go to state 180
    assignment                     shift and go to state 181
    empty                          shift and go to state 182

state 176

    (98) key_declaration -> expression EQUALS GREATER_THAN expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_SQUARE_BRACKET reduce using rule 98 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    COMMA           reduce using rule 98 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 177

    (35) body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .

    CLOSE_TAG       reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 35 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)


state 178

    (37) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN . expression SEMICOLON CLOSE_CURLY_BRACKET
    (49) expression -> . VARIABLE
    (50) expression -> . NUMBER
    (51) expression -> . STRING
    (52) expression -> . BOOLEAN
    (53) expression -> . NULL
    (54) expression -> . function_call
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression MULTIPLY expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression MODULO expression
    (60) expression -> . expression CONCATENATION expression
    (61) expression -> . expression CONCATENATION_EQUALS expression
    (62) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 183
    function_call                  shift and go to state 13

state 179

    (36) body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .

    CLOSE_TAG       reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 36 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)


state 180

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update . CLOSE_PARENTHESIS body_statement_list

    CLOSE_PARENTHESIS shift and go to state 184


state 181

    (67) for_update -> assignment .

    CLOSE_PARENTHESIS reduce using rule 67 (for_update -> assignment .)


state 182

    (68) for_update -> empty .

    CLOSE_PARENTHESIS reduce using rule 68 (for_update -> empty .)


state 183

    (37) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression . SEMICOLON CLOSE_CURLY_BRACKET
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . MULTIPLY expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . MODULO expression
    (60) expression -> expression . CONCATENATION expression
    (61) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       shift and go to state 185
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 184

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS . body_statement_list
    (35) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (36) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (37) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 164

    body_statement_list            shift and go to state 186

state 185

    (37) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON . CLOSE_CURLY_BRACKET

    CLOSE_CURLY_BRACKET shift and go to state 187


state 186

    (64) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 64 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)


state 187

    (37) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .

    CLOSE_TAG       reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 37 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 2 resolved as shift
WARNING: shift/reduce conflict for NULL in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 9 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for CONCATENATION_EQUALS in state 27 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 68 resolved as shift
WARNING: shift/reduce conflict for STRING in state 68 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 68 resolved as shift
WARNING: shift/reduce conflict for NULL in state 68 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 68 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 88 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for CONCATENATION_EQUALS in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 113 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 113 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 135 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 135 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 137 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 137 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 151 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 151 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 151 resolved as shift
WARNING: shift/reduce conflict for AND in state 151 resolved as shift
WARNING: shift/reduce conflict for OR in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 152 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 152 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 156 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 156 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 164 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 164 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING in state 164 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 164 resolved as shift
WARNING: shift/reduce conflict for NULL in state 164 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 164 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 171 resolved as shift
WARNING: shift/reduce conflict for CLOSE_CURLY_BRACKET in state 174 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 8
WARNING: reduce/reduce conflict in state 108 resolved using rule (parameter -> VARIABLE)
WARNING: rejected rule (expression -> VARIABLE) in state 108
