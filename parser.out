Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    BOOL_T
    BREAK
    CALLABLE
    COLON
    COMMENT
    CONST
    CONTINUE
    DEFAULT
    DOUBLE_COLON
    EMPTY
    OPEN_TAG_WITH_ECHO
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG statement_list CLOSE_TAG
Rule 2     program -> condition
Rule 3     program -> math_expression
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     statement_list -> empty
Rule 7     statement -> expression_statement
Rule 8     statement -> function_declaration
Rule 9     statement -> assignment SEMICOLON
Rule 10    statement -> if_statement
Rule 11    statement -> while_statement
Rule 12    statement -> for_statement
Rule 13    statement -> impresion
Rule 14    assignment -> VARIABLE assignment_operator expression
Rule 15    assignment -> VARIABLE EQUALS math_expression
Rule 16    assignment -> VARIABLE EQUALS array_structure
Rule 17    assignment -> VARIABLE EQUALS condition
Rule 18    assignment -> VARIABLE PLUS PLUS
Rule 19    assignment -> VARIABLE assignment_operator list_access
Rule 20    assignment -> VARIABLE EQUALS casting math_expression
Rule 21    casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS
Rule 22    data_type -> INT_T
Rule 23    data_type -> INTEGER_T
Rule 24    data_type -> FLOAT_T
Rule 25    data_type -> DOUBLE_T
Rule 26    data_type -> STRING_T
Rule 27    data_type -> BOOLEAN_T
Rule 28    data_type -> ARRAY_T
Rule 29    data_type -> OBJECT_T
Rule 30    assignment_operator -> PLUS_EQUALS
Rule 31    assignment_operator -> MINUS_EQUALS
Rule 32    assignment_operator -> MULTIPLY_EQUALS
Rule 33    assignment_operator -> DIVIDE_EQUALS
Rule 34    assignment_operator -> MODULO_EQUALS
Rule 35    assignment_operator -> CONCATENATION_EQUALS
Rule 36    assignment_operator -> LEFT_SHIFT_EQUALS
Rule 37    assignment_operator -> RIGHT_SHIFT_EQUALS
Rule 38    assignment_operator -> AND_EQUALS
Rule 39    assignment_operator -> OR_EQUALS
Rule 40    assignment_operator -> XOR_EQUALS
Rule 41    assignment_operator -> EQUALS
Rule 42    expression_statement -> expression SEMICOLON
Rule 43    function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
Rule 44    body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
Rule 45    body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
Rule 46    body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
Rule 47    parameter_list -> parameter
Rule 48    parameter_list -> parameter_list COMMA parameter
Rule 49    parameter_list -> empty
Rule 50    parameter -> VARIABLE
Rule 51    parameter -> assignment
Rule 52    parameter -> expression
Rule 53    value_parameter_list -> value_parameter
Rule 54    value_parameter_list -> value_parameter_list COMMA value_parameter
Rule 55    value_parameter_list -> empty
Rule 56    value_parameter -> expression
Rule 57    empty -> <empty>
Rule 58    expression -> VARIABLE
Rule 59    expression -> NUMBER
Rule 60    expression -> STRING
Rule 61    expression -> BOOLEAN
Rule 62    expression -> NULL
Rule 63    expression -> function_call
Rule 64    expression -> expression PLUS expression
Rule 65    expression -> expression MINUS expression
Rule 66    expression -> expression MULTIPLY expression
Rule 67    expression -> expression DIVIDE expression
Rule 68    expression -> expression MODULO expression
Rule 69    expression -> expression CONCATENATION expression
Rule 70    expression -> expression CONCATENATION_EQUALS expression
Rule 71    function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS
Rule 72    if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 73    if_statement -> if_statement ELSE body_statement_list
Rule 74    for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
Rule 75    for_initialization -> assignment
Rule 76    for_initialization -> empty
Rule 77    for_update -> assignment
Rule 78    for_update -> empty
Rule 79    while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
Rule 80    impresion -> ECHO value_parameter_list SEMICOLON
Rule 81    condition -> expression
Rule 82    condition -> condition comparison condition
Rule 83    condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
Rule 84    condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
Rule 85    condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
Rule 86    condition -> NOT condition
Rule 87    comparison -> DOUBLE_EQUALS
Rule 88    comparison -> NOT_EQUALS
Rule 89    comparison -> GREATER_THAN
Rule 90    comparison -> LESS_THAN
Rule 91    comparison -> GREATER_THAN_OR_EQUALS
Rule 92    comparison -> LESS_THAN_OR_EQUALS
Rule 93    comparison -> AND
Rule 94    comparison -> OR
Rule 95    math_operator -> PLUS
Rule 96    math_operator -> DIVIDE
Rule 97    math_operator -> MINUS
Rule 98    math_operator -> MULTIPLY
Rule 99    math_operator -> MODULO
Rule 100   math_expression -> NUMBER
Rule 101   math_expression -> math_expression math_operator math_expression
Rule 102   math_expression -> math_expression math_operator VARIABLE
Rule 103   math_expression -> VARIABLE math_operator math_expression
Rule 104   math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
Rule 105   math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
Rule 106   math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
Rule 107   array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
Rule 108   key_declaration -> expression EQUALS GREATER_THAN expression
Rule 109   key_declaration -> key_declaration COMMA key_declaration
Rule 110   key_declaration -> empty
Rule 111   list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET

Terminals, with rules where they appear

AND                  : 93
AND_EQUALS           : 38
ARRAY_T              : 28
AS                   : 
BOOLEAN              : 61
BOOLEAN_T            : 27
BOOL_T               : 
BREAK                : 
CALLABLE             : 
CLOSE_CURLY_BRACKET  : 44 45 46
CLOSE_PARENTHESIS    : 21 43 71 72 74 79 83 84 85 104 105 106
CLOSE_SQUARE_BRACKET : 107 111
CLOSE_TAG            : 1
COLON                : 
COMMA                : 48 54 109
COMMENT              : 
CONCATENATION        : 69
CONCATENATION_EQUALS : 35 70
CONST                : 
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 67 96
DIVIDE_EQUALS        : 33
DOUBLE_COLON         : 
DOUBLE_EQUALS        : 87
DOUBLE_T             : 25
ECHO                 : 80
ELSE                 : 73
EMPTY                : 
EQUALS               : 15 16 17 20 41 108
FLOAT_T              : 24
FOR                  : 74
FUNCTION             : 43
GREATER_THAN         : 89 108
GREATER_THAN_OR_EQUALS : 91
IDENTIFIER           : 43 71
IF                   : 72
INTEGER_T            : 23
INT_T                : 22
LEFT_SHIFT_EQUALS    : 36
LESS_THAN            : 90
LESS_THAN_OR_EQUALS  : 92
MINUS                : 65 97
MINUS_EQUALS         : 31
MODULO               : 68 99
MODULO_EQUALS        : 34
MULTIPLY             : 66 98
MULTIPLY_EQUALS      : 32
NOT                  : 86
NOT_EQUALS           : 88
NULL                 : 62
NUMBER               : 59 100
OBJECT_T             : 29
OPEN_CURLY_BRACKET   : 44 45 46
OPEN_PARENTHESIS     : 21 43 71 72 74 79 83 84 85 104 105 106
OPEN_SQUARE_BRACKET  : 107 111
OPEN_TAG             : 1
OPEN_TAG_WITH_ECHO   : 
OR                   : 94
OR_EQUALS            : 39
PLUS                 : 18 18 64 95
PLUS_EQUALS          : 30
RETURN               : 46
RIGHT_SHIFT_EQUALS   : 37
SEMICOLON            : 9 42 46 74 74 80
STRING               : 60
STRING_T             : 26
VARIABLE             : 14 15 16 17 18 19 20 50 58 102 103 111
WHILE                : 79
WHITESPACE           : 
XOR_EQUALS           : 40
error                : 

Nonterminals, with rules where they appear

array_structure      : 16
assignment           : 9 51 75 77
assignment_operator  : 14 19
body_statement_list  : 43 72 73 74 79
casting              : 20
comparison           : 82 83 84 85
condition            : 2 17 72 74 79 82 82 83 83 84 84 85 85 86
data_type            : 21
empty                : 6 45 49 55 76 78 110
expression           : 14 42 46 52 56 64 64 65 65 66 66 67 67 68 68 69 69 70 70 81 108 108 111
expression_statement : 7
for_initialization   : 74
for_statement        : 12
for_update           : 74
function_call        : 63
function_declaration : 8
if_statement         : 10 73
impresion            : 13
key_declaration      : 107 109 109
list_access          : 19
math_expression      : 3 15 20 101 101 102 103 104 104 105 105 106 106
math_operator        : 101 102 103 104 105 106
parameter            : 47 48
parameter_list       : 43 48 71
program              : 0
statement            : 4 5
statement_list       : 1 5 44 46
value_parameter      : 53 54
value_parameter_list : 54 80
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG statement_list CLOSE_TAG
    (2) program -> . condition
    (3) program -> . math_expression
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_TAG        shift and go to state 2
    OPEN_PARENTHESIS shift and go to state 6
    NOT             shift and go to state 7
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    program                        shift and go to state 1
    condition                      shift and go to state 3
    math_expression                shift and go to state 4
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . statement_list CLOSE_TAG
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement_list -> . empty
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (57) empty -> .
    (42) expression_statement -> . expression SEMICOLON
    (43) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (72) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (73) if_statement -> . if_statement ELSE body_statement_list
    (79) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (74) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (80) impresion -> . ECHO value_parameter_list SEMICOLON
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    CLOSE_TAG       reduce using rule 57 (empty -> .)
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! FUNCTION        [ reduce using rule 57 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 57 (empty -> .) ]
  ! IF              [ reduce using rule 57 (empty -> .) ]
  ! WHILE           [ reduce using rule 57 (empty -> .) ]
  ! FOR             [ reduce using rule 57 (empty -> .) ]
  ! ECHO            [ reduce using rule 57 (empty -> .) ]
  ! NUMBER          [ reduce using rule 57 (empty -> .) ]
  ! STRING          [ reduce using rule 57 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 57 (empty -> .) ]
  ! NULL            [ reduce using rule 57 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 57 (empty -> .) ]

    statement_list                 shift and go to state 15
    statement                      shift and go to state 16
    empty                          shift and go to state 17
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    expression                     shift and go to state 25
    function_call                  shift and go to state 13

state 3

    (2) program -> condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    $end            reduce using rule 2 (program -> condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 4

    (3) program -> math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    $end            reduce using rule 3 (program -> math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 42

state 5

    (81) condition -> expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    DOUBLE_EQUALS   reduce using rule 81 (condition -> expression .)
    NOT_EQUALS      reduce using rule 81 (condition -> expression .)
    GREATER_THAN    reduce using rule 81 (condition -> expression .)
    LESS_THAN       reduce using rule 81 (condition -> expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 81 (condition -> expression .)
    LESS_THAN_OR_EQUALS reduce using rule 81 (condition -> expression .)
    AND             reduce using rule 81 (condition -> expression .)
    OR              reduce using rule 81 (condition -> expression .)
    $end            reduce using rule 81 (condition -> expression .)
    CLOSE_PARENTHESIS reduce using rule 81 (condition -> expression .)
    SEMICOLON       reduce using rule 81 (condition -> expression .)
    COMMA           reduce using rule 81 (condition -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 6

    (83) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (104) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 6
    NOT             shift and go to state 7
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 55
    math_expression                shift and go to state 56
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 7

    (86) condition -> NOT . condition
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 57
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 8

    (100) math_expression -> NUMBER .
    (59) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for MULTIPLY resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for MODULO resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (expression -> NUMBER .)
    PLUS            reduce using rule 59 (expression -> NUMBER .)
    MINUS           reduce using rule 59 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 59 (expression -> NUMBER .)
    DIVIDE          reduce using rule 59 (expression -> NUMBER .)
    MODULO          reduce using rule 59 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 59 (expression -> NUMBER .)
    CONCATENATION_EQUALS reduce using rule 59 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 59 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 59 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 59 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 59 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 59 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 59 (expression -> NUMBER .)
    AND             reduce using rule 59 (expression -> NUMBER .)
    OR              reduce using rule 59 (expression -> NUMBER .)
    $end            reduce using rule 59 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 59 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 59 (expression -> NUMBER .)
    COMMA           reduce using rule 59 (expression -> NUMBER .)

  ! PLUS            [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! MINUS           [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! MULTIPLY        [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! MODULO          [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! $end            [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 100 (math_expression -> NUMBER .) ]
  ! COMMA           [ reduce using rule 100 (math_expression -> NUMBER .) ]


state 9

    (103) math_expression -> VARIABLE . math_operator math_expression
    (58) expression -> VARIABLE .
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CONCATENATION   reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 58 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 58 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 58 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 58 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    AND             reduce using rule 58 (expression -> VARIABLE .)
    OR              reduce using rule 58 (expression -> VARIABLE .)
    $end            reduce using rule 58 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 58 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 58 (expression -> VARIABLE .)
    COMMA           reduce using rule 58 (expression -> VARIABLE .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! MODULO          [ reduce using rule 58 (expression -> VARIABLE .) ]

    math_operator                  shift and go to state 60

state 10

    (60) expression -> STRING .

    PLUS            reduce using rule 60 (expression -> STRING .)
    MINUS           reduce using rule 60 (expression -> STRING .)
    MULTIPLY        reduce using rule 60 (expression -> STRING .)
    DIVIDE          reduce using rule 60 (expression -> STRING .)
    MODULO          reduce using rule 60 (expression -> STRING .)
    CONCATENATION   reduce using rule 60 (expression -> STRING .)
    CONCATENATION_EQUALS reduce using rule 60 (expression -> STRING .)
    DOUBLE_EQUALS   reduce using rule 60 (expression -> STRING .)
    NOT_EQUALS      reduce using rule 60 (expression -> STRING .)
    GREATER_THAN    reduce using rule 60 (expression -> STRING .)
    LESS_THAN       reduce using rule 60 (expression -> STRING .)
    GREATER_THAN_OR_EQUALS reduce using rule 60 (expression -> STRING .)
    LESS_THAN_OR_EQUALS reduce using rule 60 (expression -> STRING .)
    AND             reduce using rule 60 (expression -> STRING .)
    OR              reduce using rule 60 (expression -> STRING .)
    $end            reduce using rule 60 (expression -> STRING .)
    SEMICOLON       reduce using rule 60 (expression -> STRING .)
    CLOSE_PARENTHESIS reduce using rule 60 (expression -> STRING .)
    COMMA           reduce using rule 60 (expression -> STRING .)
    EQUALS          reduce using rule 60 (expression -> STRING .)
    CLOSE_SQUARE_BRACKET reduce using rule 60 (expression -> STRING .)


state 11

    (61) expression -> BOOLEAN .

    PLUS            reduce using rule 61 (expression -> BOOLEAN .)
    MINUS           reduce using rule 61 (expression -> BOOLEAN .)
    MULTIPLY        reduce using rule 61 (expression -> BOOLEAN .)
    DIVIDE          reduce using rule 61 (expression -> BOOLEAN .)
    MODULO          reduce using rule 61 (expression -> BOOLEAN .)
    CONCATENATION   reduce using rule 61 (expression -> BOOLEAN .)
    CONCATENATION_EQUALS reduce using rule 61 (expression -> BOOLEAN .)
    DOUBLE_EQUALS   reduce using rule 61 (expression -> BOOLEAN .)
    NOT_EQUALS      reduce using rule 61 (expression -> BOOLEAN .)
    GREATER_THAN    reduce using rule 61 (expression -> BOOLEAN .)
    LESS_THAN       reduce using rule 61 (expression -> BOOLEAN .)
    GREATER_THAN_OR_EQUALS reduce using rule 61 (expression -> BOOLEAN .)
    LESS_THAN_OR_EQUALS reduce using rule 61 (expression -> BOOLEAN .)
    AND             reduce using rule 61 (expression -> BOOLEAN .)
    OR              reduce using rule 61 (expression -> BOOLEAN .)
    $end            reduce using rule 61 (expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 61 (expression -> BOOLEAN .)
    CLOSE_PARENTHESIS reduce using rule 61 (expression -> BOOLEAN .)
    COMMA           reduce using rule 61 (expression -> BOOLEAN .)
    EQUALS          reduce using rule 61 (expression -> BOOLEAN .)
    CLOSE_SQUARE_BRACKET reduce using rule 61 (expression -> BOOLEAN .)


state 12

    (62) expression -> NULL .

    PLUS            reduce using rule 62 (expression -> NULL .)
    MINUS           reduce using rule 62 (expression -> NULL .)
    MULTIPLY        reduce using rule 62 (expression -> NULL .)
    DIVIDE          reduce using rule 62 (expression -> NULL .)
    MODULO          reduce using rule 62 (expression -> NULL .)
    CONCATENATION   reduce using rule 62 (expression -> NULL .)
    CONCATENATION_EQUALS reduce using rule 62 (expression -> NULL .)
    DOUBLE_EQUALS   reduce using rule 62 (expression -> NULL .)
    NOT_EQUALS      reduce using rule 62 (expression -> NULL .)
    GREATER_THAN    reduce using rule 62 (expression -> NULL .)
    LESS_THAN       reduce using rule 62 (expression -> NULL .)
    GREATER_THAN_OR_EQUALS reduce using rule 62 (expression -> NULL .)
    LESS_THAN_OR_EQUALS reduce using rule 62 (expression -> NULL .)
    AND             reduce using rule 62 (expression -> NULL .)
    OR              reduce using rule 62 (expression -> NULL .)
    $end            reduce using rule 62 (expression -> NULL .)
    SEMICOLON       reduce using rule 62 (expression -> NULL .)
    CLOSE_PARENTHESIS reduce using rule 62 (expression -> NULL .)
    COMMA           reduce using rule 62 (expression -> NULL .)
    EQUALS          reduce using rule 62 (expression -> NULL .)
    CLOSE_SQUARE_BRACKET reduce using rule 62 (expression -> NULL .)


state 13

    (63) expression -> function_call .

    PLUS            reduce using rule 63 (expression -> function_call .)
    MINUS           reduce using rule 63 (expression -> function_call .)
    MULTIPLY        reduce using rule 63 (expression -> function_call .)
    DIVIDE          reduce using rule 63 (expression -> function_call .)
    MODULO          reduce using rule 63 (expression -> function_call .)
    CONCATENATION   reduce using rule 63 (expression -> function_call .)
    CONCATENATION_EQUALS reduce using rule 63 (expression -> function_call .)
    DOUBLE_EQUALS   reduce using rule 63 (expression -> function_call .)
    NOT_EQUALS      reduce using rule 63 (expression -> function_call .)
    GREATER_THAN    reduce using rule 63 (expression -> function_call .)
    LESS_THAN       reduce using rule 63 (expression -> function_call .)
    GREATER_THAN_OR_EQUALS reduce using rule 63 (expression -> function_call .)
    LESS_THAN_OR_EQUALS reduce using rule 63 (expression -> function_call .)
    AND             reduce using rule 63 (expression -> function_call .)
    OR              reduce using rule 63 (expression -> function_call .)
    $end            reduce using rule 63 (expression -> function_call .)
    SEMICOLON       reduce using rule 63 (expression -> function_call .)
    CLOSE_PARENTHESIS reduce using rule 63 (expression -> function_call .)
    COMMA           reduce using rule 63 (expression -> function_call .)
    EQUALS          reduce using rule 63 (expression -> function_call .)
    CLOSE_SQUARE_BRACKET reduce using rule 63 (expression -> function_call .)


state 14

    (71) function_call -> IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 61


state 15

    (1) program -> OPEN_TAG statement_list . CLOSE_TAG
    (5) statement_list -> statement_list . statement
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (42) expression_statement -> . expression SEMICOLON
    (43) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (72) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (73) if_statement -> . if_statement ELSE body_statement_list
    (79) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (74) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (80) impresion -> . ECHO value_parameter_list SEMICOLON
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    CLOSE_TAG       shift and go to state 62
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    statement                      shift and go to state 63
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    expression                     shift and go to state 25
    function_call                  shift and go to state 13

state 16

    (4) statement_list -> statement .

    CLOSE_TAG       reduce using rule 4 (statement_list -> statement .)
    FUNCTION        reduce using rule 4 (statement_list -> statement .)
    VARIABLE        reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    ECHO            reduce using rule 4 (statement_list -> statement .)
    NUMBER          reduce using rule 4 (statement_list -> statement .)
    STRING          reduce using rule 4 (statement_list -> statement .)
    BOOLEAN         reduce using rule 4 (statement_list -> statement .)
    NULL            reduce using rule 4 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 4 (statement_list -> statement .)
    CLOSE_CURLY_BRACKET reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)


state 17

    (6) statement_list -> empty .

    CLOSE_TAG       reduce using rule 6 (statement_list -> empty .)
    FUNCTION        reduce using rule 6 (statement_list -> empty .)
    VARIABLE        reduce using rule 6 (statement_list -> empty .)
    IF              reduce using rule 6 (statement_list -> empty .)
    WHILE           reduce using rule 6 (statement_list -> empty .)
    FOR             reduce using rule 6 (statement_list -> empty .)
    ECHO            reduce using rule 6 (statement_list -> empty .)
    NUMBER          reduce using rule 6 (statement_list -> empty .)
    STRING          reduce using rule 6 (statement_list -> empty .)
    BOOLEAN         reduce using rule 6 (statement_list -> empty .)
    NULL            reduce using rule 6 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 6 (statement_list -> empty .)


state 18

    (7) statement -> expression_statement .

    CLOSE_TAG       reduce using rule 7 (statement -> expression_statement .)
    FUNCTION        reduce using rule 7 (statement -> expression_statement .)
    VARIABLE        reduce using rule 7 (statement -> expression_statement .)
    IF              reduce using rule 7 (statement -> expression_statement .)
    WHILE           reduce using rule 7 (statement -> expression_statement .)
    FOR             reduce using rule 7 (statement -> expression_statement .)
    ECHO            reduce using rule 7 (statement -> expression_statement .)
    NUMBER          reduce using rule 7 (statement -> expression_statement .)
    STRING          reduce using rule 7 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 7 (statement -> expression_statement .)
    NULL            reduce using rule 7 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> expression_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 7 (statement -> expression_statement .)
    RETURN          reduce using rule 7 (statement -> expression_statement .)


state 19

    (8) statement -> function_declaration .

    CLOSE_TAG       reduce using rule 8 (statement -> function_declaration .)
    FUNCTION        reduce using rule 8 (statement -> function_declaration .)
    VARIABLE        reduce using rule 8 (statement -> function_declaration .)
    IF              reduce using rule 8 (statement -> function_declaration .)
    WHILE           reduce using rule 8 (statement -> function_declaration .)
    FOR             reduce using rule 8 (statement -> function_declaration .)
    ECHO            reduce using rule 8 (statement -> function_declaration .)
    NUMBER          reduce using rule 8 (statement -> function_declaration .)
    STRING          reduce using rule 8 (statement -> function_declaration .)
    BOOLEAN         reduce using rule 8 (statement -> function_declaration .)
    NULL            reduce using rule 8 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> function_declaration .)
    CLOSE_CURLY_BRACKET reduce using rule 8 (statement -> function_declaration .)
    RETURN          reduce using rule 8 (statement -> function_declaration .)


state 20

    (9) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 64


state 21

    (10) statement -> if_statement .
    (73) if_statement -> if_statement . ELSE body_statement_list

    CLOSE_TAG       reduce using rule 10 (statement -> if_statement .)
    FUNCTION        reduce using rule 10 (statement -> if_statement .)
    VARIABLE        reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    WHILE           reduce using rule 10 (statement -> if_statement .)
    FOR             reduce using rule 10 (statement -> if_statement .)
    ECHO            reduce using rule 10 (statement -> if_statement .)
    NUMBER          reduce using rule 10 (statement -> if_statement .)
    STRING          reduce using rule 10 (statement -> if_statement .)
    BOOLEAN         reduce using rule 10 (statement -> if_statement .)
    NULL            reduce using rule 10 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> if_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)
    ELSE            shift and go to state 65


state 22

    (11) statement -> while_statement .

    CLOSE_TAG       reduce using rule 11 (statement -> while_statement .)
    FUNCTION        reduce using rule 11 (statement -> while_statement .)
    VARIABLE        reduce using rule 11 (statement -> while_statement .)
    IF              reduce using rule 11 (statement -> while_statement .)
    WHILE           reduce using rule 11 (statement -> while_statement .)
    FOR             reduce using rule 11 (statement -> while_statement .)
    ECHO            reduce using rule 11 (statement -> while_statement .)
    NUMBER          reduce using rule 11 (statement -> while_statement .)
    STRING          reduce using rule 11 (statement -> while_statement .)
    BOOLEAN         reduce using rule 11 (statement -> while_statement .)
    NULL            reduce using rule 11 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> while_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 11 (statement -> while_statement .)
    RETURN          reduce using rule 11 (statement -> while_statement .)


state 23

    (12) statement -> for_statement .

    CLOSE_TAG       reduce using rule 12 (statement -> for_statement .)
    FUNCTION        reduce using rule 12 (statement -> for_statement .)
    VARIABLE        reduce using rule 12 (statement -> for_statement .)
    IF              reduce using rule 12 (statement -> for_statement .)
    WHILE           reduce using rule 12 (statement -> for_statement .)
    FOR             reduce using rule 12 (statement -> for_statement .)
    ECHO            reduce using rule 12 (statement -> for_statement .)
    NUMBER          reduce using rule 12 (statement -> for_statement .)
    STRING          reduce using rule 12 (statement -> for_statement .)
    BOOLEAN         reduce using rule 12 (statement -> for_statement .)
    NULL            reduce using rule 12 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> for_statement .)
    CLOSE_CURLY_BRACKET reduce using rule 12 (statement -> for_statement .)
    RETURN          reduce using rule 12 (statement -> for_statement .)


state 24

    (13) statement -> impresion .

    CLOSE_TAG       reduce using rule 13 (statement -> impresion .)
    FUNCTION        reduce using rule 13 (statement -> impresion .)
    VARIABLE        reduce using rule 13 (statement -> impresion .)
    IF              reduce using rule 13 (statement -> impresion .)
    WHILE           reduce using rule 13 (statement -> impresion .)
    FOR             reduce using rule 13 (statement -> impresion .)
    ECHO            reduce using rule 13 (statement -> impresion .)
    NUMBER          reduce using rule 13 (statement -> impresion .)
    STRING          reduce using rule 13 (statement -> impresion .)
    BOOLEAN         reduce using rule 13 (statement -> impresion .)
    NULL            reduce using rule 13 (statement -> impresion .)
    IDENTIFIER      reduce using rule 13 (statement -> impresion .)
    CLOSE_CURLY_BRACKET reduce using rule 13 (statement -> impresion .)
    RETURN          reduce using rule 13 (statement -> impresion .)


state 25

    (42) expression_statement -> expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       shift and go to state 66
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 26

    (43) function_declaration -> FUNCTION . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    IDENTIFIER      shift and go to state 67


state 27

    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . assignment_operator list_access
    (20) assignment -> VARIABLE . EQUALS casting math_expression
    (58) expression -> VARIABLE .
    (30) assignment_operator -> . PLUS_EQUALS
    (31) assignment_operator -> . MINUS_EQUALS
    (32) assignment_operator -> . MULTIPLY_EQUALS
    (33) assignment_operator -> . DIVIDE_EQUALS
    (34) assignment_operator -> . MODULO_EQUALS
    (35) assignment_operator -> . CONCATENATION_EQUALS
    (36) assignment_operator -> . LEFT_SHIFT_EQUALS
    (37) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (38) assignment_operator -> . AND_EQUALS
    (39) assignment_operator -> . OR_EQUALS
    (40) assignment_operator -> . XOR_EQUALS
    (41) assignment_operator -> . EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for CONCATENATION_EQUALS resolved as shift
    EQUALS          shift and go to state 69
    PLUS            shift and go to state 70
    SEMICOLON       reduce using rule 58 (expression -> VARIABLE .)
    MINUS           reduce using rule 58 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 58 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 58 (expression -> VARIABLE .)
    MODULO          reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 58 (expression -> VARIABLE .)
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    CONCATENATION_EQUALS shift and go to state 76
    LEFT_SHIFT_EQUALS shift and go to state 77
    RIGHT_SHIFT_EQUALS shift and go to state 78
    AND_EQUALS      shift and go to state 79
    OR_EQUALS       shift and go to state 80
    XOR_EQUALS      shift and go to state 81

  ! PLUS            [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! CONCATENATION_EQUALS [ reduce using rule 58 (expression -> VARIABLE .) ]

    assignment_operator            shift and go to state 68

state 28

    (72) if_statement -> IF . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 82


state 29

    (79) while_statement -> WHILE . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 83


state 30

    (74) for_statement -> FOR . OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 84


state 31

    (80) impresion -> ECHO . value_parameter_list SEMICOLON
    (53) value_parameter_list -> . value_parameter
    (54) value_parameter_list -> . value_parameter_list COMMA value_parameter
    (55) value_parameter_list -> . empty
    (56) value_parameter -> . expression
    (57) empty -> .
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    SEMICOLON       reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    value_parameter_list           shift and go to state 85
    value_parameter                shift and go to state 86
    empty                          shift and go to state 87
    expression                     shift and go to state 88
    function_call                  shift and go to state 13

state 32

    (59) expression -> NUMBER .

    SEMICOLON       reduce using rule 59 (expression -> NUMBER .)
    PLUS            reduce using rule 59 (expression -> NUMBER .)
    MINUS           reduce using rule 59 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 59 (expression -> NUMBER .)
    DIVIDE          reduce using rule 59 (expression -> NUMBER .)
    MODULO          reduce using rule 59 (expression -> NUMBER .)
    CONCATENATION   reduce using rule 59 (expression -> NUMBER .)
    CONCATENATION_EQUALS reduce using rule 59 (expression -> NUMBER .)
    DOUBLE_EQUALS   reduce using rule 59 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 59 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 59 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 59 (expression -> NUMBER .)
    GREATER_THAN_OR_EQUALS reduce using rule 59 (expression -> NUMBER .)
    LESS_THAN_OR_EQUALS reduce using rule 59 (expression -> NUMBER .)
    AND             reduce using rule 59 (expression -> NUMBER .)
    OR              reduce using rule 59 (expression -> NUMBER .)
    $end            reduce using rule 59 (expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 59 (expression -> NUMBER .)
    COMMA           reduce using rule 59 (expression -> NUMBER .)
    EQUALS          reduce using rule 59 (expression -> NUMBER .)
    CLOSE_SQUARE_BRACKET reduce using rule 59 (expression -> NUMBER .)


state 33

    (82) condition -> condition comparison . condition
    (85) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 90
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 89
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 34

    (87) comparison -> DOUBLE_EQUALS .

    OPEN_PARENTHESIS reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    NOT             reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    VARIABLE        reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    NUMBER          reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    STRING          reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    BOOLEAN         reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    NULL            reduce using rule 87 (comparison -> DOUBLE_EQUALS .)
    IDENTIFIER      reduce using rule 87 (comparison -> DOUBLE_EQUALS .)


state 35

    (88) comparison -> NOT_EQUALS .

    OPEN_PARENTHESIS reduce using rule 88 (comparison -> NOT_EQUALS .)
    NOT             reduce using rule 88 (comparison -> NOT_EQUALS .)
    VARIABLE        reduce using rule 88 (comparison -> NOT_EQUALS .)
    NUMBER          reduce using rule 88 (comparison -> NOT_EQUALS .)
    STRING          reduce using rule 88 (comparison -> NOT_EQUALS .)
    BOOLEAN         reduce using rule 88 (comparison -> NOT_EQUALS .)
    NULL            reduce using rule 88 (comparison -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 88 (comparison -> NOT_EQUALS .)


state 36

    (89) comparison -> GREATER_THAN .

    OPEN_PARENTHESIS reduce using rule 89 (comparison -> GREATER_THAN .)
    NOT             reduce using rule 89 (comparison -> GREATER_THAN .)
    VARIABLE        reduce using rule 89 (comparison -> GREATER_THAN .)
    NUMBER          reduce using rule 89 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 89 (comparison -> GREATER_THAN .)
    BOOLEAN         reduce using rule 89 (comparison -> GREATER_THAN .)
    NULL            reduce using rule 89 (comparison -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 89 (comparison -> GREATER_THAN .)


state 37

    (90) comparison -> LESS_THAN .

    OPEN_PARENTHESIS reduce using rule 90 (comparison -> LESS_THAN .)
    NOT             reduce using rule 90 (comparison -> LESS_THAN .)
    VARIABLE        reduce using rule 90 (comparison -> LESS_THAN .)
    NUMBER          reduce using rule 90 (comparison -> LESS_THAN .)
    STRING          reduce using rule 90 (comparison -> LESS_THAN .)
    BOOLEAN         reduce using rule 90 (comparison -> LESS_THAN .)
    NULL            reduce using rule 90 (comparison -> LESS_THAN .)
    IDENTIFIER      reduce using rule 90 (comparison -> LESS_THAN .)


state 38

    (91) comparison -> GREATER_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    NOT             reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    STRING          reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    NULL            reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 91 (comparison -> GREATER_THAN_OR_EQUALS .)


state 39

    (92) comparison -> LESS_THAN_OR_EQUALS .

    OPEN_PARENTHESIS reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    NOT             reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    VARIABLE        reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    NUMBER          reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    STRING          reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    BOOLEAN         reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    NULL            reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)
    IDENTIFIER      reduce using rule 92 (comparison -> LESS_THAN_OR_EQUALS .)


state 40

    (93) comparison -> AND .

    OPEN_PARENTHESIS reduce using rule 93 (comparison -> AND .)
    NOT             reduce using rule 93 (comparison -> AND .)
    VARIABLE        reduce using rule 93 (comparison -> AND .)
    NUMBER          reduce using rule 93 (comparison -> AND .)
    STRING          reduce using rule 93 (comparison -> AND .)
    BOOLEAN         reduce using rule 93 (comparison -> AND .)
    NULL            reduce using rule 93 (comparison -> AND .)
    IDENTIFIER      reduce using rule 93 (comparison -> AND .)


state 41

    (94) comparison -> OR .

    OPEN_PARENTHESIS reduce using rule 94 (comparison -> OR .)
    NOT             reduce using rule 94 (comparison -> OR .)
    VARIABLE        reduce using rule 94 (comparison -> OR .)
    NUMBER          reduce using rule 94 (comparison -> OR .)
    STRING          reduce using rule 94 (comparison -> OR .)
    BOOLEAN         reduce using rule 94 (comparison -> OR .)
    NULL            reduce using rule 94 (comparison -> OR .)
    IDENTIFIER      reduce using rule 94 (comparison -> OR .)


state 42

    (101) math_expression -> math_expression math_operator . math_expression
    (102) math_expression -> math_expression math_operator . VARIABLE
    (106) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 92
    OPEN_PARENTHESIS shift and go to state 93
    NUMBER          shift and go to state 94

    math_expression                shift and go to state 91

state 43

    (95) math_operator -> PLUS .

    VARIABLE        reduce using rule 95 (math_operator -> PLUS .)
    OPEN_PARENTHESIS reduce using rule 95 (math_operator -> PLUS .)
    NUMBER          reduce using rule 95 (math_operator -> PLUS .)


state 44

    (96) math_operator -> DIVIDE .

    VARIABLE        reduce using rule 96 (math_operator -> DIVIDE .)
    OPEN_PARENTHESIS reduce using rule 96 (math_operator -> DIVIDE .)
    NUMBER          reduce using rule 96 (math_operator -> DIVIDE .)


state 45

    (97) math_operator -> MINUS .

    VARIABLE        reduce using rule 97 (math_operator -> MINUS .)
    OPEN_PARENTHESIS reduce using rule 97 (math_operator -> MINUS .)
    NUMBER          reduce using rule 97 (math_operator -> MINUS .)


state 46

    (98) math_operator -> MULTIPLY .

    VARIABLE        reduce using rule 98 (math_operator -> MULTIPLY .)
    OPEN_PARENTHESIS reduce using rule 98 (math_operator -> MULTIPLY .)
    NUMBER          reduce using rule 98 (math_operator -> MULTIPLY .)


state 47

    (99) math_operator -> MODULO .

    VARIABLE        reduce using rule 99 (math_operator -> MODULO .)
    OPEN_PARENTHESIS reduce using rule 99 (math_operator -> MODULO .)
    NUMBER          reduce using rule 99 (math_operator -> MODULO .)


state 48

    (64) expression -> expression PLUS . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 95
    function_call                  shift and go to state 13

state 49

    (65) expression -> expression MINUS . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 96
    function_call                  shift and go to state 13

state 50

    (66) expression -> expression MULTIPLY . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 97
    function_call                  shift and go to state 13

state 51

    (67) expression -> expression DIVIDE . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 98
    function_call                  shift and go to state 13

state 52

    (68) expression -> expression MODULO . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 99
    function_call                  shift and go to state 13

state 53

    (69) expression -> expression CONCATENATION . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 100
    function_call                  shift and go to state 13

state 54

    (70) expression -> expression CONCATENATION_EQUALS . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 101
    function_call                  shift and go to state 13

state 55

    (83) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 103
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 102

state 56

    (104) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 105
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 104

state 57

    (86) condition -> NOT condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 86 (condition -> NOT condition .)
    CLOSE_PARENTHESIS reduce using rule 86 (condition -> NOT condition .)
    SEMICOLON       reduce using rule 86 (condition -> NOT condition .)
    COMMA           reduce using rule 86 (condition -> NOT condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 86 (condition -> NOT condition .) ]
  ! NOT_EQUALS      [ reduce using rule 86 (condition -> NOT condition .) ]
  ! GREATER_THAN    [ reduce using rule 86 (condition -> NOT condition .) ]
  ! LESS_THAN       [ reduce using rule 86 (condition -> NOT condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 86 (condition -> NOT condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 86 (condition -> NOT condition .) ]
  ! AND             [ reduce using rule 86 (condition -> NOT condition .) ]
  ! OR              [ reduce using rule 86 (condition -> NOT condition .) ]

    comparison                     shift and go to state 33

state 58

    (83) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 55
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 59

    (58) expression -> VARIABLE .

    PLUS            reduce using rule 58 (expression -> VARIABLE .)
    MINUS           reduce using rule 58 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 58 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 58 (expression -> VARIABLE .)
    MODULO          reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    DOUBLE_EQUALS   reduce using rule 58 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 58 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 58 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 58 (expression -> VARIABLE .)
    GREATER_THAN_OR_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    LESS_THAN_OR_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    AND             reduce using rule 58 (expression -> VARIABLE .)
    OR              reduce using rule 58 (expression -> VARIABLE .)
    $end            reduce using rule 58 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 58 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 58 (expression -> VARIABLE .)
    COMMA           reduce using rule 58 (expression -> VARIABLE .)
    EQUALS          reduce using rule 58 (expression -> VARIABLE .)
    CLOSE_SQUARE_BRACKET reduce using rule 58 (expression -> VARIABLE .)


state 60

    (103) math_expression -> VARIABLE math_operator . math_expression
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 94
    VARIABLE        shift and go to state 106
    OPEN_PARENTHESIS shift and go to state 108

    math_expression                shift and go to state 107

state 61

    (71) function_call -> IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS
    (47) parameter_list -> . parameter
    (48) parameter_list -> . parameter_list COMMA parameter
    (49) parameter_list -> . empty
    (50) parameter -> . VARIABLE
    (51) parameter -> . assignment
    (52) parameter -> . expression
    (57) empty -> .
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 112
    CLOSE_PARENTHESIS reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter_list                 shift and go to state 109
    parameter                      shift and go to state 110
    empty                          shift and go to state 111
    assignment                     shift and go to state 113
    expression                     shift and go to state 114
    function_call                  shift and go to state 13

state 62

    (1) program -> OPEN_TAG statement_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG statement_list CLOSE_TAG .)


state 63

    (5) statement_list -> statement_list statement .

    CLOSE_TAG       reduce using rule 5 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 5 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 5 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 5 (statement_list -> statement_list statement .)
    STRING          reduce using rule 5 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 5 (statement_list -> statement_list statement .)
    NULL            reduce using rule 5 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 5 (statement_list -> statement_list statement .)
    CLOSE_CURLY_BRACKET reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)


state 64

    (9) statement -> assignment SEMICOLON .

    CLOSE_TAG       reduce using rule 9 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 9 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 9 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 9 (statement -> assignment SEMICOLON .)
    ECHO            reduce using rule 9 (statement -> assignment SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> assignment SEMICOLON .)
    STRING          reduce using rule 9 (statement -> assignment SEMICOLON .)
    BOOLEAN         reduce using rule 9 (statement -> assignment SEMICOLON .)
    NULL            reduce using rule 9 (statement -> assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (statement -> assignment SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 9 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> assignment SEMICOLON .)


state 65

    (73) if_statement -> if_statement ELSE . body_statement_list
    (44) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 116

    body_statement_list            shift and go to state 115

state 66

    (42) expression_statement -> expression SEMICOLON .

    CLOSE_TAG       reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    VARIABLE        reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 42 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 42 (expression_statement -> expression SEMICOLON .)


state 67

    (43) function_declaration -> FUNCTION IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list

    OPEN_PARENTHESIS shift and go to state 117


state 68

    (14) assignment -> VARIABLE assignment_operator . expression
    (19) assignment -> VARIABLE assignment_operator . list_access
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (111) list_access -> . VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 118
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 119
    list_access                    shift and go to state 120
    function_call                  shift and go to state 13

state 69

    (15) assignment -> VARIABLE EQUALS . math_expression
    (16) assignment -> VARIABLE EQUALS . array_structure
    (17) assignment -> VARIABLE EQUALS . condition
    (20) assignment -> VARIABLE EQUALS . casting math_expression
    (41) assignment_operator -> EQUALS .
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (107) array_structure -> . OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (21) casting -> . OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    OPEN_PARENTHESIS shift and go to state 125
    OPEN_SQUARE_BRACKET shift and go to state 126
    NOT             shift and go to state 7
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! VARIABLE        [ reduce using rule 41 (assignment_operator -> EQUALS .) ]
  ! NUMBER          [ reduce using rule 41 (assignment_operator -> EQUALS .) ]
  ! STRING          [ reduce using rule 41 (assignment_operator -> EQUALS .) ]
  ! BOOLEAN         [ reduce using rule 41 (assignment_operator -> EQUALS .) ]
  ! NULL            [ reduce using rule 41 (assignment_operator -> EQUALS .) ]
  ! IDENTIFIER      [ reduce using rule 41 (assignment_operator -> EQUALS .) ]

    math_expression                shift and go to state 121
    array_structure                shift and go to state 122
    condition                      shift and go to state 123
    casting                        shift and go to state 124
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 70

    (18) assignment -> VARIABLE PLUS . PLUS

    PLUS            shift and go to state 127


state 71

    (30) assignment_operator -> PLUS_EQUALS .

    VARIABLE        reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)
    NUMBER          reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)
    BOOLEAN         reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 30 (assignment_operator -> PLUS_EQUALS .)


state 72

    (31) assignment_operator -> MINUS_EQUALS .

    VARIABLE        reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)
    NUMBER          reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)
    STRING          reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)
    BOOLEAN         reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)
    NULL            reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 31 (assignment_operator -> MINUS_EQUALS .)


state 73

    (32) assignment_operator -> MULTIPLY_EQUALS .

    VARIABLE        reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING          reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)
    BOOLEAN         reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)
    NULL            reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)
    IDENTIFIER      reduce using rule 32 (assignment_operator -> MULTIPLY_EQUALS .)


state 74

    (33) assignment_operator -> DIVIDE_EQUALS .

    VARIABLE        reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)
    STRING          reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)
    BOOLEAN         reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)
    NULL            reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 33 (assignment_operator -> DIVIDE_EQUALS .)


state 75

    (34) assignment_operator -> MODULO_EQUALS .

    VARIABLE        reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)
    NUMBER          reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)
    STRING          reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)
    BOOLEAN         reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)
    NULL            reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)
    IDENTIFIER      reduce using rule 34 (assignment_operator -> MODULO_EQUALS .)


state 76

    (35) assignment_operator -> CONCATENATION_EQUALS .

    VARIABLE        reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)
    NUMBER          reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)
    STRING          reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)
    BOOLEAN         reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)
    NULL            reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)
    IDENTIFIER      reduce using rule 35 (assignment_operator -> CONCATENATION_EQUALS .)


state 77

    (36) assignment_operator -> LEFT_SHIFT_EQUALS .

    VARIABLE        reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING          reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    BOOLEAN         reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NULL            reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 36 (assignment_operator -> LEFT_SHIFT_EQUALS .)


state 78

    (37) assignment_operator -> RIGHT_SHIFT_EQUALS .

    VARIABLE        reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING          reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    BOOLEAN         reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NULL            reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 37 (assignment_operator -> RIGHT_SHIFT_EQUALS .)


state 79

    (38) assignment_operator -> AND_EQUALS .

    VARIABLE        reduce using rule 38 (assignment_operator -> AND_EQUALS .)
    NUMBER          reduce using rule 38 (assignment_operator -> AND_EQUALS .)
    STRING          reduce using rule 38 (assignment_operator -> AND_EQUALS .)
    BOOLEAN         reduce using rule 38 (assignment_operator -> AND_EQUALS .)
    NULL            reduce using rule 38 (assignment_operator -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 38 (assignment_operator -> AND_EQUALS .)


state 80

    (39) assignment_operator -> OR_EQUALS .

    VARIABLE        reduce using rule 39 (assignment_operator -> OR_EQUALS .)
    NUMBER          reduce using rule 39 (assignment_operator -> OR_EQUALS .)
    STRING          reduce using rule 39 (assignment_operator -> OR_EQUALS .)
    BOOLEAN         reduce using rule 39 (assignment_operator -> OR_EQUALS .)
    NULL            reduce using rule 39 (assignment_operator -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 39 (assignment_operator -> OR_EQUALS .)


state 81

    (40) assignment_operator -> XOR_EQUALS .

    VARIABLE        reduce using rule 40 (assignment_operator -> XOR_EQUALS .)
    NUMBER          reduce using rule 40 (assignment_operator -> XOR_EQUALS .)
    STRING          reduce using rule 40 (assignment_operator -> XOR_EQUALS .)
    BOOLEAN         reduce using rule 40 (assignment_operator -> XOR_EQUALS .)
    NULL            reduce using rule 40 (assignment_operator -> XOR_EQUALS .)
    IDENTIFIER      reduce using rule 40 (assignment_operator -> XOR_EQUALS .)


state 82

    (72) if_statement -> IF OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 128
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 83

    (79) while_statement -> WHILE OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS body_statement_list
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 129
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 84

    (74) for_statement -> FOR OPEN_PARENTHESIS . for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (75) for_initialization -> . assignment
    (76) for_initialization -> . empty
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (57) empty -> .

    VARIABLE        shift and go to state 133
    SEMICOLON       reduce using rule 57 (empty -> .)

    for_initialization             shift and go to state 130
    assignment                     shift and go to state 131
    empty                          shift and go to state 132

state 85

    (80) impresion -> ECHO value_parameter_list . SEMICOLON
    (54) value_parameter_list -> value_parameter_list . COMMA value_parameter

    SEMICOLON       shift and go to state 134
    COMMA           shift and go to state 135


state 86

    (53) value_parameter_list -> value_parameter .

    SEMICOLON       reduce using rule 53 (value_parameter_list -> value_parameter .)
    COMMA           reduce using rule 53 (value_parameter_list -> value_parameter .)


state 87

    (55) value_parameter_list -> empty .

    SEMICOLON       reduce using rule 55 (value_parameter_list -> empty .)
    COMMA           reduce using rule 55 (value_parameter_list -> empty .)


state 88

    (56) value_parameter -> expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       reduce using rule 56 (value_parameter -> expression .)
    COMMA           reduce using rule 56 (value_parameter -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 89

    (82) condition -> condition comparison condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 82 (condition -> condition comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 82 (condition -> condition comparison condition .)
    SEMICOLON       reduce using rule 82 (condition -> condition comparison condition .)
    COMMA           reduce using rule 82 (condition -> condition comparison condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 82 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 33

state 90

    (85) condition -> condition comparison OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS
    (83) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 136
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 91

    (101) math_expression -> math_expression math_operator math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 101 (math_expression -> math_expression math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 101 (math_expression -> math_expression math_operator math_expression .)
    SEMICOLON       reduce using rule 101 (math_expression -> math_expression math_operator math_expression .)
    COMMA           reduce using rule 101 (math_expression -> math_expression math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 92

    (102) math_expression -> math_expression math_operator VARIABLE .
    (103) math_expression -> VARIABLE . math_operator math_expression
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .)
    SEMICOLON       reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .)
    COMMA           reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MINUS           [ reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MULTIPLY        [ reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .) ]
  ! MODULO          [ reduce using rule 102 (math_expression -> math_expression math_operator VARIABLE .) ]

    math_operator                  shift and go to state 60

state 93

    (106) math_expression -> math_expression math_operator OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS
    (104) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 94
    VARIABLE        shift and go to state 106
    OPEN_PARENTHESIS shift and go to state 108

    math_expression                shift and go to state 137

state 94

    (100) math_expression -> NUMBER .

    PLUS            reduce using rule 100 (math_expression -> NUMBER .)
    DIVIDE          reduce using rule 100 (math_expression -> NUMBER .)
    MINUS           reduce using rule 100 (math_expression -> NUMBER .)
    MULTIPLY        reduce using rule 100 (math_expression -> NUMBER .)
    MODULO          reduce using rule 100 (math_expression -> NUMBER .)
    $end            reduce using rule 100 (math_expression -> NUMBER .)
    CLOSE_PARENTHESIS reduce using rule 100 (math_expression -> NUMBER .)
    SEMICOLON       reduce using rule 100 (math_expression -> NUMBER .)
    COMMA           reduce using rule 100 (math_expression -> NUMBER .)


state 95

    (64) expression -> expression PLUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 64 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 64 (expression -> expression PLUS expression .)
    CONCATENATION   reduce using rule 64 (expression -> expression PLUS expression .)
    CONCATENATION_EQUALS reduce using rule 64 (expression -> expression PLUS expression .)
    DOUBLE_EQUALS   reduce using rule 64 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 64 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 64 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 64 (expression -> expression PLUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 64 (expression -> expression PLUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 64 (expression -> expression PLUS expression .)
    AND             reduce using rule 64 (expression -> expression PLUS expression .)
    OR              reduce using rule 64 (expression -> expression PLUS expression .)
    $end            reduce using rule 64 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression PLUS expression .)
    CLOSE_PARENTHESIS reduce using rule 64 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 64 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 64 (expression -> expression PLUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 64 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 96

    (65) expression -> expression MINUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 65 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 65 (expression -> expression MINUS expression .)
    CONCATENATION   reduce using rule 65 (expression -> expression MINUS expression .)
    CONCATENATION_EQUALS reduce using rule 65 (expression -> expression MINUS expression .)
    DOUBLE_EQUALS   reduce using rule 65 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 65 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 65 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 65 (expression -> expression MINUS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 65 (expression -> expression MINUS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 65 (expression -> expression MINUS expression .)
    AND             reduce using rule 65 (expression -> expression MINUS expression .)
    OR              reduce using rule 65 (expression -> expression MINUS expression .)
    $end            reduce using rule 65 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression MINUS expression .)
    CLOSE_PARENTHESIS reduce using rule 65 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 65 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 65 (expression -> expression MINUS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 65 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! MULTIPLY        [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 97

    (66) expression -> expression MULTIPLY expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 66 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 66 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    MODULO          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    CONCATENATION   reduce using rule 66 (expression -> expression MULTIPLY expression .)
    CONCATENATION_EQUALS reduce using rule 66 (expression -> expression MULTIPLY expression .)
    DOUBLE_EQUALS   reduce using rule 66 (expression -> expression MULTIPLY expression .)
    NOT_EQUALS      reduce using rule 66 (expression -> expression MULTIPLY expression .)
    GREATER_THAN    reduce using rule 66 (expression -> expression MULTIPLY expression .)
    LESS_THAN       reduce using rule 66 (expression -> expression MULTIPLY expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 66 (expression -> expression MULTIPLY expression .)
    LESS_THAN_OR_EQUALS reduce using rule 66 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 66 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 66 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 66 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression MULTIPLY expression .)
    CLOSE_PARENTHESIS reduce using rule 66 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    EQUALS          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 66 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 98

    (67) expression -> expression DIVIDE expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 67 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 67 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 67 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 67 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 67 (expression -> expression DIVIDE expression .)
    CONCATENATION   reduce using rule 67 (expression -> expression DIVIDE expression .)
    CONCATENATION_EQUALS reduce using rule 67 (expression -> expression DIVIDE expression .)
    DOUBLE_EQUALS   reduce using rule 67 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 67 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 67 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 67 (expression -> expression DIVIDE expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 67 (expression -> expression DIVIDE expression .)
    LESS_THAN_OR_EQUALS reduce using rule 67 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 67 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 67 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 67 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression DIVIDE expression .)
    CLOSE_PARENTHESIS reduce using rule 67 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 67 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 67 (expression -> expression DIVIDE expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 67 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 99

    (68) expression -> expression MODULO expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    PLUS            reduce using rule 68 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 68 (expression -> expression MODULO expression .)
    MULTIPLY        reduce using rule 68 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 68 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 68 (expression -> expression MODULO expression .)
    CONCATENATION   reduce using rule 68 (expression -> expression MODULO expression .)
    CONCATENATION_EQUALS reduce using rule 68 (expression -> expression MODULO expression .)
    DOUBLE_EQUALS   reduce using rule 68 (expression -> expression MODULO expression .)
    NOT_EQUALS      reduce using rule 68 (expression -> expression MODULO expression .)
    GREATER_THAN    reduce using rule 68 (expression -> expression MODULO expression .)
    LESS_THAN       reduce using rule 68 (expression -> expression MODULO expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 68 (expression -> expression MODULO expression .)
    LESS_THAN_OR_EQUALS reduce using rule 68 (expression -> expression MODULO expression .)
    AND             reduce using rule 68 (expression -> expression MODULO expression .)
    OR              reduce using rule 68 (expression -> expression MODULO expression .)
    $end            reduce using rule 68 (expression -> expression MODULO expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression MODULO expression .)
    CLOSE_PARENTHESIS reduce using rule 68 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 68 (expression -> expression MODULO expression .)
    EQUALS          reduce using rule 68 (expression -> expression MODULO expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 68 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! MULTIPLY        [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MODULO          [ shift and go to state 52 ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 100

    (69) expression -> expression CONCATENATION expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    CONCATENATION   reduce using rule 69 (expression -> expression CONCATENATION expression .)
    CONCATENATION_EQUALS reduce using rule 69 (expression -> expression CONCATENATION expression .)
    DOUBLE_EQUALS   reduce using rule 69 (expression -> expression CONCATENATION expression .)
    NOT_EQUALS      reduce using rule 69 (expression -> expression CONCATENATION expression .)
    GREATER_THAN    reduce using rule 69 (expression -> expression CONCATENATION expression .)
    LESS_THAN       reduce using rule 69 (expression -> expression CONCATENATION expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 69 (expression -> expression CONCATENATION expression .)
    LESS_THAN_OR_EQUALS reduce using rule 69 (expression -> expression CONCATENATION expression .)
    AND             reduce using rule 69 (expression -> expression CONCATENATION expression .)
    OR              reduce using rule 69 (expression -> expression CONCATENATION expression .)
    $end            reduce using rule 69 (expression -> expression CONCATENATION expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression CONCATENATION expression .)
    CLOSE_PARENTHESIS reduce using rule 69 (expression -> expression CONCATENATION expression .)
    COMMA           reduce using rule 69 (expression -> expression CONCATENATION expression .)
    EQUALS          reduce using rule 69 (expression -> expression CONCATENATION expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 69 (expression -> expression CONCATENATION expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 69 (expression -> expression CONCATENATION expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression CONCATENATION expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression CONCATENATION expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression CONCATENATION expression .) ]
  ! MODULO          [ reduce using rule 69 (expression -> expression CONCATENATION expression .) ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 101

    (70) expression -> expression CONCATENATION_EQUALS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    CONCATENATION   reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    CONCATENATION_EQUALS reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    DOUBLE_EQUALS   reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    NOT_EQUALS      reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    GREATER_THAN    reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    LESS_THAN       reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    GREATER_THAN_OR_EQUALS reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    LESS_THAN_OR_EQUALS reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    AND             reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    OR              reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    $end            reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    CLOSE_PARENTHESIS reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    COMMA           reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    EQUALS          reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    CLOSE_SQUARE_BRACKET reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52

  ! PLUS            [ reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! MODULO          [ reduce using rule 70 (expression -> expression CONCATENATION_EQUALS expression .) ]
  ! CONCATENATION   [ shift and go to state 53 ]
  ! CONCATENATION_EQUALS [ shift and go to state 54 ]


state 102

    (83) condition -> OPEN_PARENTHESIS condition comparison . condition CLOSE_PARENTHESIS
    (82) condition -> condition comparison . condition
    (85) condition -> condition comparison . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 90
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 138
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 103

    (84) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 139

state 104

    (104) math_expression -> OPEN_PARENTHESIS math_expression math_operator . math_expression CLOSE_PARENTHESIS
    (101) math_expression -> math_expression math_operator . math_expression
    (102) math_expression -> math_expression math_operator . VARIABLE
    (106) math_expression -> math_expression math_operator . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 92
    OPEN_PARENTHESIS shift and go to state 93
    NUMBER          shift and go to state 94

    math_expression                shift and go to state 140

state 105

    (105) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 141

state 106

    (103) math_expression -> VARIABLE . math_operator math_expression
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 60

state 107

    (103) math_expression -> VARIABLE math_operator math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .)
    SEMICOLON       reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .)
    COMMA           reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 103 (math_expression -> VARIABLE math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 108

    (104) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 94
    VARIABLE        shift and go to state 106
    OPEN_PARENTHESIS shift and go to state 108

    math_expression                shift and go to state 56

state 109

    (71) function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS
    (48) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 142
    COMMA           shift and go to state 143


state 110

    (47) parameter_list -> parameter .

    CLOSE_PARENTHESIS reduce using rule 47 (parameter_list -> parameter .)
    COMMA           reduce using rule 47 (parameter_list -> parameter .)


state 111

    (49) parameter_list -> empty .

    CLOSE_PARENTHESIS reduce using rule 49 (parameter_list -> empty .)
    COMMA           reduce using rule 49 (parameter_list -> empty .)


state 112

    (50) parameter -> VARIABLE .
    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . assignment_operator list_access
    (20) assignment -> VARIABLE . EQUALS casting math_expression
    (58) expression -> VARIABLE .
    (30) assignment_operator -> . PLUS_EQUALS
    (31) assignment_operator -> . MINUS_EQUALS
    (32) assignment_operator -> . MULTIPLY_EQUALS
    (33) assignment_operator -> . DIVIDE_EQUALS
    (34) assignment_operator -> . MODULO_EQUALS
    (35) assignment_operator -> . CONCATENATION_EQUALS
    (36) assignment_operator -> . LEFT_SHIFT_EQUALS
    (37) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (38) assignment_operator -> . AND_EQUALS
    (39) assignment_operator -> . OR_EQUALS
    (40) assignment_operator -> . XOR_EQUALS
    (41) assignment_operator -> . EQUALS

  ! shift/reduce conflict for PLUS resolved as shift
  ! reduce/reduce conflict for CLOSE_PARENTHESIS resolved using rule 50 (parameter -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 50 (parameter -> VARIABLE .)
  ! shift/reduce conflict for CONCATENATION_EQUALS resolved as shift
    CLOSE_PARENTHESIS reduce using rule 50 (parameter -> VARIABLE .)
    COMMA           reduce using rule 50 (parameter -> VARIABLE .)
    EQUALS          shift and go to state 69
    PLUS            shift and go to state 70
    MINUS           reduce using rule 58 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 58 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 58 (expression -> VARIABLE .)
    MODULO          reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 58 (expression -> VARIABLE .)
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    CONCATENATION_EQUALS shift and go to state 76
    LEFT_SHIFT_EQUALS shift and go to state 77
    RIGHT_SHIFT_EQUALS shift and go to state 78
    AND_EQUALS      shift and go to state 79
    OR_EQUALS       shift and go to state 80
    XOR_EQUALS      shift and go to state 81

  ! PLUS            [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! CONCATENATION_EQUALS [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! CLOSE_PARENTHESIS [ reduce using rule 58 (expression -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 58 (expression -> VARIABLE .) ]

    assignment_operator            shift and go to state 68

state 113

    (51) parameter -> assignment .

    CLOSE_PARENTHESIS reduce using rule 51 (parameter -> assignment .)
    COMMA           reduce using rule 51 (parameter -> assignment .)


state 114

    (52) parameter -> expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_PARENTHESIS reduce using rule 52 (parameter -> expression .)
    COMMA           reduce using rule 52 (parameter -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 115

    (73) if_statement -> if_statement ELSE body_statement_list .

    ELSE            reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    CLOSE_TAG       reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    FUNCTION        reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    VARIABLE        reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    IF              reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    WHILE           reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    FOR             reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    ECHO            reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    NUMBER          reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    STRING          reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    BOOLEAN         reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    NULL            reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    IDENTIFIER      reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)
    RETURN          reduce using rule 73 (if_statement -> if_statement ELSE body_statement_list .)


state 116

    (44) body_statement_list -> OPEN_CURLY_BRACKET . statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> OPEN_CURLY_BRACKET . empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> OPEN_CURLY_BRACKET . statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (6) statement_list -> . empty
    (57) empty -> .
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (42) expression_statement -> . expression SEMICOLON
    (43) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (72) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (73) if_statement -> . if_statement ELSE body_statement_list
    (79) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (74) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (80) impresion -> . ECHO value_parameter_list SEMICOLON
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    CLOSE_CURLY_BRACKET reduce using rule 57 (empty -> .)
    RETURN          reduce using rule 57 (empty -> .)
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

  ! FUNCTION        [ reduce using rule 57 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 57 (empty -> .) ]
  ! IF              [ reduce using rule 57 (empty -> .) ]
  ! WHILE           [ reduce using rule 57 (empty -> .) ]
  ! FOR             [ reduce using rule 57 (empty -> .) ]
  ! ECHO            [ reduce using rule 57 (empty -> .) ]
  ! NUMBER          [ reduce using rule 57 (empty -> .) ]
  ! STRING          [ reduce using rule 57 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 57 (empty -> .) ]
  ! NULL            [ reduce using rule 57 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 57 (empty -> .) ]

    statement_list                 shift and go to state 144
    empty                          shift and go to state 145
    expression                     shift and go to state 25
    statement                      shift and go to state 16
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    function_call                  shift and go to state 13

state 117

    (43) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS body_statement_list
    (47) parameter_list -> . parameter
    (48) parameter_list -> . parameter_list COMMA parameter
    (49) parameter_list -> . empty
    (50) parameter -> . VARIABLE
    (51) parameter -> . assignment
    (52) parameter -> . expression
    (57) empty -> .
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 112
    CLOSE_PARENTHESIS reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter_list                 shift and go to state 146
    parameter                      shift and go to state 110
    empty                          shift and go to state 111
    assignment                     shift and go to state 113
    expression                     shift and go to state 114
    function_call                  shift and go to state 13

state 118

    (58) expression -> VARIABLE .
    (111) list_access -> VARIABLE . OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET

    PLUS            reduce using rule 58 (expression -> VARIABLE .)
    MINUS           reduce using rule 58 (expression -> VARIABLE .)
    MULTIPLY        reduce using rule 58 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 58 (expression -> VARIABLE .)
    MODULO          reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION   reduce using rule 58 (expression -> VARIABLE .)
    CONCATENATION_EQUALS reduce using rule 58 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 58 (expression -> VARIABLE .)
    CLOSE_PARENTHESIS reduce using rule 58 (expression -> VARIABLE .)
    COMMA           reduce using rule 58 (expression -> VARIABLE .)
    OPEN_SQUARE_BRACKET shift and go to state 147


state 119

    (14) assignment -> VARIABLE assignment_operator expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    CLOSE_PARENTHESIS reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    COMMA           reduce using rule 14 (assignment -> VARIABLE assignment_operator expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 120

    (19) assignment -> VARIABLE assignment_operator list_access .

    SEMICOLON       reduce using rule 19 (assignment -> VARIABLE assignment_operator list_access .)
    CLOSE_PARENTHESIS reduce using rule 19 (assignment -> VARIABLE assignment_operator list_access .)
    COMMA           reduce using rule 19 (assignment -> VARIABLE assignment_operator list_access .)


state 121

    (15) assignment -> VARIABLE EQUALS math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    SEMICOLON       reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    CLOSE_PARENTHESIS reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    COMMA           reduce using rule 15 (assignment -> VARIABLE EQUALS math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 42

state 122

    (16) assignment -> VARIABLE EQUALS array_structure .

    SEMICOLON       reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)
    CLOSE_PARENTHESIS reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)
    COMMA           reduce using rule 16 (assignment -> VARIABLE EQUALS array_structure .)


state 123

    (17) assignment -> VARIABLE EQUALS condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    SEMICOLON       reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    CLOSE_PARENTHESIS reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    COMMA           reduce using rule 17 (assignment -> VARIABLE EQUALS condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 124

    (20) assignment -> VARIABLE EQUALS casting . math_expression
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 94
    VARIABLE        shift and go to state 106
    OPEN_PARENTHESIS shift and go to state 108

    math_expression                shift and go to state 148

state 125

    (104) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (83) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (21) casting -> OPEN_PARENTHESIS . data_type CLOSE_PARENTHESIS
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (22) data_type -> . INT_T
    (23) data_type -> . INTEGER_T
    (24) data_type -> . FLOAT_T
    (25) data_type -> . DOUBLE_T
    (26) data_type -> . STRING_T
    (27) data_type -> . BOOLEAN_T
    (28) data_type -> . ARRAY_T
    (29) data_type -> . OBJECT_T
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    OPEN_PARENTHESIS shift and go to state 149
    NOT             shift and go to state 7
    INT_T           shift and go to state 151
    INTEGER_T       shift and go to state 152
    FLOAT_T         shift and go to state 153
    DOUBLE_T        shift and go to state 154
    STRING_T        shift and go to state 155
    BOOLEAN_T       shift and go to state 156
    ARRAY_T         shift and go to state 157
    OBJECT_T        shift and go to state 158
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    math_expression                shift and go to state 56
    condition                      shift and go to state 55
    data_type                      shift and go to state 150
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 126

    (107) array_structure -> OPEN_SQUARE_BRACKET . key_declaration CLOSE_SQUARE_BRACKET
    (108) key_declaration -> . expression EQUALS GREATER_THAN expression
    (109) key_declaration -> . key_declaration COMMA key_declaration
    (110) key_declaration -> . empty
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (57) empty -> .
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    CLOSE_SQUARE_BRACKET reduce using rule 57 (empty -> .)
    COMMA           reduce using rule 57 (empty -> .)
    IDENTIFIER      shift and go to state 14

    key_declaration                shift and go to state 159
    expression                     shift and go to state 160
    empty                          shift and go to state 161
    function_call                  shift and go to state 13

state 127

    (18) assignment -> VARIABLE PLUS PLUS .

    SEMICOLON       reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)
    CLOSE_PARENTHESIS reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)
    COMMA           reduce using rule 18 (assignment -> VARIABLE PLUS PLUS .)


state 128

    (72) if_statement -> IF OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 162
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 129

    (79) while_statement -> WHILE OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS body_statement_list
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 163
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 130

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization . SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list

    SEMICOLON       shift and go to state 164


state 131

    (75) for_initialization -> assignment .

    SEMICOLON       reduce using rule 75 (for_initialization -> assignment .)


state 132

    (76) for_initialization -> empty .

    SEMICOLON       reduce using rule 76 (for_initialization -> empty .)


state 133

    (14) assignment -> VARIABLE . assignment_operator expression
    (15) assignment -> VARIABLE . EQUALS math_expression
    (16) assignment -> VARIABLE . EQUALS array_structure
    (17) assignment -> VARIABLE . EQUALS condition
    (18) assignment -> VARIABLE . PLUS PLUS
    (19) assignment -> VARIABLE . assignment_operator list_access
    (20) assignment -> VARIABLE . EQUALS casting math_expression
    (30) assignment_operator -> . PLUS_EQUALS
    (31) assignment_operator -> . MINUS_EQUALS
    (32) assignment_operator -> . MULTIPLY_EQUALS
    (33) assignment_operator -> . DIVIDE_EQUALS
    (34) assignment_operator -> . MODULO_EQUALS
    (35) assignment_operator -> . CONCATENATION_EQUALS
    (36) assignment_operator -> . LEFT_SHIFT_EQUALS
    (37) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (38) assignment_operator -> . AND_EQUALS
    (39) assignment_operator -> . OR_EQUALS
    (40) assignment_operator -> . XOR_EQUALS
    (41) assignment_operator -> . EQUALS

    EQUALS          shift and go to state 69
    PLUS            shift and go to state 70
    PLUS_EQUALS     shift and go to state 71
    MINUS_EQUALS    shift and go to state 72
    MULTIPLY_EQUALS shift and go to state 73
    DIVIDE_EQUALS   shift and go to state 74
    MODULO_EQUALS   shift and go to state 75
    CONCATENATION_EQUALS shift and go to state 76
    LEFT_SHIFT_EQUALS shift and go to state 77
    RIGHT_SHIFT_EQUALS shift and go to state 78
    AND_EQUALS      shift and go to state 79
    OR_EQUALS       shift and go to state 80
    XOR_EQUALS      shift and go to state 81

    assignment_operator            shift and go to state 68

state 134

    (80) impresion -> ECHO value_parameter_list SEMICOLON .

    CLOSE_TAG       reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    FUNCTION        reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    VARIABLE        reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    IF              reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    WHILE           reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    FOR             reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    ECHO            reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    NUMBER          reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    STRING          reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    BOOLEAN         reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    NULL            reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    CLOSE_CURLY_BRACKET reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)
    RETURN          reduce using rule 80 (impresion -> ECHO value_parameter_list SEMICOLON .)


state 135

    (54) value_parameter_list -> value_parameter_list COMMA . value_parameter
    (56) value_parameter -> . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    value_parameter                shift and go to state 165
    expression                     shift and go to state 88
    function_call                  shift and go to state 13

state 136

    (85) condition -> condition comparison OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS
    (83) condition -> OPEN_PARENTHESIS condition . comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS condition . CLOSE_PARENTHESIS comparison condition
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    CLOSE_PARENTHESIS shift and go to state 166
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 102

state 137

    (106) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS
    (104) math_expression -> OPEN_PARENTHESIS math_expression . math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS math_expression . CLOSE_PARENTHESIS math_operator math_expression
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    CLOSE_PARENTHESIS shift and go to state 167
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 104

state 138

    (83) condition -> OPEN_PARENTHESIS condition comparison condition . CLOSE_PARENTHESIS
    (82) condition -> condition comparison condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSE_PARENTHESIS shift and go to state 168
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! CLOSE_PARENTHESIS [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! DOUBLE_EQUALS   [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! AND             [ reduce using rule 82 (condition -> condition comparison condition .) ]
  ! OR              [ reduce using rule 82 (condition -> condition comparison condition .) ]

    comparison                     shift and go to state 33

state 139

    (84) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison . condition
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 169
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 140

    (104) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression . CLOSE_PARENTHESIS
    (101) math_expression -> math_expression math_operator math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for CLOSE_PARENTHESIS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    CLOSE_PARENTHESIS shift and go to state 170
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! CLOSE_PARENTHESIS [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! PLUS            [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 101 (math_expression -> math_expression math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 141

    (105) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator . math_expression
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS

    NUMBER          shift and go to state 94
    VARIABLE        shift and go to state 106
    OPEN_PARENTHESIS shift and go to state 108

    math_expression                shift and go to state 171

state 142

    (71) function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .

    PLUS            reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CONCATENATION   reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CONCATENATION_EQUALS reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    AND             reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    OR              reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    $end            reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    EQUALS          reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)
    CLOSE_SQUARE_BRACKET reduce using rule 71 (function_call -> IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS .)


state 143

    (48) parameter_list -> parameter_list COMMA . parameter
    (50) parameter -> . VARIABLE
    (51) parameter -> . assignment
    (52) parameter -> . expression
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 112
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    parameter                      shift and go to state 172
    assignment                     shift and go to state 113
    expression                     shift and go to state 114
    function_call                  shift and go to state 13

state 144

    (44) body_statement_list -> OPEN_CURLY_BRACKET statement_list . CLOSE_CURLY_BRACKET
    (46) body_statement_list -> OPEN_CURLY_BRACKET statement_list . RETURN expression SEMICOLON CLOSE_CURLY_BRACKET
    (5) statement_list -> statement_list . statement
    (7) statement -> . expression_statement
    (8) statement -> . function_declaration
    (9) statement -> . assignment SEMICOLON
    (10) statement -> . if_statement
    (11) statement -> . while_statement
    (12) statement -> . for_statement
    (13) statement -> . impresion
    (42) expression_statement -> . expression SEMICOLON
    (43) function_declaration -> . FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (72) if_statement -> . IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (73) if_statement -> . if_statement ELSE body_statement_list
    (79) while_statement -> . WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list
    (74) for_statement -> . FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (80) impresion -> . ECHO value_parameter_list SEMICOLON
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    CLOSE_CURLY_BRACKET shift and go to state 173
    RETURN          shift and go to state 174
    FUNCTION        shift and go to state 26
    VARIABLE        shift and go to state 27
    IF              shift and go to state 28
    WHILE           shift and go to state 29
    FOR             shift and go to state 30
    ECHO            shift and go to state 31
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 25
    statement                      shift and go to state 63
    expression_statement           shift and go to state 18
    function_declaration           shift and go to state 19
    assignment                     shift and go to state 20
    if_statement                   shift and go to state 21
    while_statement                shift and go to state 22
    for_statement                  shift and go to state 23
    impresion                      shift and go to state 24
    function_call                  shift and go to state 13

state 145

    (45) body_statement_list -> OPEN_CURLY_BRACKET empty . CLOSE_CURLY_BRACKET
    (6) statement_list -> empty .

  ! shift/reduce conflict for CLOSE_CURLY_BRACKET resolved as shift
    CLOSE_CURLY_BRACKET shift and go to state 175
    RETURN          reduce using rule 6 (statement_list -> empty .)
    FUNCTION        reduce using rule 6 (statement_list -> empty .)
    VARIABLE        reduce using rule 6 (statement_list -> empty .)
    IF              reduce using rule 6 (statement_list -> empty .)
    WHILE           reduce using rule 6 (statement_list -> empty .)
    FOR             reduce using rule 6 (statement_list -> empty .)
    ECHO            reduce using rule 6 (statement_list -> empty .)
    NUMBER          reduce using rule 6 (statement_list -> empty .)
    STRING          reduce using rule 6 (statement_list -> empty .)
    BOOLEAN         reduce using rule 6 (statement_list -> empty .)
    NULL            reduce using rule 6 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 6 (statement_list -> empty .)

  ! CLOSE_CURLY_BRACKET [ reduce using rule 6 (statement_list -> empty .) ]


state 146

    (43) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS body_statement_list
    (48) parameter_list -> parameter_list . COMMA parameter

    CLOSE_PARENTHESIS shift and go to state 176
    COMMA           shift and go to state 143


state 147

    (111) list_access -> VARIABLE OPEN_SQUARE_BRACKET . expression CLOSE_SQUARE_BRACKET
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 177
    function_call                  shift and go to state 13

state 148

    (20) assignment -> VARIABLE EQUALS casting math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

    SEMICOLON       reduce using rule 20 (assignment -> VARIABLE EQUALS casting math_expression .)
    CLOSE_PARENTHESIS reduce using rule 20 (assignment -> VARIABLE EQUALS casting math_expression .)
    COMMA           reduce using rule 20 (assignment -> VARIABLE EQUALS casting math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

    math_operator                  shift and go to state 42

state 149

    (104) math_expression -> OPEN_PARENTHESIS . math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> OPEN_PARENTHESIS . math_expression CLOSE_PARENTHESIS math_operator math_expression
    (83) condition -> OPEN_PARENTHESIS . condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> OPEN_PARENTHESIS . condition CLOSE_PARENTHESIS comparison condition
    (100) math_expression -> . NUMBER
    (101) math_expression -> . math_expression math_operator math_expression
    (102) math_expression -> . math_expression math_operator VARIABLE
    (103) math_expression -> . VARIABLE math_operator math_expression
    (104) math_expression -> . OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS
    (105) math_expression -> . OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression
    (106) math_expression -> . math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 9
    OPEN_PARENTHESIS shift and go to state 149
    NOT             shift and go to state 7
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    math_expression                shift and go to state 56
    condition                      shift and go to state 55
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 150

    (21) casting -> OPEN_PARENTHESIS data_type . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 178


state 151

    (22) data_type -> INT_T .

    CLOSE_PARENTHESIS reduce using rule 22 (data_type -> INT_T .)


state 152

    (23) data_type -> INTEGER_T .

    CLOSE_PARENTHESIS reduce using rule 23 (data_type -> INTEGER_T .)


state 153

    (24) data_type -> FLOAT_T .

    CLOSE_PARENTHESIS reduce using rule 24 (data_type -> FLOAT_T .)


state 154

    (25) data_type -> DOUBLE_T .

    CLOSE_PARENTHESIS reduce using rule 25 (data_type -> DOUBLE_T .)


state 155

    (26) data_type -> STRING_T .

    CLOSE_PARENTHESIS reduce using rule 26 (data_type -> STRING_T .)


state 156

    (27) data_type -> BOOLEAN_T .

    CLOSE_PARENTHESIS reduce using rule 27 (data_type -> BOOLEAN_T .)


state 157

    (28) data_type -> ARRAY_T .

    CLOSE_PARENTHESIS reduce using rule 28 (data_type -> ARRAY_T .)


state 158

    (29) data_type -> OBJECT_T .

    CLOSE_PARENTHESIS reduce using rule 29 (data_type -> OBJECT_T .)


state 159

    (107) array_structure -> OPEN_SQUARE_BRACKET key_declaration . CLOSE_SQUARE_BRACKET
    (109) key_declaration -> key_declaration . COMMA key_declaration

    CLOSE_SQUARE_BRACKET shift and go to state 179
    COMMA           shift and go to state 180


state 160

    (108) key_declaration -> expression . EQUALS GREATER_THAN expression
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    EQUALS          shift and go to state 181
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 161

    (110) key_declaration -> empty .

    CLOSE_SQUARE_BRACKET reduce using rule 110 (key_declaration -> empty .)
    COMMA           reduce using rule 110 (key_declaration -> empty .)


state 162

    (72) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (44) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 116

    body_statement_list            shift and go to state 182

state 163

    (79) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . body_statement_list
    (44) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 116

    body_statement_list            shift and go to state 183

state 164

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON . condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (81) condition -> . expression
    (82) condition -> . condition comparison condition
    (83) condition -> . OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS
    (84) condition -> . OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition
    (85) condition -> . condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (86) condition -> . NOT condition
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    OPEN_PARENTHESIS shift and go to state 58
    NOT             shift and go to state 7
    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    condition                      shift and go to state 184
    expression                     shift and go to state 5
    function_call                  shift and go to state 13

state 165

    (54) value_parameter_list -> value_parameter_list COMMA value_parameter .

    SEMICOLON       reduce using rule 54 (value_parameter_list -> value_parameter_list COMMA value_parameter .)
    COMMA           reduce using rule 54 (value_parameter_list -> value_parameter_list COMMA value_parameter .)


state 166

    (85) condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .
    (84) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS . comparison condition
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! NOT_EQUALS      [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN    [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN       [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! AND             [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]
  ! OR              [ reduce using rule 85 (condition -> condition comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS .) ]

    comparison                     shift and go to state 139

state 167

    (106) math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .
    (105) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS . math_operator math_expression
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! DIVIDE          [ reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MINUS           [ reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MULTIPLY        [ reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]
  ! MODULO          [ reduce using rule 106 (math_expression -> math_expression math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS .) ]

    math_operator                  shift and go to state 141

state 168

    (83) condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .

    DOUBLE_EQUALS   reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN    reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN       reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    GREATER_THAN_OR_EQUALS reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    LESS_THAN_OR_EQUALS reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    AND             reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    OR              reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    $end            reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 83 (condition -> OPEN_PARENTHESIS condition comparison condition CLOSE_PARENTHESIS .)


state 169

    (84) condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

  ! shift/reduce conflict for DOUBLE_EQUALS resolved as shift
  ! shift/reduce conflict for NOT_EQUALS resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN_OR_EQUALS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    CLOSE_PARENTHESIS reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    SEMICOLON       reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    COMMA           reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .)
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

  ! DOUBLE_EQUALS   [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! NOT_EQUALS      [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN    [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN       [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! GREATER_THAN_OR_EQUALS [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! LESS_THAN_OR_EQUALS [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! AND             [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]
  ! OR              [ reduce using rule 84 (condition -> OPEN_PARENTHESIS condition CLOSE_PARENTHESIS comparison condition .) ]

    comparison                     shift and go to state 33

state 170

    (104) math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .

    PLUS            reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    DIVIDE          reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MINUS           reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MULTIPLY        reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    MODULO          reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    $end            reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 104 (math_expression -> OPEN_PARENTHESIS math_expression math_operator math_expression CLOSE_PARENTHESIS .)


state 171

    (105) math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .
    (101) math_expression -> math_expression . math_operator math_expression
    (102) math_expression -> math_expression . math_operator VARIABLE
    (106) math_expression -> math_expression . math_operator OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS
    (95) math_operator -> . PLUS
    (96) math_operator -> . DIVIDE
    (97) math_operator -> . MINUS
    (98) math_operator -> . MULTIPLY
    (99) math_operator -> . MODULO

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    CLOSE_PARENTHESIS reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    SEMICOLON       reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    COMMA           reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .)
    PLUS            shift and go to state 43
    DIVIDE          shift and go to state 44
    MINUS           shift and go to state 45
    MULTIPLY        shift and go to state 46
    MODULO          shift and go to state 47

  ! PLUS            [ reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! DIVIDE          [ reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MINUS           [ reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MULTIPLY        [ reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]
  ! MODULO          [ reduce using rule 105 (math_expression -> OPEN_PARENTHESIS math_expression CLOSE_PARENTHESIS math_operator math_expression .) ]

    math_operator                  shift and go to state 42

state 172

    (48) parameter_list -> parameter_list COMMA parameter .

    CLOSE_PARENTHESIS reduce using rule 48 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 48 (parameter_list -> parameter_list COMMA parameter .)


state 173

    (44) body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .

    ELSE            reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    CLOSE_TAG       reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 44 (body_statement_list -> OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET .)


state 174

    (46) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN . expression SEMICOLON CLOSE_CURLY_BRACKET
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 185
    function_call                  shift and go to state 13

state 175

    (45) body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .

    ELSE            reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    CLOSE_TAG       reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 45 (body_statement_list -> OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET .)


state 176

    (43) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS . body_statement_list
    (44) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 116

    body_statement_list            shift and go to state 186

state 177

    (111) list_access -> VARIABLE OPEN_SQUARE_BRACKET expression . CLOSE_SQUARE_BRACKET
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_SQUARE_BRACKET shift and go to state 187
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 178

    (21) casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS .

    NUMBER          reduce using rule 21 (casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS .)
    VARIABLE        reduce using rule 21 (casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS .)
    OPEN_PARENTHESIS reduce using rule 21 (casting -> OPEN_PARENTHESIS data_type CLOSE_PARENTHESIS .)


state 179

    (107) array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 107 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 107 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)
    COMMA           reduce using rule 107 (array_structure -> OPEN_SQUARE_BRACKET key_declaration CLOSE_SQUARE_BRACKET .)


state 180

    (109) key_declaration -> key_declaration COMMA . key_declaration
    (108) key_declaration -> . expression EQUALS GREATER_THAN expression
    (109) key_declaration -> . key_declaration COMMA key_declaration
    (110) key_declaration -> . empty
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (57) empty -> .
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    COMMA           reduce using rule 57 (empty -> .)
    CLOSE_SQUARE_BRACKET reduce using rule 57 (empty -> .)
    IDENTIFIER      shift and go to state 14

    key_declaration                shift and go to state 188
    expression                     shift and go to state 160
    empty                          shift and go to state 161
    function_call                  shift and go to state 13

state 181

    (108) key_declaration -> expression EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 189


state 182

    (72) if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    ELSE            reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_TAG       reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 72 (if_statement -> IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 183

    (79) while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 79 (while_statement -> WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS body_statement_list .)


state 184

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition . SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list
    (82) condition -> condition . comparison condition
    (85) condition -> condition . comparison OPEN_PARENTHESIS condition CLOSE_PARENTHESIS
    (87) comparison -> . DOUBLE_EQUALS
    (88) comparison -> . NOT_EQUALS
    (89) comparison -> . GREATER_THAN
    (90) comparison -> . LESS_THAN
    (91) comparison -> . GREATER_THAN_OR_EQUALS
    (92) comparison -> . LESS_THAN_OR_EQUALS
    (93) comparison -> . AND
    (94) comparison -> . OR

    SEMICOLON       shift and go to state 190
    DOUBLE_EQUALS   shift and go to state 34
    NOT_EQUALS      shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN       shift and go to state 37
    GREATER_THAN_OR_EQUALS shift and go to state 38
    LESS_THAN_OR_EQUALS shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41

    comparison                     shift and go to state 33

state 185

    (46) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression . SEMICOLON CLOSE_CURLY_BRACKET
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    SEMICOLON       shift and go to state 191
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 186

    (43) function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 43 (function_declaration -> FUNCTION IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS body_statement_list .)


state 187

    (111) list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 111 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)
    CLOSE_PARENTHESIS reduce using rule 111 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)
    COMMA           reduce using rule 111 (list_access -> VARIABLE OPEN_SQUARE_BRACKET expression CLOSE_SQUARE_BRACKET .)


state 188

    (109) key_declaration -> key_declaration COMMA key_declaration .
    (109) key_declaration -> key_declaration . COMMA key_declaration

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSE_SQUARE_BRACKET reduce using rule 109 (key_declaration -> key_declaration COMMA key_declaration .)
    COMMA           shift and go to state 180

  ! COMMA           [ reduce using rule 109 (key_declaration -> key_declaration COMMA key_declaration .) ]


state 189

    (108) key_declaration -> expression EQUALS GREATER_THAN . expression
    (58) expression -> . VARIABLE
    (59) expression -> . NUMBER
    (60) expression -> . STRING
    (61) expression -> . BOOLEAN
    (62) expression -> . NULL
    (63) expression -> . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULO expression
    (69) expression -> . expression CONCATENATION expression
    (70) expression -> . expression CONCATENATION_EQUALS expression
    (71) function_call -> . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS

    VARIABLE        shift and go to state 59
    NUMBER          shift and go to state 32
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    NULL            shift and go to state 12
    IDENTIFIER      shift and go to state 14

    expression                     shift and go to state 192
    function_call                  shift and go to state 13

state 190

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON . for_update CLOSE_PARENTHESIS body_statement_list
    (77) for_update -> . assignment
    (78) for_update -> . empty
    (14) assignment -> . VARIABLE assignment_operator expression
    (15) assignment -> . VARIABLE EQUALS math_expression
    (16) assignment -> . VARIABLE EQUALS array_structure
    (17) assignment -> . VARIABLE EQUALS condition
    (18) assignment -> . VARIABLE PLUS PLUS
    (19) assignment -> . VARIABLE assignment_operator list_access
    (20) assignment -> . VARIABLE EQUALS casting math_expression
    (57) empty -> .

    VARIABLE        shift and go to state 133
    CLOSE_PARENTHESIS reduce using rule 57 (empty -> .)

    for_update                     shift and go to state 193
    assignment                     shift and go to state 194
    empty                          shift and go to state 195

state 191

    (46) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON . CLOSE_CURLY_BRACKET

    CLOSE_CURLY_BRACKET shift and go to state 196


state 192

    (108) key_declaration -> expression EQUALS GREATER_THAN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULO expression
    (69) expression -> expression . CONCATENATION expression
    (70) expression -> expression . CONCATENATION_EQUALS expression

    CLOSE_SQUARE_BRACKET reduce using rule 108 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    COMMA           reduce using rule 108 (key_declaration -> expression EQUALS GREATER_THAN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    MULTIPLY        shift and go to state 50
    DIVIDE          shift and go to state 51
    MODULO          shift and go to state 52
    CONCATENATION   shift and go to state 53
    CONCATENATION_EQUALS shift and go to state 54


state 193

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update . CLOSE_PARENTHESIS body_statement_list

    CLOSE_PARENTHESIS shift and go to state 197


state 194

    (77) for_update -> assignment .

    CLOSE_PARENTHESIS reduce using rule 77 (for_update -> assignment .)


state 195

    (78) for_update -> empty .

    CLOSE_PARENTHESIS reduce using rule 78 (for_update -> empty .)


state 196

    (46) body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .

    ELSE            reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    CLOSE_TAG       reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    FUNCTION        reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    VARIABLE        reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    IF              reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    WHILE           reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    FOR             reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    ECHO            reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    NUMBER          reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    STRING          reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    BOOLEAN         reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    NULL            reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    CLOSE_CURLY_BRACKET reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)
    RETURN          reduce using rule 46 (body_statement_list -> OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET .)


state 197

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS . body_statement_list
    (44) body_statement_list -> . OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET
    (45) body_statement_list -> . OPEN_CURLY_BRACKET empty CLOSE_CURLY_BRACKET
    (46) body_statement_list -> . OPEN_CURLY_BRACKET statement_list RETURN expression SEMICOLON CLOSE_CURLY_BRACKET

    OPEN_CURLY_BRACKET shift and go to state 116

    body_statement_list            shift and go to state 198

state 198

    (74) for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .

    CLOSE_TAG       reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    FUNCTION        reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    VARIABLE        reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IF              reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    WHILE           reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    FOR             reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    ECHO            reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NUMBER          reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    STRING          reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    BOOLEAN         reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    NULL            reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    IDENTIFIER      reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    CLOSE_CURLY_BRACKET reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)
    RETURN          reduce using rule 74 (for_statement -> FOR OPEN_PARENTHESIS for_initialization SEMICOLON condition SEMICOLON for_update CLOSE_PARENTHESIS body_statement_list .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for STRING in state 2 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 2 resolved as shift
WARNING: shift/reduce conflict for NULL in state 2 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 9 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 9 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 9 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 9 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 9 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 27 resolved as shift
WARNING: shift/reduce conflict for CONCATENATION_EQUALS in state 27 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 69 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 69 resolved as shift
WARNING: shift/reduce conflict for STRING in state 69 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 69 resolved as shift
WARNING: shift/reduce conflict for NULL in state 69 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 69 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 91 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for CONCATENATION_EQUALS in state 112 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 116 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 116 resolved as shift
WARNING: shift/reduce conflict for IF in state 116 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 116 resolved as shift
WARNING: shift/reduce conflict for FOR in state 116 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 116 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 116 resolved as shift
WARNING: shift/reduce conflict for STRING in state 116 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 116 resolved as shift
WARNING: shift/reduce conflict for NULL in state 116 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 116 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 138 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 138 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for CLOSE_PARENTHESIS in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 140 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 140 resolved as shift
WARNING: shift/reduce conflict for CLOSE_CURLY_BRACKET in state 145 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 166 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 166 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 167 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 167 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQUALS in state 169 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUALS in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_OR_EQUALS in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_OR_EQUALS in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 171 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 171 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 188 resolved as shift
WARNING: reduce/reduce conflict in state 8 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (math_expression -> NUMBER) in state 8
WARNING: reduce/reduce conflict in state 112 resolved using rule (parameter -> VARIABLE)
WARNING: rejected rule (expression -> VARIABLE) in state 112
